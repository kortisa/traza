--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.0
-- Dumped by pg_dump version 9.5.0

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: program; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA program;


ALTER SCHEMA program OWNER TO postgres;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = program, pg_catalog;

--
-- Name: ty_autoapprov; Type: TYPE; Schema: program; Owner: postgres
--

CREATE TYPE ty_autoapprov AS ENUM (
    'active',
    'nonactive'
);


ALTER TYPE ty_autoapprov OWNER TO postgres;

--
-- Name: ty_level; Type: TYPE; Schema: program; Owner: postgres
--

CREATE TYPE ty_level AS ENUM (
    'admin',
    'operator',
    'odgm',
    'manajer',
    'hrm'
);


ALTER TYPE ty_level OWNER TO postgres;

--
-- Name: ty_reqstatus; Type: TYPE; Schema: program; Owner: postgres
--

CREATE TYPE ty_reqstatus AS ENUM (
    'Approv',
    'Pending',
    'Canceled'
);


ALTER TYPE ty_reqstatus OWNER TO postgres;

--
-- Name: ty_status; Type: TYPE; Schema: program; Owner: postgres
--

CREATE TYPE ty_status AS ENUM (
    'active',
    'block',
    'special'
);


ALTER TYPE ty_status OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: ty_kodekota; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE ty_kodekota AS ENUM (
    'SGMYBRUNEI',
    'NONSGMY',
    'BATAM',
    'BINTAN',
    'KARIMUN',
    'TG.PINANG',
    'LUAR KEPRI'
);


ALTER TYPE ty_kodekota OWNER TO postgres;

--
-- Name: ty_kodelokasi; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE ty_kodelokasi AS ENUM (
    'USD',
    'EURO',
    'SGD',
    'RP'
);


ALTER TYPE ty_kodelokasi OWNER TO postgres;

--
-- Name: ty_level; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE ty_level AS ENUM (
    'admin',
    'operator',
    'odgm',
    'manajer',
    'hrm'
);


ALTER TYPE ty_level OWNER TO postgres;

--
-- Name: ty_lokasikonfigurasi; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE ty_lokasikonfigurasi AS ENUM (
    'Sgmybrunei',
    'Nonsgmy',
    'Batam',
    'Tanjung Pinang',
    'Bintan',
    'Karimun',
    'Luar Kepri'
);


ALTER TYPE ty_lokasikonfigurasi OWNER TO postgres;

--
-- Name: ty_otomatisterima; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE ty_otomatisterima AS ENUM (
    'aktif',
    'tidak'
);


ALTER TYPE ty_otomatisterima OWNER TO postgres;

--
-- Name: ty_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE ty_status AS ENUM (
    'active',
    'block',
    'special'
);


ALTER TYPE ty_status OWNER TO postgres;

--
-- Name: ty_statuspermintaan; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE ty_statuspermintaan AS ENUM (
    'approv',
    'pending',
    'canceled'
);


ALTER TYPE ty_statuspermintaan OWNER TO postgres;

SET search_path = program, pg_catalog;

--
-- Name: fu_addapproval(character varying, character varying, character varying, character varying, character varying, ty_autoapprov); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_addapproval(character varying, character varying, character varying, character varying, character varying, ty_autoapprov) RETURNS void
    LANGUAGE plpgsql
    AS $_$
begin
insert into program.ta_approval values ($1,$2,$3,$4,$5,$6);
end
$_$;


ALTER FUNCTION program.fu_addapproval(character varying, character varying, character varying, character varying, character varying, ty_autoapprov) OWNER TO postgres;

--
-- Name: fu_addareacode(character varying, character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_addareacode(character varying, character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
insert into program.ta_area_code(area_code,name) values ($1,$2);
end
$_$;


ALTER FUNCTION program.fu_addareacode(character varying, character varying) OWNER TO postgres;

--
-- Name: fu_addbasic_rate(character varying, integer, integer, numeric[], character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_addbasic_rate(br character varying, freq integer, homebase integer, value numeric[], rcpt character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare 
loop_code int;
loop_value int;
loop_id int;
array_area_code varchar[];
id_area_code varchar;
id varchar ;
vlue numeric;
count_area_code int;
begin
loop_code :=0 ; loop_value := 0; loop_id := 0;
select count(*) into count_area_code from program.ta_area_code ;
for x in 1 .. count_area_code loop
select program.ta_area_code.area_code into id_area_code from program.ta_area_code offset loop_id limit 1;
loop_id = loop_id + 1 ;
array_area_code = array_area_code || array[id_area_code];
end loop;

for array_counter in array_lower (value,1) .. array_upper (value,1)
loop
id = (select unnest (array_area_code) offset loop_code limit 1);
vlue = (select unnest (value) offset loop_value limit 1);
loop_code = loop_code + 1;
loop_value = loop_value + 1;

insert into program.ta_basic_rate (basic_rate,frequency,homebase,id_area_code,value,receipt) values (br,freq,homebase,id,vlue,rcpt);
end loop;

end
$$;


ALTER FUNCTION program.fu_addbasic_rate(br character varying, freq integer, homebase integer, value numeric[], rcpt character varying) OWNER TO postgres;

--
-- Name: fu_addbasic_rate_hotel(character varying, integer, integer, numeric[], integer, integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_addbasic_rate_hotel(br character varying, freq integer, homebase integer, value numeric[], min integer, max integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare 
loop_code int;
loop_value int;
loop_id int;
array_area_code varchar[];
id_area_code varchar;
id varchar ;
vlue numeric;
count_area_code int;
begin
loop_code :=0 ; loop_value := 0; loop_id := 0;
select count(*) into count_area_code from program.ta_area_code ;
for x in 1 .. count_area_code loop
select program.ta_area_code.area_code into id_area_code from program.ta_area_code offset loop_id limit 1;
loop_id = loop_id + 1 ;
array_area_code = array_area_code || array[id_area_code];
end loop;

for array_counter in array_lower (value,1) .. array_upper (value,1)
loop
id = (select unnest (array_area_code) offset loop_code limit 1);
vlue = (select unnest (value) offset loop_value limit 1);
loop_code = loop_code + 1;
loop_value = loop_value + 1;

insert into program.ta_basic_rate_hotel (basic_rate,frequency,homebase,id_area_code,value,min,max) values (br,freq,homebase,id,vlue,min,max);
end loop;

end
$$;


ALTER FUNCTION program.fu_addbasic_rate_hotel(br character varying, freq integer, homebase integer, value numeric[], min integer, max integer) OWNER TO postgres;

--
-- Name: fu_addbasic_rate_pocket_allowance(character varying, integer, integer, numeric[], integer, integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_addbasic_rate_pocket_allowance(br character varying, freq integer, homebase integer, value numeric[], min integer, max integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare 
loop_code int;
loop_value int;
loop_id int;
array_area_code varchar[];
id_area_code varchar;
id varchar ;
vlue numeric;
count_area_code int;
begin
loop_code :=0 ; loop_value := 0; loop_id := 0;
select count(*) into count_area_code from program.ta_area_code ;
for x in 1 .. count_area_code loop
select program.ta_area_code.area_code into id_area_code from program.ta_area_code offset loop_id limit 1;
loop_id = loop_id + 1 ;
array_area_code = array_area_code || array[id_area_code];
end loop;

for array_counter in array_lower (value,1) .. array_upper (value,1)
loop
id = (select unnest (array_area_code) offset loop_code limit 1);
vlue = (select unnest (value) offset loop_value limit 1);
loop_code = loop_code + 1;
loop_value = loop_value + 1;

insert into program.ta_basic_rate_pocket_allowance (basic_rate,frequency,homebase,id_area_code,value,min,max) values (br,freq,homebase,id,vlue,min,max);
end loop;

end
$$;


ALTER FUNCTION program.fu_addbasic_rate_pocket_allowance(br character varying, freq integer, homebase integer, value numeric[], min integer, max integer) OWNER TO postgres;

--
-- Name: fu_adddept(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_adddept(character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
id := program.fu_iddept();
insert into program.ta_department values (id,$1);
end
$_$;


ALTER FUNCTION program.fu_adddept(character varying) OWNER TO postgres;

--
-- Name: fu_adddestination(character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_adddestination(character varying, character varying, character varying, numeric) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
id := program.fu_iddestination();
insert into program.ta_destination values (id,$1,$2,$3,$4);
end
$_$;


ALTER FUNCTION program.fu_adddestination(character varying, character varying, character varying, numeric) OWNER TO postgres;

--
-- Name: fu_addemployee(character varying, character varying, character varying, character varying, character varying, character varying, character, date); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_addemployee(character varying, character varying, character varying, character varying, character varying, character varying, character, date) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
random varchar;
begin
random = program.fu_randomstring(8) ;
insert into program.ta_employee(nik,name,email,telegramid,deptid,
                        postid,grade,token,joindate) values ($1,$2,$3,$4,$5,$6,$7,random,$8) ;
end;
$_$;


ALTER FUNCTION program.fu_addemployee(character varying, character varying, character varying, character varying, character varying, character varying, character, date) OWNER TO postgres;

--
-- Name: fu_addlivingcost(character varying, character varying, character varying[], character varying[], integer[], character varying[], integer[], character varying[], integer[], character varying[], integer[], character varying[], integer[], integer[], integer[], integer, integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_addlivingcost(idreq character varying, reqnik character varying, travelernik character varying[], basic_rate_bs_pa character varying[], pocket_allowance integer[], basic_rate_bs character varying[], basic_rate integer[], basic_rate_bs_ha character varying[], hotel_allowance integer[], basic_rate_bs_as character varying[], basic_rate_as integer[], basic_rate_bs_ha_as character varying[], hotel_allowance_as integer[], total_at_cost_system integer[], total_allowance_system integer[], total_total_at_cost_system integer, total_total_allowance_system integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$
begin
insert into program.ta_livingcost(reqid,nikreq,niktraveler,basic_rate_bs_pa,pocket_allowance,basic_rate_bs,
                              basic_rate,basic_rate_bs_ha,hotel_allowance,basic_rate_bs_as,basic_rate_as,
                              basic_rate_bs_ha_as, hotel_allowance_as,total_at_cost_system, total_allowance_system,
                              total_total_at_cost_system,total_total_allowance_system) 
values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17) ;                                  

end;
$_$;


ALTER FUNCTION program.fu_addlivingcost(idreq character varying, reqnik character varying, travelernik character varying[], basic_rate_bs_pa character varying[], pocket_allowance integer[], basic_rate_bs character varying[], basic_rate integer[], basic_rate_bs_ha character varying[], hotel_allowance integer[], basic_rate_bs_as character varying[], basic_rate_as integer[], basic_rate_bs_ha_as character varying[], hotel_allowance_as integer[], total_at_cost_system integer[], total_allowance_system integer[], total_total_at_cost_system integer, total_total_allowance_system integer) OWNER TO postgres;

--
-- Name: fu_addpost(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_addpost(character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
id := program.fu_idpost();
insert into program.ta_position values (id,$1);
end
$_$;


ALTER FUNCTION program.fu_addpost(character varying) OWNER TO postgres;

--
-- Name: fu_addrequest(character varying, character varying[], character varying[], character varying[], character varying[], integer[], numeric[], character varying[], character varying[], date, character varying[], character varying[], character varying[], integer[], numeric[], character varying[], character varying[], date, numeric[], character varying[], character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_addrequest(reqnik character varying, travelnik character varying[], loctdept character varying[], deptpertripfrom character varying[], deptpertripto character varying[], timedept integer[], costdept numeric[], currencydept character varying[], transportdept character varying[], datedept date, loctarrive character varying[], arrivpertripfrom character varying[], arrivpertripto character varying[], timearrive integer[], costarrive numeric[], currencyarrive character varying[], transportarrive character varying[], datearriv date, totalcost numeric[], totalcurrency character varying[], reqid character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
transportss varchar[];
timedepart int;
timearrive int;
totaltimes int ;
totaldays int;
totaltransports text;
alltotalcost numeric;
begin
transportss = $9 || $17 ;
timedepart = program.fu_totaltime ($6);
timearrive = program.fu_totaltime ($14);
totaltimes = timedepart + timearrive ;
totaldays = program.fu_totalday($10,$18);
totaltransports = program.fu_countelement(array_agg(transportss:: text[])) ;
insert into program.ta_request(reqid,reqnik,travelnik,loctdept,loctdeptfrom,loctdeptto,
                              timedeptpertrip,costdept,currencydept,transportdept,datedept,
                              loctarrive, loctarrivefrom,loctarriveto, timearrivepertrip,costarrive,
                              currencyarrive,transportarrive,datearrive,transports,totaltransport,totaltime,totalday,reqtime,totalcost,totalcurrency) 
values ($21,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,transportss,totaltransports,
        totaltimes,totaldays,now(),$19,$20) ;                                  

end;
$_$;


ALTER FUNCTION program.fu_addrequest(reqnik character varying, travelnik character varying[], loctdept character varying[], deptpertripfrom character varying[], deptpertripto character varying[], timedept integer[], costdept numeric[], currencydept character varying[], transportdept character varying[], datedept date, loctarrive character varying[], arrivpertripfrom character varying[], arrivpertripto character varying[], timearrive integer[], costarrive numeric[], currencyarrive character varying[], transportarrive character varying[], datearriv date, totalcost numeric[], totalcurrency character varying[], reqid character varying) OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: ta_tipsandtrick; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_tipsandtrick (
    id integer NOT NULL,
    category character varying(10),
    country character varying(30) DEFAULT '-'::character varying NOT NULL,
    city character varying(30) DEFAULT '-'::character varying NOT NULL,
    title character varying(70),
    article character varying(1000)
);


ALTER TABLE ta_tipsandtrick OWNER TO postgres;

--
-- Name: fu_addtips(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_addtips(character varying, character varying, character varying, character varying, character varying) RETURNS SETOF ta_tipsandtrick
    LANGUAGE plpgsql
    AS $_$
begin
insert into program.ta_tipsandtrick(category,country,city,title,article) values($1,$2,$3,$4,$5);
end;
$_$;


ALTER FUNCTION program.fu_addtips(character varying, character varying, character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: ta_user; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_user (
    nik character varying(30) NOT NULL,
    password character varying(30) NOT NULL,
    level ty_level NOT NULL,
    status ty_status NOT NULL
);


ALTER TABLE ta_user OWNER TO postgres;

--
-- Name: fu_adduser(character varying, character varying, ty_level, ty_status); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_adduser(character varying, character varying, ty_level, ty_status) RETURNS SETOF ta_user
    LANGUAGE plpgsql
    AS $_$
begin
insert into program.ta_user(nik,password,level,status) values($1,$2,$3,$4);
end;
$_$;


ALTER FUNCTION program.fu_adduser(character varying, character varying, ty_level, ty_status) OWNER TO postgres;

--
-- Name: fu_all_estimation(character varying, character varying[], character varying[], character varying[], character varying[], character varying[], numeric, numeric, character varying[], character varying[], numeric[], numeric[], numeric[], numeric[]); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_all_estimation(locate character varying, nik character varying[], fromdept character varying[], todept character varying[], fromarive character varying[], toarive character varying[], total_atcost numeric, total_allowance numeric, estimasinamedept character varying[], estimasinameto character varying[], estimasivaluedept numeric[], estimasivalueto numeric[], time_estimasidept numeric[], time_estimasito numeric[]) RETURNS TABLE(currencytotal character varying[], total_all_atcost numeric[], total_all_allowance numeric[], out_fromdept character varying[], out_todept character varying[], out_fromarive character varying[], out_toarive character varying[], out_estimasinamedept character varying[], out_estimasinameto character varying[], out_estimasivaluedept numeric[], out_estimasivalueto numeric[], out_time_estimasidept numeric[], out_time_estimasito numeric[])
    LANGUAGE plpgsql
    AS $$ declare
countname_distinct int;
loop_curr_esname int ;
loop_es_name_value int ;
curr_esname varchar ;
array_value_estimasi_atcost numeric[]; array_value_estimasi_allowance numeric[];
name_estimasi varchar;
value_estimasi numeric ; value_real_plan numeric[];
array_cur_esname varchar []; curr_destination varchar;
array_array_values_estimasi_atcost numeric []; array_array_values_estimasi_allowance numeric [];
sum_value_atcost numeric ; sum_value_allowance numeric ;
var_r record ; time_system int; value_system numeric; array_value_estimasi_atcost_twelve_hours numeric(10,2); 
array_value_estimasi_allowance_twelve_hours numeric(10,2);
cek_condition boolean; time_all_estimasi int; time_to_hour numeric; twelve_hours numeric;
estimasiname varchar[]; time_estimasi int[]; estimasivalue numeric[];
begin
estimasiname = estimasinamedept || estimasinameto ;
time_estimasi = time_estimasidept || time_estimasito ;
estimasivalue = estimasivaluedept || estimasivalueto ;
select count (*) into countname_distinct from (select distinct (a) from unnest (estimasiname) a ) b ;
select currency into curr_destination from program.ta_destination where name_destination=locate ;
select time into time_system from program.ta_timecost_system ;
select value into value_system from program.ta_timecost_system ;
select sum (timetime) into time_all_estimasi from unnest (time_estimasi) timetime;

for var_r in array_lower(nik,1) .. array_upper(nik,1) 
loop

array_value_estimasi_atcost := array [] :: numeric[] ; array_array_values_estimasi_atcost := array [] :: numeric[];
array_value_estimasi_allowance :=array [] :: numeric[] ; array_array_values_estimasi_allowance := array [] :: numeric[] ;
array_cur_esname := array [] :: varchar[];

time_to_hour = time_all_estimasi / 60 ;
if (time_to_hour >= time_system ) then 
twelve_hours = (time_to_hour / time_system) * value_system ;
else 
twelve_hours = 0 ;
end if ;

loop_curr_esname := 0;
for var_nameestimasi in 1 .. countname_distinct
loop
select distinct (a) into curr_esname from unnest (estimasiname) a offset loop_curr_esname limit 1;
loop_curr_esname = loop_curr_esname + 1 ;
loop_es_name_value := 0;
array_value_estimasi_atcost := array [] :: numeric[];
array_value_estimasi_allowance := array [] :: numeric[];
for var_valueestimasi in array_lower (estimasivalue,1) .. array_upper (estimasivalue,1)

loop
select unnest (estimasiname) into name_estimasi offset loop_es_name_value limit 1;
select unnest (estimasivalue) into value_estimasi offset loop_es_name_value limit 1;
loop_es_name_value = loop_es_name_value +1 ;

if (curr_esname = name_estimasi) then
array_value_estimasi_atcost = array_value_estimasi_atcost || array [value_estimasi] ;
array_value_estimasi_allowance = array_value_estimasi_allowance || array [value_estimasi] ;

end if ;
end loop;

if (curr_destination = curr_esname) then
array_value_estimasi_atcost_twelve_hours = total_atcost + twelve_hours ;
array_value_estimasi_atcost = array_value_estimasi_atcost || array[array_value_estimasi_atcost_twelve_hours];
array_value_estimasi_allowance_twelve_hours = total_allowance + twelve_hours ;
array_value_estimasi_allowance = array_value_estimasi_allowance || array[array_value_estimasi_allowance_twelve_hours];
end if ;

select sum (vluee) into sum_value_atcost from unnest (array_value_estimasi_atcost) vluee;
select sum (vlueee) into sum_value_allowance from unnest (array_value_estimasi_allowance) vlueee;
array_cur_esname =  array_cur_esname || curr_esname ;
array_array_values_estimasi_atcost = array_array_values_estimasi_atcost || array[sum_value_atcost] ;
array_array_values_estimasi_allowance = array_array_values_estimasi_allowance || array[sum_value_allowance] ;
end loop;
select curr_destination = any(array_cur_esname::varchar[]) a into cek_condition;
if (cek_condition <> true) then
array_cur_esname =  array_cur_esname || array[curr_destination];
array_value_estimasi_atcost_twelve_hours = total_atcost + twelve_hours ;
array_array_values_estimasi_atcost = array_array_values_estimasi_atcost || array[array_value_estimasi_atcost_twelve_hours];
array_value_estimasi_allowance_twelve_hours = total_allowance + twelve_hours ;
array_array_values_estimasi_allowance = array_array_values_estimasi_allowance || array[array_value_estimasi_allowance_twelve_hours];
end if;

currencytotal := array_cur_esname ;
total_all_atcost := array_array_values_estimasi_atcost ;
total_all_allowance := array_array_values_estimasi_allowance ;
out_fromdept := fromdept ;
out_todept := todept ;
out_fromarive := fromarive ;
out_toarive := toarive; 
out_estimasinamedept := estimasinamedept ;
out_estimasinameto := estimasinameto ;
out_estimasivaluedept := estimasivaluedept;
out_estimasivalueto := estimasivalueto;
out_time_estimasidept := time_estimasidept ;
out_time_estimasito := time_estimasito ;


return next ;
end loop;
end
$$;


ALTER FUNCTION program.fu_all_estimation(locate character varying, nik character varying[], fromdept character varying[], todept character varying[], fromarive character varying[], toarive character varying[], total_atcost numeric, total_allowance numeric, estimasinamedept character varying[], estimasinameto character varying[], estimasivaluedept numeric[], estimasivalueto numeric[], time_estimasidept numeric[], time_estimasito numeric[]) OWNER TO postgres;

--
-- Name: fu_copytable(integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_copytable(integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$
begin
INSERT INTO program.ta_realization SELECT * FROM program.ta_request 
where id= $1;
end
$_$;


ALTER FUNCTION program.fu_copytable(integer) OWNER TO postgres;

--
-- Name: fu_copytable(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_copytable(character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$
begin
INSERT INTO program.ta_realization SELECT * FROM program.ta_request 
where reqid= $1;
end
$_$;


ALTER FUNCTION program.fu_copytable(character varying) OWNER TO postgres;

--
-- Name: fu_countelement(text[]); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_countelement(text[]) RETURNS text
    LANGUAGE sql
    AS $_$
SELECT string_agg(i || ':' || c, '  ' ) FROM (SELECT i, COUNT(*) c FROM (SELECT unnest($1::text[]) i) i GROUP BY i ORDER BY c DESC) foo;
$_$;


ALTER FUNCTION program.fu_countelement(text[]) OWNER TO postgres;

--
-- Name: fu_deleteapproval(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_deleteapproval(character varying) RETURNS void
    LANGUAGE sql
    AS $_$
delete from program.ta_approval where reqnik=$1;
$_$;


ALTER FUNCTION program.fu_deleteapproval(character varying) OWNER TO postgres;

--
-- Name: fu_get_allowance(character varying, character varying[], character varying, integer, integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_get_allowance(city character varying, nik character varying[], grade character varying, homebasee integer, day integer) RETURNS TABLE(n_karyawan character varying[], basic_rate_bs_pa character varying[], pocket_allowance integer[], basic_rate_bs character varying[], basic_rate integer[], basic_rate_bs_ha character varying[], hotel_allowance integer[], basic_rate_bs_as character varying[], basic_rate_as integer[], basic_rate_bs_ha_as character varying[], hotel_allowance_as integer[], total_at_cost_system integer[], total_allowance_system integer[], total_total_at_cost_system integer, total_total_allowance_system integer)
    LANGUAGE plpgsql
    AS $$
declare
destinate numeric[]; area_code varchar; konstanta numeric; loop_basicrate int ; loop_hotelallowance int ; loop_pocketallowance int ;
basic numeric[]; estimasi numeric[]; rate varchar; rate_total varchar[];
vlue numeric; freq int; home int; total_value numeric[];
total_freq int[]; total_home int[]; totalfreq_totalvalue numeric; totalfreqvalue numeric(10,2)[];
totalfreqvalueadvance numeric(10,2) ; total_totalfreqvalueadvance numeric (10,2)[];
totalfreqvalueadvance_pa numeric(10,2) ; total_totalfreqvalueadvance_pa numeric (10,2)[];
home_pa int; freq_pa int; vlue_pa numeric ;
total_home_pa int[]; total_freq_pa int[]; total_value_pa numeric[] ;
totalfreq_totalvalue_pa numeric; totalfreqvalue_pa numeric[];
totalfreqvalueadvance_ha numeric(10,2) ; total_totalfreqvalueadvance_ha numeric (10,2)[];
home_ha int; freq_ha int; vlue_ha numeric ;
total_home_ha int[]; total_freq_ha int[]; total_value_ha numeric[] ;
totalfreq_totalvalue_ha numeric; totalfreqvalue_ha numeric[];
min_pa int; max_pa int ; day_pa int ; total_day int ;
min_ha int; max_ha int ; day_ha int ; total_day_ha int ;
total_total_total_day int[] ; total_total_day int ; day_paa int; nilai int; array_max_pa int; angka int;
total_total_total_day_ha int[] ; total_total_day_ha int ; day_haa int; nilai_ha int; array_max_ha int; angka_ha int;
total_total_total_day_basic int[] ; total_total_day_basic int ; day_basic int;
var_r record ; asd int; count_all_pocketallowance int; count_all_hotelallowance int; count_all_basicrate int ; count_all_basicrate_allowance_system int;
bs_rate varchar ; bs_rate_ha varchar ; bs_rate_pa varchar ;  bs_rate_array varchar[] ; bs_rate_ha_array varchar[] ; bs_rate_pa_array varchar[] ; 
total_pa int; total_bs int; total_ha int ; total_all int; 
const numeric; nik_karyawan varchar; loop_nik int ;
konstanta_config_system numeric;
bs_rate_as varchar ; home_as int; vlue_as numeric; freq_as int; loop_basicrate_as int;
totalfreq_totalvalue_as numeric ; total_total_day_basic_as int;  totalfreqvalueadvance_as numeric ; total_total_total_day_basic_as int[];
bs_rate_array_as varchar[]; total_freq_as int []; total_value_as numeric []; total_home_as int [] ; 
totalfreqvalue_as numeric[] ;total_totalfreqvalueadvance_as numeric[];
total_pa_as int ; total_bs_as int ; total_ha_as int ; total_all_as int ;
totalfreq_totalvalue_ha_as numeric; totalfreqvalueadvance_ha_as numeric ;
bs_rate_ha_array_as varchar[]; total_total_total_day_ha_as int []; total_freq_ha_as int []; total_value_ha_as numeric[];
total_home_ha_as int []; totalfreqvalue_ha_as numeric []; total_totalfreqvalueadvance_ha_as numeric[];

begin
loop_nik := 0;
select program.ta_destination.area_code into area_code from program.ta_destination where name_destination=city;
select program.ta_destination.constant into konstanta from program.ta_destination where name_destination=city;
select program.ta_config_system.value into konstanta_config_system from program.ta_config_system where id=1;
select count(*) into count_all_basicrate from program.ta_basic_rate where id_area_code=area_code ;
select count(*) into count_all_basicrate_allowance_system from program.ta_basic_rate where id_area_code=area_code  and receipt='no' ;
select count(*) into count_all_hotelallowance from program.ta_basic_rate_hotel where id_area_code=area_code;
select count(*) into count_all_pocketallowance  from program.ta_basic_rate_pocket_allowance where id_area_code=area_code ;
for var_r in array_lower(nik,1) .. array_upper(nik,1)  loop
loop_basicrate := 0 ; loop_hotelallowance := 0 ; loop_pocketallowance := 0 ; loop_basicrate_as := 0 ;
day_paa = day;
day_haa = day;
bs_rate_pa_array := array[] :: varchar[] ;
total_total_total_day := array[] :: int []; total_freq_pa := array[] :: int [] ; total_home_pa := array[] :: int [];
total_value_pa := array[] :: numeric[];  totalfreqvalue_pa := array[] :: numeric[]; total_totalfreqvalueadvance_pa := array[]:: numeric[];
bs_rate_array := array[] :: varchar[] ;
total_total_total_day_basic := array[] :: int []; total_freq := array[]:: int []; total_home := array[]:: int []; 
total_value := array[]:: numeric[]; totalfreqvalue := array[] :: numeric[]; total_totalfreqvalueadvance := array[]:: numeric[] ;
bs_rate_ha_array := array[] :: varchar[] ;
total_total_total_day_ha := array[] :: int []; total_freq_ha := array[]:: int [] ;total_home_ha := array[] :: int []; 
total_value_ha := array[]:: numeric[]; totalfreqvalue_ha := array[]:: numeric[]; total_totalfreqvalueadvance_ha := array[]:: numeric[];
total_total_total_day_basic_as := array[] :: int[];
bs_rate_array_as:= array[]::  varchar[]; total_freq_as := array[]:: int []; total_value_as :=array[]:: numeric []; total_home_as := array[]:: int [] ; 
totalfreqvalue_as := array[]::  numeric[] ;total_totalfreqvalueadvance_as := array[]::  numeric[];
bs_rate_ha_array_as := array[]:: varchar[]; total_total_total_day_ha_as := array[]:: int []; total_freq_ha_as := array[]:: int [];
total_value_ha_as := array[]:: numeric[]; total_home_ha_as := array[]:: int []; totalfreqvalue_ha_as := array[]:: numeric []; 
total_totalfreqvalueadvance_ha_as := array[]:: numeric[];


for counter in 1 .. count_all_pocketallowance  
loop
select program.ta_basic_rate_pocket_allowance.basic_rate into bs_rate_pa from program.ta_basic_rate_pocket_allowance where id_area_code = area_code  order by id offset loop_pocketallowance limit 1 ;
select homebase into home_pa from program.ta_basic_rate_pocket_allowance where id_area_code = area_code  order by id offset loop_pocketallowance limit 1 ;
select value into vlue_pa from program.ta_basic_rate_pocket_allowance where id_area_code = area_code  order by id offset loop_pocketallowance limit 1 ;
select frequency into freq_pa from program.ta_basic_rate_pocket_allowance where id_area_code = area_code  order by id offset loop_pocketallowance limit 1 ;
select min into min_pa from program.ta_basic_rate_pocket_allowance where id_area_code = area_code order by id offset   loop_pocketallowance limit 1 ;
select max into max_pa from program.ta_basic_rate_pocket_allowance where id_area_code = area_code order by id offset  loop_pocketallowance limit 1 ;


loop_pocketallowance = loop_pocketallowance + 1 ;
angka:=0;
if (min_pa = 0 ) then 
min_pa = 1 ;
else
min_pa = min_pa ;
end if; 
for minmax in min_pa .. max_pa
loop
angka = angka + 1 ;
end loop;
if (day > min_pa and day > max_pa ) then
total_day = angka ;
elseif (day >= min_pa and day <= max_pa) then
total_day = angka ;
elseif (day < min_pa and day < max_pa) then
total_day = 0 ;
end if;

if (total_day = 0 ) then 
day_pa = 0;
nilai = 0 ;
elseif (total_day < day_paa) then
day_pa = day_paa - total_day;
nilai = total_day ;
elseif (total_day >= day_paa) then
day_pa = day_paa ;
nilai = day_paa ;

end if;
day_paa = day_pa ;
total_total_day = nilai ;

totalfreq_totalvalue_pa =  (vlue_pa * konstanta) / freq_pa ;
if (homebasee = 1 and homebasee = home_pa) then 
totalfreqvalueadvance_pa = (((vlue_pa * konstanta) /freq_pa) * total_total_day ) * home_pa;
elseif (homebasee = 1 and homebasee != home_pa) then
totalfreqvalueadvance_pa = (((vlue_pa * konstanta) /freq_pa) * total_total_day ) * home_pa;
elseif (homebasee = 0) then
totalfreqvalueadvance_pa = (((vlue_pa * konstanta) /freq_pa) * total_total_day ) * 1;
end if ;
bs_rate_pa_array = bs_rate_pa_array || array [bs_rate_pa];
total_total_total_day = total_total_total_day || array[nilai];
total_freq_pa = total_freq_pa || array[freq_pa];
total_value_pa = total_value_pa || array[vlue_pa];
total_home_pa= total_home_pa || array[home_pa];
totalfreqvalue_pa = totalfreqvalue_pa || array[totalfreq_totalvalue_pa];
total_totalfreqvalueadvance_pa = total_totalfreqvalueadvance_pa || array[totalfreqvalueadvance_pa];
end loop;


for counter in 1 .. count_all_basicrate  
loop
select program.ta_basic_rate.basic_rate into bs_rate from program.ta_basic_rate where id_area_code = area_code  order by id offset loop_basicrate limit 1 ;
select homebase into home from program.ta_basic_rate where id_area_code = area_code  order by id offset loop_basicrate limit 1 ;
select value into vlue from program.ta_basic_rate where id_area_code = area_code  order by id offset loop_basicrate limit 1 ;
select frequency into freq from program.ta_basic_rate where id_area_code = area_code  order by id offset loop_basicrate limit 1 ;
loop_basicrate = loop_basicrate + 1 ;
totalfreq_totalvalue =  (vlue * konstanta) / freq ;
if (homebasee = 1 and homebasee = home) then 
totalfreqvalueadvance = (((vlue * konstanta) /freq) * day) * home ;
elseif (homebasee = 1 and homebasee != home) then
totalfreqvalueadvance = (((vlue * konstanta) /freq) * day) * home ;
elseif (homebasee = 0) then
totalfreqvalueadvance = (((vlue * konstanta) /freq) * day) * 1 ;
end if ;
total_total_day_basic = day ;
bs_rate_array = bs_rate_array || array[bs_rate];
total_total_total_day_basic = total_total_total_day_basic || array[total_total_day_basic];
total_freq = total_freq || array[freq];
total_value = total_value || array[vlue];
total_home= total_home || array[home];
totalfreqvalue = totalfreqvalue || array[totalfreq_totalvalue];
total_totalfreqvalueadvance = total_totalfreqvalueadvance || array[totalfreqvalueadvance];
end loop;

for counter in 1 .. count_all_basicrate_allowance_system 
loop
select program.ta_basic_rate.basic_rate into bs_rate_as from program.ta_basic_rate where id_area_code = area_code and receipt='no'  order by id offset loop_basicrate_as limit 1 ;
select homebase into home_as from program.ta_basic_rate where id_area_code = area_code and receipt='no'  order by id offset loop_basicrate_as limit 1 ;
select value into vlue_as from program.ta_basic_rate where id_area_code = area_code and receipt='no'  order by id offset loop_basicrate_as limit 1 ;
select frequency into freq_as from program.ta_basic_rate where id_area_code = area_code and receipt='no'  order by id offset loop_basicrate_as limit 1 ;
loop_basicrate_as = loop_basicrate_as + 1 ;
totalfreq_totalvalue_as =  (vlue_as * konstanta_config_system) / freq_as ;
if (homebasee = 1 and homebasee = home_as) then 
totalfreqvalueadvance_as = (((vlue_as * konstanta_config_system) /freq_as) * day) * home_as ;
elseif (homebasee = 1 and homebasee != home_as) then
totalfreqvalueadvance_as = (((vlue_as * konstanta_config_system) /freq_as) * day) * home_as ;
elseif (homebasee = 0) then
totalfreqvalueadvance_as = (((vlue_as * konstanta_config_system )/freq_as) * day) * 1 ;
end if ;
total_total_day_basic_as = day ;
bs_rate_array_as = bs_rate_array_as || array[bs_rate_as];
total_total_total_day_basic_as = total_total_total_day_basic_as || array[total_total_day_basic_as];
total_freq_as = total_freq_as || array[freq_as];
total_value_as = total_value_as || array[vlue_as];
total_home_as= total_home_as || array[home_as];
totalfreqvalue_as = totalfreqvalue_as || array[totalfreq_totalvalue_as];
total_totalfreqvalueadvance_as = total_totalfreqvalueadvance_as || array[totalfreqvalueadvance_as];
end loop;



for counter in 1 .. count_all_hotelallowance 
loop
select program.ta_basic_rate_hotel.basic_rate into bs_rate_ha from program.ta_basic_rate_hotel where id_area_code = area_code  order by id offset loop_hotelallowance limit 1 ;
select homebase into home_ha from program.ta_basic_rate_hotel where id_area_code = area_code  order by id offset loop_hotelallowance limit 1 ;
select value into vlue_ha from program.ta_basic_rate_hotel where id_area_code = area_code  order by id  offset loop_hotelallowance limit 1 ;
select frequency into freq_ha from program.ta_basic_rate_hotel where id_area_code = area_code  order by id offset loop_hotelallowance limit 1 ;
select min into min_ha from program.ta_basic_rate_hotel where id_area_code = area_code  order by id offset loop_hotelallowance limit 1 ;
select max into max_ha from program.ta_basic_rate_hotel where id_area_code = area_code  order by id offset loop_hotelallowance limit 1 ;


loop_hotelallowance = loop_hotelallowance + 1 ;
angka_ha:=0;
if (min_ha = 0 ) then 
min_ha = 1 ;
else
min_ha = min_ha ;
end if; 
for minmax_ha in min_ha .. max_ha
loop
angka_ha = angka_ha + 1 ;
end loop;
if (day > min_ha and day > max_ha ) then
total_day_ha = angka_ha ;
elseif (day >= min_ha and day <= max_ha) then
total_day_ha = angka_ha ;
elseif (day < min_ha and day < max_ha) then
total_day_ha = 0 ;
end if;

if (total_day_ha = 0 ) then 
day_ha = 0;
nilai_ha = 0 ;
elseif (total_day_ha < day_haa) then
day_ha = day_haa - total_day_ha;
nilai_ha = total_day_ha ;
elseif (total_day_ha >= day_haa) then
day_ha = day_haa ;
nilai_ha = day_haa ;

end if;
day_haa = day_ha ;
total_total_day_ha = nilai_ha ;

totalfreq_totalvalue_ha =  (vlue_ha * konstanta) / freq_ha ;
if (homebasee = 1 and homebasee = home_ha) then 
totalfreqvalueadvance_ha = (((vlue_ha * konstanta) /freq_ha) * total_total_day_ha ) * home_ha;
elseif (homebasee = 1 and homebasee != home_ha) then
totalfreqvalueadvance_ha = (((vlue_ha * konstanta) /freq_ha) * total_total_day_ha ) * home_ha;
elseif (homebasee = 0) then
totalfreqvalueadvance_ha = (((vlue_ha * konstanta) /freq_ha) * total_total_day_ha ) * 1;
end if ;
bs_rate_ha_array = bs_rate_ha_array || array[bs_rate_ha];
total_total_total_day_ha = total_total_total_day_ha || array[nilai_ha];
total_freq_ha = total_freq_ha || array[freq_ha];
total_value_ha = total_value_ha || array[vlue_ha];
total_home_ha= total_home_ha || array[home_ha];
totalfreqvalue_ha = totalfreqvalue_ha || array[totalfreq_totalvalue_ha];
total_totalfreqvalueadvance_ha = total_totalfreqvalueadvance_ha || array[totalfreqvalueadvance_ha];

totalfreq_totalvalue_ha_as =  (vlue_ha * konstanta_config_system) / freq_ha ;
if (homebasee = 1 and homebasee = home_ha) then 
totalfreqvalueadvance_ha_as = (((vlue_ha * konstanta_config_system) /freq_ha) * total_total_day_ha ) * home_ha;
elseif (homebasee = 1 and homebasee != home_ha) then
totalfreqvalueadvance_ha = (((vlue_ha * konstanta_config_system) /freq_ha) * total_total_day_ha ) * home_ha;
elseif (homebasee = 0) then
totalfreqvalueadvance_ha = (((vlue_ha * konstanta_config_system) /freq_ha) * total_total_day_ha ) * 1;
end if ;
bs_rate_ha_array_as = bs_rate_ha_array_as || array[bs_rate_ha];
total_total_total_day_ha_as = total_total_total_day_ha_as || array[nilai_ha];
total_freq_ha_as = total_freq_ha_as || array[freq_ha];
total_value_ha_as = total_value_ha_as || array[vlue_ha];
total_home_ha_as= total_home_ha_as || array[home_ha];
totalfreqvalue_ha_as = totalfreqvalue_ha_as || array[totalfreq_totalvalue_ha];
total_totalfreqvalueadvance_ha_as = total_totalfreqvalueadvance_ha_as || array[totalfreqvalueadvance_ha];

end loop;
total_pa = (select sum(total_pa_pa) from unnest (total_totalfreqvalueadvance_pa) total_pa_pa);
total_bs = (select sum(total_bs_bs) from unnest (total_totalfreqvalueadvance) total_bs_bs);
total_ha = (select sum(total_ha_ha) from unnest (total_totalfreqvalueadvance_ha) total_ha_ha);
total_all = total_pa + total_bs + total_ha ;

total_pa_as = (select sum(total_pa_pa) from unnest (total_totalfreqvalueadvance_pa) total_pa_pa);
total_bs_as = (select sum(total_bs_bs) from unnest (total_totalfreqvalueadvance_as) total_bs_bs);
total_ha_as = (select sum(total_ha_ha) from unnest (total_totalfreqvalueadvance_ha_as) total_ha_ha);
total_all_as = total_pa_as + total_bs_as + total_ha_as ;


nik_karyawan = (select unnest (nik) offset loop_nik limit 1);
loop_nik = loop_nik + 1 ;
		n_karyawan :=  array[nik_karyawan];	
	basic_rate_bs_pa := array[bs_rate_pa_array];
	pocket_allowance := array[total_total_total_day,total_freq_pa,total_home_pa,total_value_pa, totalfreqvalue_pa,total_totalfreqvalueadvance_pa];

	basic_rate_bs := array[bs_rate_array];
	basic_rate := array[total_total_total_day_basic,total_freq,total_home,total_value, totalfreqvalue,total_totalfreqvalueadvance];
	basic_rate_bs_ha := array[bs_rate_ha_array];
	hotel_allowance := array[total_total_total_day_ha,total_freq_ha,total_home_ha,total_value_ha, totalfreqvalue_ha,total_totalfreqvalueadvance_ha];

	basic_rate_bs_as := array[bs_rate_array_as];
	basic_rate_as := array[total_total_total_day_basic_as,total_freq_as,total_home_as,total_value_as, totalfreqvalue_as,total_totalfreqvalueadvance_as];
	basic_rate_bs_ha_as := array[bs_rate_ha_array_as];
	hotel_allowance_as := array[total_total_total_day_ha_as,total_freq_ha_as,total_home_ha_as,total_value_ha_as, totalfreqvalue_ha_as,total_totalfreqvalueadvance_ha_as];


	total_at_cost_system := array[total_pa,total_bs,total_ha];
	total_allowance_system := array[total_pa_as,total_bs_as,total_ha_as];
	total_total_at_cost_system := total_all;
	total_total_allowance_system := total_all_as ; 

return next;
end loop;
end
$$;


ALTER FUNCTION program.fu_get_allowance(city character varying, nik character varying[], grade character varying, homebasee integer, day integer) OWNER TO postgres;

--
-- Name: fu_idarea(); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_idarea() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
total1 int;
total2 text;
full text;
begin
total1 = count(*) from program.ta_area_code;
total2 = total1 + 1;
id:='BR0';
full = id||total2;
return full;
end
$$;


ALTER FUNCTION program.fu_idarea() OWNER TO postgres;

--
-- Name: fu_iddept(); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_iddept() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
rand int;
total1 int;
total2 text;
full text;
begin
rand = ceil(random()*100);
total1 = count(*) from program.ta_department;
total2 = total1 + 1;
id:='DEPT';
full = id||rand||total2;
return full;
end
$$;


ALTER FUNCTION program.fu_iddept() OWNER TO postgres;

--
-- Name: fu_iddestination(); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_iddestination() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
total1 int;
total2 text;
full text;
begin
total1 = count(*) from program.ta_destination;
total2 = total1 + 1;
id:='DC0';
full = id||total2;
return full;
end
$$;


ALTER FUNCTION program.fu_iddestination() OWNER TO postgres;

--
-- Name: fu_idpost(); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_idpost() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
rand int;
total1 int;
total2 text;
full text;
begin
rand = ceil(random()*100);
total1 = count(*) from program.ta_position;
total2 = total1 + 1;
id:='POST';
full = id||rand||total2;
return full;
end
$$;


ALTER FUNCTION program.fu_idpost() OWNER TO postgres;

--
-- Name: fu_idreq(); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_idreq() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
years text;
months text;
days text;
rand int;
total1 int;
total2 text;
full text;
begin
years = extract(year from now());
months = extract(month from now());
days = extract(day from now());
rand = ceil(random()*100);
total1 = count(*) from program.ta_position;
total2 = total1 + 1;
id:='REQ';
full = id||years||months||days||rand||total2;
return full;
end
$$;


ALTER FUNCTION program.fu_idreq() OWNER TO postgres;

--
-- Name: fu_randomstring(integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_randomstring(length integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
declare
  chars text[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';
  result text := '';
  i integer := 0;
begin
  if length < 0 then
    raise exception 'Given length cannot be less than 0';
  end if;
  for i in 1..length loop
    result := result || chars[1+random()*(array_length(chars, 1)-1)];
  end loop;
  return result;
end;
$$;


ALTER FUNCTION program.fu_randomstring(length integer) OWNER TO postgres;

--
-- Name: fu_totalday(date, date); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_totalday(date1 date, date2 date) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare
asd numeric(4);
begin
asd = date2::date - date1::date;
return asd;
end;
$$;


ALTER FUNCTION program.fu_totalday(date1 date, date2 date) OWNER TO postgres;

--
-- Name: fu_totaltime(integer[]); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_totaltime(integer[]) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 
nilai int ;
begin
nilai = sum(a) from unnest ($1) a;
return nilai;
end
$_$;


ALTER FUNCTION program.fu_totaltime(integer[]) OWNER TO postgres;

--
-- Name: fu_updateapproval(character varying, character varying, character varying, character varying, character varying, ty_autoapprov); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updateapproval(character varying, character varying, character varying, character varying, character varying, ty_autoapprov) RETURNS void
    LANGUAGE sql
    AS $_$
update program.ta_approval
set
approval1=$2,
approval2=$3,
approval3=$4,
approval4=$5,
requeststatus=$6
where reqnik=$1;
$_$;


ALTER FUNCTION program.fu_updateapproval(character varying, character varying, character varying, character varying, character varying, ty_autoapprov) OWNER TO postgres;

--
-- Name: fu_updateareacode(character varying, character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updateareacode(character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
update program.ta_area_code
set
name=$2
where area_code=$1;
$_$;


ALTER FUNCTION program.fu_updateareacode(character varying, character varying) OWNER TO postgres;

--
-- Name: fu_updatebasic_rate(character varying, character varying, integer, integer, numeric[], character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updatebasic_rate(bs_rate character varying, name character varying, freq integer, hb integer, value numeric[], rcpt character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare 
loop_area int;
loop_value int;
array_id_area varchar[];
array_id varchar[];
id_ac varchar;
count_area int;vlue numeric;code varchar;loop_code int;
id_ar_ea_code varchar;
begin
loop_area:=0;
select count (*) into count_area from program.ta_area_code ;
for i in 1 .. count_area loop
select program.ta_area_code.area_code into id_ac from program.ta_area_code order by id offset loop_area limit 1;
loop_area = loop_area + 1 ;
array_id_area = array_id_area || array[id_ac];
end loop;

loop_value:=0;loop_code:=0;
for x in array_lower(value,1) .. array_upper(value,1) loop
select unnest(value) into vlue offset loop_value limit 1;
select unnest(array_id_area) into id_ar_ea_code offset loop_value limit 1;
loop_value = loop_value + 1;

update program.ta_basic_rate set basic_rate=name, frequency = freq, homebase=hb, value= vlue, receipt = rcpt
where basic_rate=bs_rate and id_area_code=id_ar_ea_code;
end loop;

end
$$;


ALTER FUNCTION program.fu_updatebasic_rate(bs_rate character varying, name character varying, freq integer, hb integer, value numeric[], rcpt character varying) OWNER TO postgres;

--
-- Name: fu_updatebasic_rate_hotel(character varying, character varying, integer, integer, numeric[], integer, integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updatebasic_rate_hotel(bs_rate character varying, name character varying, freq integer, hb integer, value numeric[], bs_min integer, bs_max integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare 
loop_area int;
loop_value int;
array_id_area varchar[];
array_id varchar[];
id_ac varchar;
count_area int;vlue numeric;code varchar;loop_code int;
id_ar_ea_code varchar;
begin
loop_area:=0;
select count (*) into count_area from program.ta_area_code ;
for i in 1 .. count_area loop
select program.ta_area_code.area_code into id_ac from program.ta_area_code order by id offset loop_area limit 1;
loop_area = loop_area + 1 ;
array_id_area = array_id_area || array[id_ac];
end loop;

loop_value:=0;loop_code:=0;
for x in array_lower(value,1) .. array_upper(value,1) loop
select unnest(value) into vlue offset loop_value limit 1;
select unnest(array_id_area) into id_ar_ea_code offset loop_value limit 1;
loop_value = loop_value + 1;

update program.ta_basic_rate_hotel set basic_rate=name, frequency = freq, homebase=hb, value= vlue, min=bs_min, max=bs_max
where basic_rate=bs_rate and id_area_code=id_ar_ea_code;
end loop;

end
$$;


ALTER FUNCTION program.fu_updatebasic_rate_hotel(bs_rate character varying, name character varying, freq integer, hb integer, value numeric[], bs_min integer, bs_max integer) OWNER TO postgres;

--
-- Name: fu_updatebasic_rate_pocket(character varying, character varying, integer, integer, numeric[], integer, integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updatebasic_rate_pocket(bs_rate character varying, name character varying, freq integer, hb integer, value numeric[], br_min integer, br_max integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare 
loop_area int;
loop_value int;
array_id_area varchar[];
array_id varchar[];
id_ac varchar;
count_area int;vlue numeric;code varchar;loop_code int;
id_ar_ea_code varchar; 
begin
loop_area:=0;
select count (*) into count_area from program.ta_area_code ;
for i in 1 .. count_area loop
select program.ta_area_code.area_code into id_ac from program.ta_area_code order by id offset loop_area limit 1;
loop_area = loop_area + 1 ;
array_id_area = array_id_area || array[id_ac];
end loop;

loop_value:=0;loop_code:=0;
for x in array_lower(value,1) .. array_upper(value,1) loop
select unnest(value) into vlue offset loop_value limit 1;
select unnest(array_id_area) into id_ar_ea_code offset loop_value limit 1;
loop_value = loop_value + 1;

update program.ta_basic_rate_pocket_allowance set basic_rate=name, frequency = freq, homebase=hb, value= vlue, min = br_min, max = br_max
where basic_rate=bs_rate and id_area_code=id_ar_ea_code;
end loop;

end
$$;


ALTER FUNCTION program.fu_updatebasic_rate_pocket(bs_rate character varying, name character varying, freq integer, hb integer, value numeric[], br_min integer, br_max integer) OWNER TO postgres;

--
-- Name: fu_updateconfig(integer, character varying, numeric); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updateconfig(integer, character varying, numeric) RETURNS void
    LANGUAGE sql
    AS $_$
update program.ta_config_system
set
name=$2,
value=$3
where id=$1;
$_$;


ALTER FUNCTION program.fu_updateconfig(integer, character varying, numeric) OWNER TO postgres;

--
-- Name: fu_updatedepartment(character varying, character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updatedepartment(character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
update program.ta_department
set
deptname=$2
where deptid=$1;
$_$;


ALTER FUNCTION program.fu_updatedepartment(character varying, character varying) OWNER TO postgres;

--
-- Name: fu_updatedestination(character varying, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updatedestination(character varying, character varying, character varying, character varying, numeric) RETURNS void
    LANGUAGE sql
    AS $_$
update program.ta_destination
set
name_destination=$2,
area_code=$3,
currency=$4,
constant=$5
where code=$1;
$_$;


ALTER FUNCTION program.fu_updatedestination(character varying, character varying, character varying, character varying, numeric) OWNER TO postgres;

--
-- Name: fu_updateemployee(character varying, character varying, character varying, character varying, character varying, character varying, character); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updateemployee(character varying, character varying, character varying, character varying, character varying, character varying, character) RETURNS void
    LANGUAGE sql
    AS $_$
update program.ta_employee
set
name=$2,
email=$3,
telegramid=$4,
deptid=$5,
postid=$6,
grade=$7
where nik=$1;
$_$;


ALTER FUNCTION program.fu_updateemployee(character varying, character varying, character varying, character varying, character varying, character varying, character) OWNER TO postgres;

--
-- Name: fu_updateposition(character varying, character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updateposition(character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
update program.ta_position
set
postname=$2
where postid=$1;
$_$;


ALTER FUNCTION program.fu_updateposition(character varying, character varying) OWNER TO postgres;

--
-- Name: fu_updatetimecost(integer, character varying, integer, numeric); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updatetimecost(integer, character varying, integer, numeric) RETURNS void
    LANGUAGE sql
    AS $_$
update program.ta_timecost_system
set
name=$2,
time=$3,
value=$4
where id=$1;
$_$;


ALTER FUNCTION program.fu_updatetimecost(integer, character varying, integer, numeric) OWNER TO postgres;

--
-- Name: fu_updatetips(integer, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updatetips(integer, character varying, character varying, character varying, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
update program.ta_tipsandtrick
set
category=$2,
country=$3,
city=$4,
title=$5,
article=$6
where id=$1;
$_$;


ALTER FUNCTION program.fu_updatetips(integer, character varying, character varying, character varying, character varying, character varying) OWNER TO postgres;

--
-- Name: fu_updateuser(character varying, character varying, ty_level, ty_status); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_updateuser(character varying, character varying, ty_level, ty_status) RETURNS void
    LANGUAGE sql
    AS $_$
update program.ta_user
set
password=$2,
level=$3,
status=$4
where nik=$1;
$_$;


ALTER FUNCTION program.fu_updateuser(character varying, character varying, ty_level, ty_status) OWNER TO postgres;

--
-- Name: fu_view_basic_rate(); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_view_basic_rate() RETURNS TABLE(base character varying, freq integer, home character varying, id character varying[], val numeric[], receipt character varying)
    LANGUAGE plpgsql
    AS $$
declare 
x record ; bs_rate varchar; bs_freq int; bs_home int ; bs_receipt varchar;
count_distinct int ; vlue numeric ; array_vlue numeric[];  id_ac varchar; array_id_ac varchar[];
loop_id int; loop_value int; declare 

begin
loop_id :=0;
for x in (select distinct(basic_rate) from program.ta_basic_rate) loop
array_vlue := array [] :: numeric[];  array_id_ac:= array[] :: varchar[]; 
select distinct (program.ta_basic_rate.basic_rate) into bs_rate from program.ta_basic_rate offset loop_id limit 1;
select distinct (program.ta_basic_rate.frequency) into bs_freq from program.ta_basic_rate where basic_rate= bs_rate;
select distinct (program.ta_basic_rate.homebase) into bs_home from program.ta_basic_rate where basic_rate= bs_rate;
select distinct (program.ta_basic_rate.receipt) into bs_receipt from program.ta_basic_rate where basic_rate= bs_rate;

select count(*) into count_distinct from program.ta_basic_rate where basic_rate=bs_rate;
loop_value := 0;
for i in 1 .. count_distinct loop
select value into vlue from program.ta_basic_rate where basic_rate=bs_rate offset loop_value limit 1 ;
select id_area_code into id_ac from program.ta_basic_rate where basic_rate=bs_rate offset loop_value limit 1 ;
loop_value = loop_value + 1 ;
array_vlue = array_vlue || array [vlue];
array_id_ac = array_id_ac || array [id_ac];
end loop;
loop_id = loop_id + 1;

base := bs_rate ;
freq := bs_freq ;
home := bs_home ;
 id := array_id_ac;
val := array_vlue ; 
receipt := bs_receipt;
return next;
end loop;


end 
$$;


ALTER FUNCTION program.fu_view_basic_rate() OWNER TO postgres;

--
-- Name: fu_view_basic_rate_hotel(); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_view_basic_rate_hotel() RETURNS TABLE(base character varying, freq integer, home character varying, area_code character varying[], val numeric[], min integer, max integer)
    LANGUAGE plpgsql
    AS $$
declare 
x record ; bs_rate varchar; bs_freq int; bs_home int ; bs_min int;bs_max int;
count_distinct int ; vlue numeric ; array_vlue numeric[];  id_ac varchar; array_id_ac varchar[];
loop_id int; loop_value int; id int; 

begin
loop_id :=0;
for x in (select distinct(basic_rate) from program.ta_basic_rate_hotel) loop
array_vlue := array [] :: numeric[];  array_id_ac:= array[] :: varchar[];
select distinct (program.ta_basic_rate_hotel.basic_rate) into bs_rate from program.ta_basic_rate_hotel offset loop_id limit 1;
select distinct (program.ta_basic_rate_hotel.frequency) into bs_freq from program.ta_basic_rate_hotel where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_hotel.homebase) into bs_home from program.ta_basic_rate_hotel where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_hotel.min) into bs_min from program.ta_basic_rate_hotel where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_hotel.max) into bs_max from program.ta_basic_rate_hotel where basic_rate= bs_rate;


select count(*) into count_distinct from program.ta_basic_rate_hotel where basic_rate=bs_rate;
loop_value := 0;
for i in 1 .. count_distinct loop
select value into vlue from program.ta_basic_rate_hotel where basic_rate=bs_rate offset loop_value limit 1 ;
select id_area_code into id_ac from program.ta_basic_rate_hotel where basic_rate=bs_rate offset loop_value limit 1 ;
loop_value = loop_value + 1 ;
array_vlue = array_vlue || array [vlue];
array_id_ac = array_id_ac || array [id_ac];
end loop;
loop_id = loop_id + 1;

base := bs_rate ;
freq := bs_freq ;
home := bs_home ;
 area_code := array_id_ac;
val := array_vlue ; 
min := bs_min;
max := bs_max;
return next;
end loop;


end 
$$;


ALTER FUNCTION program.fu_view_basic_rate_hotel() OWNER TO postgres;

--
-- Name: fu_view_basic_rate_hotel_id(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_view_basic_rate_hotel_id(name character varying) RETURNS TABLE(base character varying, freq integer, home character varying, area_code character varying[], val numeric[], min integer, max integer)
    LANGUAGE plpgsql
    AS $$
declare 
x record ; bs_rate varchar; bs_freq int; bs_home int ; bs_receipt varchar;
count_distinct int ; vlue numeric ; array_vlue numeric[];  id_ac varchar; array_id_ac varchar[];
loop_id int; loop_value int; id int; bs_min int; bs_max int;

begin
loop_id :=0;
for x in (select distinct(basic_rate) from program.ta_basic_rate_hotel where basic_rate=name) loop
array_vlue := array [] :: numeric[];  array_id_ac:= array[] :: varchar[];
select distinct (program.ta_basic_rate_hotel.basic_rate) into bs_rate from program.ta_basic_rate_hotel where basic_rate=name offset loop_id limit 1;
select distinct (program.ta_basic_rate_hotel.frequency) into bs_freq from program.ta_basic_rate_hotel where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_hotel.homebase) into bs_home from program.ta_basic_rate_hotel where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_hotel.min) into bs_min from program.ta_basic_rate_hotel where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_hotel.max) into bs_max from program.ta_basic_rate_hotel where basic_rate= bs_rate;

select count(*) into count_distinct from program.ta_basic_rate_hotel where basic_rate=bs_rate;
loop_value := 0;
for i in 1 .. count_distinct loop
select value into vlue from program.ta_basic_rate_hotel where basic_rate=bs_rate offset loop_value limit 1 ;
select id_area_code into id_ac from program.ta_basic_rate_hotel where basic_rate=bs_rate offset loop_value limit 1 ;
loop_value = loop_value + 1 ;
array_vlue = array_vlue || array [vlue];
array_id_ac = array_id_ac || array [id_ac];
end loop;
loop_id = loop_id + 1;

base := bs_rate ;
freq := bs_freq ;
home := bs_home ;
 area_code := array_id_ac;
val := array_vlue ; 
min := bs_min;
max := bs_max;
return next;
end loop;


end 
$$;


ALTER FUNCTION program.fu_view_basic_rate_hotel_id(name character varying) OWNER TO postgres;

--
-- Name: fu_view_basic_rate_id(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_view_basic_rate_id(name character varying) RETURNS TABLE(base character varying, freq integer, home character varying, area_code character varying[], val numeric[], receipt character varying)
    LANGUAGE plpgsql
    AS $$
declare 
x record ; bs_rate varchar; bs_freq int; bs_home int ; bs_receipt varchar;
count_distinct int ; vlue numeric ; array_vlue numeric[];  id_ac varchar; array_id_ac varchar[];
loop_id int; loop_value int; id int; 

begin
loop_id :=0;
for x in (select distinct(basic_rate) from program.ta_basic_rate where basic_rate=name) loop
array_vlue := array [] :: numeric[];  array_id_ac:= array[] :: varchar[];
select distinct (program.ta_basic_rate.basic_rate) into bs_rate from program.ta_basic_rate where basic_rate=name offset loop_id limit 1;
select distinct (program.ta_basic_rate.frequency) into bs_freq from program.ta_basic_rate where basic_rate= bs_rate;
select distinct (program.ta_basic_rate.homebase) into bs_home from program.ta_basic_rate where basic_rate= bs_rate;
select distinct (program.ta_basic_rate.receipt) into bs_receipt from program.ta_basic_rate where basic_rate= bs_rate;

select count(*) into count_distinct from program.ta_basic_rate where basic_rate=bs_rate;
loop_value := 0;
for i in 1 .. count_distinct loop
select value into vlue from program.ta_basic_rate where basic_rate=bs_rate offset loop_value limit 1 ;
select id_area_code into id_ac from program.ta_basic_rate where basic_rate=bs_rate offset loop_value limit 1 ;
loop_value = loop_value + 1 ;
array_vlue = array_vlue || array [vlue];
array_id_ac = array_id_ac || array [id_ac];
end loop;
loop_id = loop_id + 1;

base := bs_rate ;
freq := bs_freq ;
home := bs_home ;
 area_code := array_id_ac;
val := array_vlue ; 
receipt := bs_receipt;
return next;
end loop;


end 
$$;


ALTER FUNCTION program.fu_view_basic_rate_id(name character varying) OWNER TO postgres;

--
-- Name: fu_view_basic_rate_pocket(); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_view_basic_rate_pocket() RETURNS TABLE(base character varying, freq integer, home character varying, area_code character varying[], val numeric[], min integer, max integer)
    LANGUAGE plpgsql
    AS $$
declare 
x record ; bs_rate varchar; bs_freq int; bs_home int ; bs_min int;bs_max int;
count_distinct int ; vlue numeric ; array_vlue numeric[];  id_ac varchar; array_id_ac varchar[];
loop_id int; loop_value int; id int; 

begin
loop_id :=0;
for x in (select distinct(basic_rate) from program.ta_basic_rate_pocket_allowance) loop
array_vlue := array [] :: numeric[];  array_id_ac:= array[] :: varchar[];
select distinct (program.ta_basic_rate_pocket_allowance.basic_rate) into bs_rate from program.ta_basic_rate_pocket_allowance offset loop_id limit 1;
select distinct (program.ta_basic_rate_pocket_allowance.frequency) into bs_freq from program.ta_basic_rate_pocket_allowance where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_pocket_allowance.homebase) into bs_home from program.ta_basic_rate_pocket_allowance where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_pocket_allowance.min) into bs_min from program.ta_basic_rate_pocket_allowance where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_pocket_allowance.max) into bs_max from program.ta_basic_rate_pocket_allowance where basic_rate= bs_rate;


select count(*) into count_distinct from program.ta_basic_rate_pocket_allowance where basic_rate=bs_rate;
loop_value := 0;
for i in 1 .. count_distinct loop
select value into vlue from program.ta_basic_rate_pocket_allowance where basic_rate=bs_rate offset loop_value limit 1 ;
select id_area_code into id_ac from program.ta_basic_rate_pocket_allowance where basic_rate=bs_rate offset loop_value limit 1 ;
loop_value = loop_value + 1 ;
array_vlue = array_vlue || array [vlue];
array_id_ac = array_id_ac || array [id_ac];
end loop;
loop_id = loop_id + 1;

base := bs_rate ;
freq := bs_freq ;
home := bs_home ;
 area_code := array_id_ac;
val := array_vlue ; 
min := bs_min;
max := bs_max;
return next;
end loop;


end 
$$;


ALTER FUNCTION program.fu_view_basic_rate_pocket() OWNER TO postgres;

--
-- Name: fu_view_basic_rate_pocket_id(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_view_basic_rate_pocket_id(name character varying) RETURNS TABLE(base character varying, freq integer, home character varying, area_code character varying[], val numeric[], min integer, max integer)
    LANGUAGE plpgsql
    AS $$
declare 
x record ; bs_rate varchar; bs_freq int; bs_home int ; bs_receipt varchar;
count_distinct int ; vlue numeric ; array_vlue numeric[];  id_ac varchar; array_id_ac varchar[];
loop_id int; loop_value int; id int; bs_min int; bs_max int;

begin
loop_id :=0;
for x in (select distinct(basic_rate) from program.ta_basic_rate_pocket_allowance where basic_rate=name) loop
array_vlue := array [] :: numeric[];  array_id_ac:= array[] :: varchar[];
select distinct (program.ta_basic_rate_pocket_allowance.basic_rate) into bs_rate from program.ta_basic_rate_pocket_allowance where basic_rate=name offset loop_id limit 1;
select distinct (program.ta_basic_rate_pocket_allowance.frequency) into bs_freq from program.ta_basic_rate_pocket_allowance where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_pocket_allowance.homebase) into bs_home from program.ta_basic_rate_pocket_allowance where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_pocket_allowance.min) into bs_min from program.ta_basic_rate_pocket_allowance where basic_rate= bs_rate;
select distinct (program.ta_basic_rate_pocket_allowance.max) into bs_max from program.ta_basic_rate_pocket_allowance where basic_rate= bs_rate;

select count(*) into count_distinct from program.ta_basic_rate_pocket_allowance where basic_rate=bs_rate;
loop_value := 0;
for i in 1 .. count_distinct loop
select value into vlue from program.ta_basic_rate_pocket_allowance where basic_rate=bs_rate offset loop_value limit 1 ;
select id_area_code into id_ac from program.ta_basic_rate_pocket_allowance where basic_rate=bs_rate offset loop_value limit 1 ;
loop_value = loop_value + 1 ;
array_vlue = array_vlue || array [vlue];
array_id_ac = array_id_ac || array [id_ac];
end loop;
loop_id = loop_id + 1;

base := bs_rate ;
freq := bs_freq ;
home := bs_home ;
 area_code := array_id_ac;
val := array_vlue ; 
min := bs_min;
max := bs_max;
return next;
end loop;


end 
$$;


ALTER FUNCTION program.fu_view_basic_rate_pocket_id(name character varying) OWNER TO postgres;

--
-- Name: ta_approval; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_approval (
    reqnik character varying(30) NOT NULL,
    approval1 character varying(30),
    approval2 character varying(30),
    approval3 character varying(30),
    approval4 character varying(30),
    requeststatus ty_autoapprov
);


ALTER TABLE ta_approval OWNER TO postgres;

--
-- Name: ta_employee; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_employee (
    nik character varying(30) NOT NULL,
    name character varying(50) NOT NULL,
    email character varying(35),
    telegramid character varying(25) NOT NULL,
    deptid character varying(30) NOT NULL,
    postid character varying(30) NOT NULL,
    grade character(4) NOT NULL,
    token character(10),
    joindate date
);


ALTER TABLE ta_employee OWNER TO postgres;

--
-- Name: vi_approvalname; Type: VIEW; Schema: program; Owner: postgres
--

CREATE VIEW vi_approvalname AS
 SELECT a.reqnik,
    ( SELECT ta_employee.name
           FROM ta_employee
          WHERE ((a.reqnik)::text = (ta_employee.nik)::text)) AS name,
    a.approval1,
    ( SELECT ta_employee.name
           FROM ta_employee
          WHERE ((a.approval1)::text = (ta_employee.nik)::text)) AS name1,
    a.approval2,
    ( SELECT ta_employee.name
           FROM ta_employee
          WHERE ((a.approval2)::text = (ta_employee.nik)::text)) AS name2,
    a.approval3,
    ( SELECT ta_employee.name
           FROM ta_employee
          WHERE ((a.approval3)::text = (ta_employee.nik)::text)) AS name3,
    a.approval4,
    ( SELECT ta_employee.name
           FROM ta_employee
          WHERE ((a.approval4)::text = (ta_employee.nik)::text)) AS name4,
    a.requeststatus
   FROM ta_approval a;


ALTER TABLE vi_approvalname OWNER TO postgres;

--
-- Name: fu_viewapprovalnik(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewapprovalnik(character varying) RETURNS SETOF vi_approvalname
    LANGUAGE plpgsql
    AS $_$
declare 
reqnik alias for $1;
a program.vi_approvalname;
begin
for a in execute 'SELECT * FROM program.vi_approvalname where reqnik='''||$1||'''' order by reqnik loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewapprovalnik(character varying) OWNER TO postgres;

--
-- Name: ta_area_code; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_area_code (
    id integer NOT NULL,
    area_code character varying(20) NOT NULL,
    name character varying(30)
);


ALTER TABLE ta_area_code OWNER TO postgres;

--
-- Name: fu_viewareacode(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewareacode(character varying) RETURNS SETOF ta_area_code
    LANGUAGE plpgsql
    AS $_$
declare 
area_code alias for $1;
a program.ta_area_code;
begin
for a in execute 'SELECT * FROM program.ta_area_code where area_code='''||$1||'''' order by area_code loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewareacode(character varying) OWNER TO postgres;

--
-- Name: ta_config_system; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_config_system (
    id integer,
    name character varying(30),
    value numeric(10,2)
);


ALTER TABLE ta_config_system OWNER TO postgres;

--
-- Name: fu_viewconfig(integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewconfig(integer) RETURNS SETOF ta_config_system
    LANGUAGE plpgsql
    AS $_$
declare 
id alias for $1;
a program.ta_config_system;
begin
for a in execute 'SELECT * FROM program.ta_config_system where id='''||$1||'''' order by id loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewconfig(integer) OWNER TO postgres;

--
-- Name: ta_department; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_department (
    deptid character varying(30) NOT NULL,
    deptname character varying(30) NOT NULL
);


ALTER TABLE ta_department OWNER TO postgres;

--
-- Name: fu_viewdeptid(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewdeptid(character varying) RETURNS SETOF ta_department
    LANGUAGE plpgsql
    AS $_$
declare 
deptid alias for $1;
a program.ta_department;
begin
for a in execute 'SELECT * FROM program.ta_department where deptid='''||$1||'''' order by deptid loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewdeptid(character varying) OWNER TO postgres;

--
-- Name: ta_destination; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_destination (
    code character varying(30) NOT NULL,
    name_destination character varying(30),
    area_code character varying(30),
    currency character varying(30),
    constant numeric(10,2)
);


ALTER TABLE ta_destination OWNER TO postgres;

--
-- Name: vi_destination; Type: VIEW; Schema: program; Owner: postgres
--

CREATE VIEW vi_destination AS
 SELECT a.code,
    a.name_destination,
    b.area_code,
    b.name,
    a.currency,
    a.constant
   FROM ta_destination a,
    ta_area_code b
  WHERE ((a.area_code)::text = (b.area_code)::text);


ALTER TABLE vi_destination OWNER TO postgres;

--
-- Name: fu_viewdestinationcode(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewdestinationcode(character varying) RETURNS SETOF vi_destination
    LANGUAGE plpgsql
    AS $_$
declare 
code alias for $1;
a program.vi_destination;
begin
for a in execute 'SELECT * FROM program.vi_destination where code='''||$1||'''' order by code loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewdestinationcode(character varying) OWNER TO postgres;

--
-- Name: ta_position; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_position (
    postid character varying(30) NOT NULL,
    postname character varying(30) NOT NULL
);


ALTER TABLE ta_position OWNER TO postgres;

--
-- Name: vi_employee; Type: VIEW; Schema: program; Owner: postgres
--

CREATE VIEW vi_employee AS
 SELECT a.nik,
    a.name,
    a.email,
    a.telegramid,
    b.deptid,
    b.deptname,
    c.postid,
    c.postname,
    a.grade
   FROM ta_employee a,
    ta_department b,
    ta_position c
  WHERE (((a.deptid)::bpchar = (b.deptid)::bpchar) AND ((a.postid)::bpchar = (c.postid)::bpchar));


ALTER TABLE vi_employee OWNER TO postgres;

--
-- Name: fu_viewemployeenik(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewemployeenik(character varying) RETURNS SETOF vi_employee
    LANGUAGE plpgsql
    AS $_$
declare 
nik alias for $1;
a program.vi_employee;
begin
for a in execute 'SELECT * FROM program.vi_employee where nik='''||$1||'''' order by nik loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewemployeenik(character varying) OWNER TO postgres;

--
-- Name: fu_viewpositionid(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewpositionid(character varying) RETURNS SETOF ta_position
    LANGUAGE plpgsql
    AS $_$
declare 
postid alias for $1;
a program.ta_position;
begin
for a in execute 'SELECT * FROM program.ta_position where postid='''||$1||'''' order by postid loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewpositionid(character varying) OWNER TO postgres;

--
-- Name: ta_request; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_request (
    id integer NOT NULL,
    reqid character varying(50) NOT NULL,
    reqnik character varying(50) NOT NULL,
    travelnik character varying(50)[],
    loctdept character varying(50)[],
    loctdeptfrom character varying(50)[],
    loctdeptto character varying(50)[],
    timedeptpertrip integer[],
    costdept numeric[],
    currencydept character varying(50)[],
    transportdept character varying(50)[],
    datedept date,
    loctarrive character varying(50)[],
    loctarrivefrom character varying(50)[],
    loctarriveto character varying(50)[],
    timearrivepertrip integer[],
    costarrive numeric[],
    currencyarrive character varying(50)[],
    transportarrive character varying(50)[],
    datearrive date,
    transports character varying(50)[],
    totaltransport text,
    totaltime integer,
    totalday integer,
    othercost numeric,
    trainingcost numeric,
    reqtime timestamp with time zone,
    totalcost numeric[],
    totalcurrency character varying[],
    approvenik character varying(30),
    timeapprove timestamp with time zone,
    caption text,
    statusreq ty_reqstatus DEFAULT 'Pending'::ty_reqstatus,
    rute character varying(20)
);


ALTER TABLE ta_request OWNER TO postgres;

--
-- Name: fu_viewrequestid(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewrequestid(character varying) RETURNS SETOF ta_request
    LANGUAGE plpgsql
    AS $_$
declare 
reqid alias for $1;
a program.ta_request;
begin
for a in execute 'SELECT * FROM program.ta_request where reqid='''||$1||'''' order by reqid loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewrequestid(character varying) OWNER TO postgres;

--
-- Name: ta_timecost_system; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_timecost_system (
    id integer NOT NULL,
    name character varying(20),
    "time" integer,
    value numeric
);


ALTER TABLE ta_timecost_system OWNER TO postgres;

--
-- Name: fu_viewtimecost(integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewtimecost(integer) RETURNS SETOF ta_timecost_system
    LANGUAGE plpgsql
    AS $_$
declare 
id alias for $1;
a program.ta_timecost_system;
begin
for a in execute 'SELECT * FROM program.ta_timecost_system where id='''||$1||'''' order by id loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewtimecost(integer) OWNER TO postgres;

--
-- Name: fu_viewtipsid(integer); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewtipsid(integer) RETURNS SETOF ta_tipsandtrick
    LANGUAGE plpgsql
    AS $_$
declare 
id alias for $1;
a program.ta_tipsandtrick;
begin
for a in execute 'SELECT * FROM program.ta_tipsandtrick where id='''||$1||'''' order by id loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewtipsid(integer) OWNER TO postgres;

--
-- Name: fu_viewusernik(character varying); Type: FUNCTION; Schema: program; Owner: postgres
--

CREATE FUNCTION fu_viewusernik(character varying) RETURNS SETOF ta_user
    LANGUAGE plpgsql
    AS $_$
declare 
nik alias for $1;
a program.ta_user;
begin
for a in execute 'SELECT * FROM program.ta_user where nik='''||$1||'''' order by nik loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION program.fu_viewusernik(character varying) OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: fu_getestimasi(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_getestimasi(character varying, integer, integer) RETURNS SETOF numeric[]
    LANGUAGE plpgsql
    AS $_$
declare 
hasil numeric[] ;
a varchar ;
b int ;
c int ;
begin
a = $1 ;
b = $2 ;
c = $3 ;
for hasil in execute 'select (array[allowanceson,allowance,meal,transport,phone,laundry,airporttax,seaporttax,allowanceovernight]) 
as get_estimasi from ta_konfig where idlokasi='''||a||''' and '||b||'>=minimaltingkat and '||b||'<=maksimaltingkat and hari='||c||'' loop
return next hasil;
end loop;
return;
end
$_$;


ALTER FUNCTION public.fu_getestimasi(character varying, integer, integer) OWNER TO postgres;

--
-- Name: fu_hitungelement(text[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_hitungelement(text[]) RETURNS text
    LANGUAGE sql
    AS $_$
SELECT string_agg(i || ':' || c, '  ' ) FROM (SELECT i, COUNT(*) c FROM (SELECT unnest($1::text[]) i) i GROUP BY i ORDER BY c DESC) foo;
$_$;


ALTER FUNCTION public.fu_hitungelement(text[]) OWNER TO postgres;

--
-- Name: ta_departemen; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_departemen (
    iddepartemen character(15) NOT NULL,
    namadepartemen character varying(20)
);


ALTER TABLE ta_departemen OWNER TO postgres;

--
-- Name: fu_lihatdepartemen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatdepartemen() RETURNS SETOF ta_departemen
    LANGUAGE sql
    AS $$
    SELECT * FROM ta_departemen;
$$;


ALTER FUNCTION public.fu_lihatdepartemen() OWNER TO postgres;

--
-- Name: fu_lihatdepartemenid(character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatdepartemenid(iddepartemen character) RETURNS SETOF ta_departemen
    LANGUAGE sql
    AS $_$
    SELECT * FROM ta_departemen WHERE iddepartemen = $1;
$_$;


ALTER FUNCTION public.fu_lihatdepartemenid(iddepartemen character) OWNER TO postgres;

--
-- Name: ta_jabatan; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_jabatan (
    idjabatan character(15) NOT NULL,
    namajabatan character varying(20)
);


ALTER TABLE ta_jabatan OWNER TO postgres;

--
-- Name: fu_lihatjabatan(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatjabatan() RETURNS SETOF ta_jabatan
    LANGUAGE sql
    AS $$
    SELECT * FROM ta_jabatan;
$$;


ALTER FUNCTION public.fu_lihatjabatan() OWNER TO postgres;

--
-- Name: fu_lihatjabatanid(character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatjabatanid(idjabatan character) RETURNS SETOF ta_jabatan
    LANGUAGE sql
    AS $_$
    SELECT * FROM ta_jabatan WHERE idjabatan = $1;
$_$;


ALTER FUNCTION public.fu_lihatjabatanid(idjabatan character) OWNER TO postgres;

--
-- Name: ta_karyawan; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_karyawan (
    nik character varying(20) NOT NULL,
    nama character varying,
    email character varying(50),
    idtelegram character(15),
    iddepartemen character varying(20),
    idjabatan character varying(20),
    token character varying(35),
    tingkat integer
);


ALTER TABLE ta_karyawan OWNER TO postgres;

--
-- Name: fu_lihatkaryawan(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatkaryawan() RETURNS SETOF ta_karyawan
    LANGUAGE sql
    AS $$
    SELECT * FROM ta_karyawan;
$$;


ALTER FUNCTION public.fu_lihatkaryawan() OWNER TO postgres;

--
-- Name: vi_karyawan; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vi_karyawan AS
 SELECT a.nik,
    a.nama,
    a.email,
    a.idtelegram,
    b.iddepartemen,
    b.namadepartemen,
    c.idjabatan,
    c.namajabatan,
    a.tingkat
   FROM ta_karyawan a,
    ta_departemen b,
    ta_jabatan c
  WHERE (((a.iddepartemen)::bpchar = b.iddepartemen) AND ((a.idjabatan)::bpchar = c.idjabatan));


ALTER TABLE vi_karyawan OWNER TO postgres;

--
-- Name: fu_lihatkaryawannik(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatkaryawannik(character varying) RETURNS SETOF vi_karyawan
    LANGUAGE plpgsql
    AS $_$
declare 
nik alias for $1;
a vi_karyawan;
begin
for a in execute 'SELECT * FROM vi_karyawan where nik='''||$1||'''' order by nik loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION public.fu_lihatkaryawannik(character varying) OWNER TO postgres;

--
-- Name: ta_kodelokasi; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_kodelokasi (
    idlokasi character varying(40) NOT NULL,
    namalokasi character varying(40),
    matauang ty_kodelokasi
);


ALTER TABLE ta_kodelokasi OWNER TO postgres;

--
-- Name: ta_kota; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_kota (
    idkota character varying(20) NOT NULL,
    namakota character varying(20),
    namanegara character varying(20),
    kodelokasi character varying
);


ALTER TABLE ta_kota OWNER TO postgres;

--
-- Name: vi_kodelokasi; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vi_kodelokasi AS
 SELECT a.idkota,
    a.namakota,
    a.namanegara,
    a.kodelokasi,
    b.idlokasi,
    b.namalokasi
   FROM ta_kota a,
    ta_kodelokasi b
  WHERE ((a.kodelokasi)::bpchar = (b.idlokasi)::bpchar);


ALTER TABLE vi_kodelokasi OWNER TO postgres;

--
-- Name: fu_lihatkodelokasiid(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatkodelokasiid(character varying) RETURNS SETOF vi_kodelokasi
    LANGUAGE plpgsql
    AS $_$
declare 
idkota alias for $1;
a vi_kodelokasi;
begin
for a in execute 'SELECT * FROM vi_kodelokasi where idkota='''||$1||''' order by idkota' loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION public.fu_lihatkodelokasiid(character varying) OWNER TO postgres;

--
-- Name: fu_lihatkota(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatkota() RETURNS SETOF ta_kota
    LANGUAGE sql
    AS $$
    SELECT * FROM ta_kota;
$$;


ALTER FUNCTION public.fu_lihatkota() OWNER TO postgres;

--
-- Name: vi_kota; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vi_kota AS
 SELECT a.idkota,
    a.namakota,
    a.namanegara,
    a.kodelokasi,
    b.namalokasi
   FROM ta_kota a,
    ta_kodelokasi b
  WHERE ((a.kodelokasi)::bpchar = (b.idlokasi)::bpchar);


ALTER TABLE vi_kota OWNER TO postgres;

--
-- Name: fu_lihatkotaid(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatkotaid(character varying) RETURNS vi_kota
    LANGUAGE plpgsql
    AS $_$
declare 
idkota alias for $1;
a vi_kota;
begin
for a in execute 'SELECT * FROM vi_kota where idkota='''||$1||'''' order by idkota loop
return a;
end loop;
end
$_$;


ALTER FUNCTION public.fu_lihatkotaid(character varying) OWNER TO postgres;

--
-- Name: ta_lokasi; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_lokasi (
    idlokasi character varying(20) NOT NULL,
    namatempat character varying(50)
);


ALTER TABLE ta_lokasi OWNER TO postgres;

--
-- Name: fu_lihatlokasi(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatlokasi() RETURNS SETOF ta_lokasi
    LANGUAGE sql
    AS $$
    SELECT * FROM ta_lokasi;
$$;


ALTER FUNCTION public.fu_lihatlokasi() OWNER TO postgres;

--
-- Name: fu_lihatlokasiid(character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatlokasiid(idlokasi character) RETURNS SETOF ta_lokasi
    LANGUAGE sql
    AS $_$
    SELECT * FROM ta_lokasi WHERE idlokasi = $1;
$_$;


ALTER FUNCTION public.fu_lihatlokasiid(idlokasi character) OWNER TO postgres;

--
-- Name: ta_matauang; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_matauang (
    idmatauang character varying(20) NOT NULL,
    namamatauang character(16) NOT NULL,
    simbolmatauang character(6) NOT NULL
);


ALTER TABLE ta_matauang OWNER TO postgres;

--
-- Name: fu_lihatmatauangid(character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatmatauangid(idmatauang character) RETURNS SETOF ta_matauang
    LANGUAGE sql
    AS $_$
    SELECT * FROM ta_matauang WHERE idmatauang = $1;
$_$;


ALTER FUNCTION public.fu_lihatmatauangid(idmatauang character) OWNER TO postgres;

--
-- Name: ta_pengguna; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_pengguna (
    nik character varying(20) NOT NULL,
    katasandi character varying(20) NOT NULL,
    level ty_level NOT NULL,
    status ty_status NOT NULL
);


ALTER TABLE ta_pengguna OWNER TO postgres;

--
-- Name: fu_lihatpenggunanik(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatpenggunanik(nik character varying) RETURNS SETOF ta_pengguna
    LANGUAGE sql
    AS $_$
    SELECT * FROM ta_pengguna WHERE nik = $1;
$_$;


ALTER FUNCTION public.fu_lihatpenggunanik(nik character varying) OWNER TO postgres;

--
-- Name: ta_permintaanpergipulang; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_permintaanpergipulang (
    idpermintaan character varying(50) NOT NULL,
    nikpengaju character varying(50),
    nikpejalan character varying(50)[],
    lokasipergi character varying(50)[],
    lokasipertrippergifrom character varying(50)[],
    lokasipertrippergito character varying(50)[],
    waktupertrippergi integer[],
    biayapertrippergiidr numeric[],
    biayapertrippergisgd numeric[],
    biayapertrippergiusd numeric[],
    biayapertrippergieur numeric[],
    matauangpergi character varying(50)[],
    kendaraanpertrippergi character varying(50)[],
    tanggalpergi date,
    lokasipulang character varying(50)[],
    lokasipertrippulangfrom character varying(50)[],
    lokasipertrippulangto character varying(50)[],
    waktupertrippulang integer[],
    biayapertrippulangidr numeric[],
    biayapertrippulangsgd numeric[],
    biayapertrippulangusd numeric[],
    biayapertrippulangeur numeric[],
    matauangpulang character varying(50)[],
    kendaraanpertrippulang character varying(50)[],
    tanggalpulang date,
    kendaraanpertrippergipulang character varying(50)[],
    jumlahkendaraanpertrippergipulang text,
    totalwaktupergipulang integer,
    totalhari integer,
    waktupermintaan timestamp with time zone,
    namarute character varying
);


ALTER TABLE ta_permintaanpergipulang OWNER TO postgres;

--
-- Name: fu_lihatpermintaanpergipulang(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatpermintaanpergipulang() RETURNS SETOF ta_permintaanpergipulang
    LANGUAGE sql
    AS $$
    SELECT * FROM ta_permintaanpergipulang;
$$;


ALTER FUNCTION public.fu_lihatpermintaanpergipulang() OWNER TO postgres;

--
-- Name: ta_persetujuan; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_persetujuan (
    nikpeminta character varying NOT NULL,
    nikpenerima1 character varying DEFAULT '-'::character varying,
    nikpenerima2 character varying(20) DEFAULT '-'::character varying,
    nikpenerima3 character varying(20) DEFAULT '-'::character varying,
    nikpenerima4 character varying(20) DEFAULT '-'::character varying,
    statuspersetujuan ty_otomatisterima NOT NULL
);


ALTER TABLE ta_persetujuan OWNER TO postgres;

--
-- Name: fu_lihatpersetujuannik(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatpersetujuannik(nikpeminta character varying) RETURNS SETOF ta_persetujuan
    LANGUAGE sql
    AS $_$
    SELECT * FROM ta_persetujuan WHERE nikpeminta = $1;
$_$;


ALTER FUNCTION public.fu_lihatpersetujuannik(nikpeminta character varying) OWNER TO postgres;

--
-- Name: vi_persetujuannama; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vi_persetujuannama AS
 SELECT a.nikpeminta,
    ( SELECT ta_karyawan.nama
           FROM ta_karyawan
          WHERE ((a.nikpeminta)::text = (ta_karyawan.nik)::text)) AS nama,
    a.nikpenerima1,
    ( SELECT ta_karyawan.nama
           FROM ta_karyawan
          WHERE ((a.nikpenerima1)::text = (ta_karyawan.nik)::text)) AS nama1,
    a.nikpenerima2,
    ( SELECT ta_karyawan.nama
           FROM ta_karyawan
          WHERE ((a.nikpenerima2)::text = (ta_karyawan.nik)::text)) AS nama2,
    a.nikpenerima3,
    ( SELECT ta_karyawan.nama
           FROM ta_karyawan
          WHERE ((a.nikpenerima3)::text = (ta_karyawan.nik)::text)) AS nama3,
    a.nikpenerima4,
    ( SELECT ta_karyawan.nama
           FROM ta_karyawan
          WHERE ((a.nikpenerima4)::text = (ta_karyawan.nik)::text)) AS nama4,
    a.statuspersetujuan
   FROM ta_persetujuan a;


ALTER TABLE vi_persetujuannama OWNER TO postgres;

--
-- Name: fu_lihatpersetujuanniknama(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_lihatpersetujuanniknama(character varying) RETURNS SETOF vi_persetujuannama
    LANGUAGE plpgsql
    AS $_$
declare 
nikpeminta alias for $1;
a vi_persetujuannama;
begin
for a in execute 'SELECT * FROM vi_persetujuannama where nikpeminta='''||$1||''' order by nikpeminta' loop
return next a;
end loop;
end
$_$;


ALTER FUNCTION public.fu_lihatpersetujuanniknama(character varying) OWNER TO postgres;

--
-- Name: fu_otomatisa(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisa() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from a;
total = jumlah + 1;
id:='a';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisa() OWNER TO postgres;

--
-- Name: fu_otomatisida(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisida() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from a;
total = jumlah + 1;
id:='TEST';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisida() OWNER TO postgres;

--
-- Name: fu_otomatisiddepartemen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisiddepartemen() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from ta_departemen;
total = jumlah + 1;
id:='DEP';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisiddepartemen() OWNER TO postgres;

--
-- Name: fu_otomatisidjabatan(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisidjabatan() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from ta_jabatan;
total = jumlah + 1;
id:='JBT';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisidjabatan() OWNER TO postgres;

--
-- Name: fu_otomatisidkode(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisidkode() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from ta_kodelokasi;
total = jumlah + 1;
id:='Loc';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisidkode() OWNER TO postgres;

--
-- Name: fu_otomatisidkonfig(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisidkonfig() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from ta_konfig;
total = jumlah + 1;
id:='konfig';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisidkonfig() OWNER TO postgres;

--
-- Name: fu_otomatisidkota(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisidkota() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from ta_kota;
total = jumlah + 1;
id:='kota';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisidkota() OWNER TO postgres;

--
-- Name: fu_otomatisidlokasi(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisidlokasi() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from ta_lokasi;
total = jumlah + 1;
id:='lok';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisidlokasi() OWNER TO postgres;

--
-- Name: fu_otomatisidmatauang(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisidmatauang() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from ta_matauang;
total = jumlah + 1;
id:='uang';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisidmatauang() OWNER TO postgres;

--
-- Name: fu_otomatisidpermintaan(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisidpermintaan() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from ta_permintaan ;
total = jumlah + 1;
id:='REQ';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisidpermintaan() OWNER TO postgres;

--
-- Name: fu_otomatisidpermintaanpergipulang(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_otomatisidpermintaanpergipulang() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = random()*99;
jumlah = count(*) from ta_permintaanpergipulang ;
total = jumlah + 1;
id:='REQ';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_otomatisidpermintaanpergipulang() OWNER TO postgres;

--
-- Name: fu_randomstring(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_randomstring(length integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
declare
  chars text[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';
  result text := '';
  i integer := 0;
begin
  if length < 0 then
    raise exception 'Given length cannot be less than 0';
  end if;
  for i in 1..length loop
    result := result || chars[1+random()*(array_length(chars, 1)-1)];
  end loop;
  return result;
end;
$$;


ALTER FUNCTION public.fu_randomstring(length integer) OWNER TO postgres;

--
-- Name: fu_tambahdepartemen(character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahdepartemen(character) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
id := fu_otomatisiddepartemen();
insert into ta_departemen values (id,$1);
end
$_$;


ALTER FUNCTION public.fu_tambahdepartemen(character) OWNER TO postgres;

--
-- Name: fu_tambahjabatan(character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahjabatan(character) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
id := fu_otomatisidjabatan();
insert into ta_jabatan values (id,$1);
end
$_$;


ALTER FUNCTION public.fu_tambahjabatan(character) OWNER TO postgres;

--
-- Name: fu_tambahkaryawan(character varying, character varying, character varying, character, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahkaryawan(character varying, character varying, character varying, character, character varying, character varying, integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
random varchar;
begin
random = fu_randomstring(8) ;
insert into ta_karyawan(nik,nama,email,idtelegram,iddepartemen,idjabatan,tingkat,token) values ($1,$2,$3,$4,$5,$6,$7,random) ;
end;
$_$;


ALTER FUNCTION public.fu_tambahkaryawan(character varying, character varying, character varying, character, character varying, character varying, integer) OWNER TO postgres;

--
-- Name: fu_tambahkodelokasi(character varying, ty_kodelokasi); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahkodelokasi(character varying, ty_kodelokasi) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
id := fu_otomatisidkode();
insert into ta_kodelokasi values (id,$1,$2);
end
$_$;


ALTER FUNCTION public.fu_tambahkodelokasi(character varying, ty_kodelokasi) OWNER TO postgres;

--
-- Name: fu_tambahkonfig(character varying, integer, integer, numeric[], integer, integer, integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahkonfig(character varying, integer, integer, numeric[], integer, integer, integer, integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
son1 numeric ;
son2 numeric ;
son3 numeric ;
total int ;
idkonfig1 int ;
idkonfig2 int ;
idkonfig3 int ;
begin
son1 = unnest ($4) offset 0 limit 1 ;
son2 = unnest ($4) offset 1 limit 1 ;
son3 = unnest ($4) offset 2 limit 1 ;
total = count (*) from ta_konfig;
idkonfig1 = total + 1 ;
idkonfig2 = idkonfig1 + 1 ;
idkonfig3 = idkonfig2 + 1 ;
insert into ta_konfig values (idkonfig1 ,$1,$2,$3,'1',son1,$5,$6,$7,$8,$9,$10,$11,$12);
insert into ta_konfig values (idkonfig2 ,$1,$2,$3,'2',son2,$5,$6,$7,$8,$9,$10,$11,$12);
insert into ta_konfig values (idkonfig3 ,$1,$2,$3,'3',son3,$5,$6,$7,$8,$9,$10,$11,$12);
end
$_$;


ALTER FUNCTION public.fu_tambahkonfig(character varying, integer, integer, numeric[], integer, integer, integer, integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- Name: fu_tambahlokasi(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahlokasi(character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
id := fu_otomatisidlokasi();
insert into ta_lokasi values (id,$1);
end
$_$;


ALTER FUNCTION public.fu_tambahlokasi(character varying) OWNER TO postgres;

--
-- Name: fu_tambahlokasi(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahlokasi(namatempat character varying, namakota character varying, namanegara character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
id := fu_otomatisidlokasi();
insert into ta_lokasi values (id,$1,$2,$3);
end
$_$;


ALTER FUNCTION public.fu_tambahlokasi(namatempat character varying, namakota character varying, namanegara character varying) OWNER TO postgres;

--
-- Name: fu_tambahmatauang(character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahmatauang(namamatauang character, simbolmatauang character) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
id := fu_otomatisidmatauang();
insert into ta_matauang values (id,$1,$2);
end
$_$;


ALTER FUNCTION public.fu_tambahmatauang(namamatauang character, simbolmatauang character) OWNER TO postgres;

--
-- Name: fu_tambahpengguna(character varying, character varying, ty_level, ty_status); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahpengguna(nik character varying, katasandi character varying, level ty_level, status ty_status) RETURNS SETOF ta_pengguna
    LANGUAGE plpgsql
    AS $_$
begin
insert into ta_pengguna(nik,katasandi,level,status) values($1,$2,$3,$4);
end;
$_$;


ALTER FUNCTION public.fu_tambahpengguna(nik character varying, katasandi character varying, level ty_level, status ty_status) OWNER TO postgres;

--
-- Name: fu_tambahpermintaanpergipulang(character varying, character varying[], character varying[], character varying[], character varying[], numeric[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date, character varying[], character varying[], character varying[], numeric[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahpermintaanpergipulang(character varying, character varying[], character varying[], character varying[], character varying[], numeric[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date, character varying[], character varying[], character varying[], numeric[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
kendaraan varchar[];
totalwaktupergi int;
totalwaktupulang int;
totalwaktupergipulang int ;
totalkendaraan text;
begin
id:=fu_otomatisidpermintaanpergipulang();
kendaraan = $12 || $23 ;
totalwaktupergi = fu_totalwaktutrip ($6);
totalwaktupulang = fu_totalwaktutrip ($17);
totalwaktupergipulang = totalwaktupergi + totalwaktupulang ;
totalkendaraan = fu_hitungelement(array_agg(kendaraan:: text[])) ;
insert into ta_permintaanpergipulang values (id,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,kendaraan,totalkendaraan,totalwaktupergipulang,fu_totalhari($13,$24),now()) ;
end;
$_$;


ALTER FUNCTION public.fu_tambahpermintaanpergipulang(character varying, character varying[], character varying[], character varying[], character varying[], numeric[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date, character varying[], character varying[], character varying[], numeric[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date) OWNER TO postgres;

--
-- Name: fu_tambahpersetujuan(character varying, character varying, character varying, character varying, character varying, ty_otomatisterima); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_tambahpersetujuan(nikpeminta character varying, nikpenerima1 character varying, nikpenerima2 character varying, nikpenerima3 character varying, nikpenerima4 character varying, statuspersetujuan ty_otomatisterima) RETURNS void
    LANGUAGE plpgsql
    AS $_$
begin
insert into ta_persetujuan values ($1,$2,$3,$4,$5,$6);
end
$_$;


ALTER FUNCTION public.fu_tambahpersetujuan(nikpeminta character varying, nikpenerima1 character varying, nikpenerima2 character varying, nikpenerima3 character varying, nikpenerima4 character varying, statuspersetujuan ty_otomatisterima) OWNER TO postgres;

--
-- Name: fu_test(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_test() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
id varchar (20);
thn text;
bln text;
hari text ;
rand int;
menit text;
jumlah int;
total text;
full text;
begin
thn = extract(year from now());
bln = extract(month from now());
hari = extract(day from now());
rand = ceil(random()*100);
jumlah = count(*) from test;
total = jumlah + 1;
id:='test';
full = id||thn||bln||hari||rand||total;
return full;
end
$$;


ALTER FUNCTION public.fu_test() OWNER TO postgres;

--
-- Name: fu_testmasukkan(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_testmasukkan(character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
id varchar;
begin
id := fu_test();
insert into test values(id,$1);
end
$_$;


ALTER FUNCTION public.fu_testmasukkan(character varying) OWNER TO postgres;

--
-- Name: fu_total(numeric[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_total(numeric[]) RETURNS numeric
    LANGUAGE sql
    AS $$
SELECT (SELECT SUM(s) FROM UNNEST(nilai) s) from a;
$$;


ALTER FUNCTION public.fu_total(numeric[]) OWNER TO postgres;

--
-- Name: fu_totalestimasi(character varying, character varying[], date, date, numeric[], numeric[], numeric[], numeric[], numeric[], numeric[], numeric[], numeric[], numeric[], numeric[], numeric[], numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_totalestimasi(kota character varying, nik character varying[], date1 date, date2 date, numeric[], numeric[], biayapergi_idr numeric[], biayapergi_sgd numeric[], biayapergi_usd numeric[], biayapergi_euro numeric[], biayapulang_idr numeric[], biayapulang_sgd numeric[], biayapulang_usd numeric[], biayapulang_euro numeric[], numeric[], numeric) RETURNS numeric[]
    LANGUAGE plpgsql
    AS $_$
declare
grade int; lokasi varchar; hari int ; locate varchar[]; currency varchar;
a numeric[]; b numeric[]; c numeric[];
a_son numeric; b_son numeric; c_son numeric;
t_son numeric; son numeric ; allowance numeric; meal numeric; t_meal numeric ; transport numeric;
phone numeric ; laundry numeric ; airporttax numeric; seaporttax numeric;
allowanceovernight numeric ;
total_rupiah numeric (10,2) ; total_sgd numeric (10,2) ; total_euro numeric (10,2) ; total_usd numeric (10,2) ;
t_waktu int ;
rate numeric(10,2);
t_biayaidr numeric (10,2); t_biayasgd numeric (10,2); t_biayaeuro numeric (10,2); t_biayausd numeric (10,2);
uangtambahan numeric; sertifikasi numeric ;
nik_karyawan varchar ;
total_semua numeric[];
pengulangan int;
array_nik varchar[];
begin
array_nik:=$2;
pengulangan:=0;
select (array[ta_kodelokasi.idlokasi,(ta_kodelokasi.matauang)::VARCHAR]) into locate from ta_kodelokasi,ta_kota where ta_kodelokasi.idlokasi=ta_kota.kodelokasi and ta_kota.namakota=$1;
uangtambahan = (select sum (uang) from unnest ($15) uang) ;
sertifikasi = $16 ;
hari = fu_totalhari(date1, date2);
lokasi = unnest (locate) offset 0 limit 1;	
currency = unnest (locate) offset 1 limit 1 ;
t_waktu = ((select fu_totalwaktutrip($5)) + (select fu_totalwaktutrip ($6) )) ;
rate = t_waktu / 12 ;
t_biayaidr = (select sum(idrpergi) from unnest ($7) idrpergi ) + (select sum(idrpulang) from unnest ($11) idrpulang ) ;
t_biayasgd = (select sum(sgdpergi) from unnest ($8) sgdpergi ) + (select sum(sgdpulang) from unnest ($12) sgdpulang ) ;
t_biayaeuro = (select sum(europergi) from unnest ($10) europergi ) + (select sum(europulang) from unnest ($14) europulang ) ;
t_biayausd = (select sum(usdpergi) from unnest ($9) usdpergi ) + (select sum(usdpulang) from unnest ($13) usdpulang ) ;
for r in array_lower(array_nik,1) .. array_upper(array_nik,1)
loop
	nik_karyawan = unnest (array_nik) offset pengulangan limit 1;
	pengulangan =  pengulangan + 1;	
	
grade := (select ta_karyawan.tingkat from ta_karyawan where ta_karyawan.nik=nik_karyawan);

if (hari > 0 and hari < 6) then
a = fu_getestimasi(lokasi,grade,1);
son = unnest (a) offset 0 limit 1 ;
a_son = son * hari;
allowance = unnest (a) offset 1 limit 1 ;
meal = unnest (a) offset 2 limit 1 ;
t_meal = meal * hari ;
transport = unnest (a) offset 3 limit 1 ;
phone = unnest (a) offset 4 limit 1 ;
laundry = unnest (a) offset 5 limit 1 ;
airporttax = unnest (a) offset 6 limit 1 ;
seaporttax = unnest (a) offset 7 limit 1 ;
allowanceovernight = unnest (a) offset 8 limit 1 ;
b_son = 0;
c_son = 0;
t_son = a_son + b_son + c_son ;
if (currency = 'SGD') then
total_sgd = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayasgd + uangtambahan + sertifikasi + t_son  ;
total_usd = t_biayausd ;
total_euro = t_biayaeuro ;
total_rupiah = t_biayaidr + seaporttax;
elseif (currency ='EURO') then
total_sgd = t_biayasgd + airporttax + allowanceovernight;
total_usd = t_biayausd ;
total_euro = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayaeuro + uangtambahan + sertifikasi + t_son ;
total_rupiah = t_biayaidr + seaporttax ;
elseif (currency ='USD') then
total_sgd = t_biayasgd + airporttax + allowanceovernight;
total_usd = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayausd + uangtambahan + sertifikasi + t_son ;
total_euro = t_biayaeuro ;
total_rupiah = t_biayaidr + seaporttax;
else 
total_sgd = t_biayasgd + airporttax + allowanceovernight;
total_usd = t_biayausd ;
total_euro = t_biayaeuro ;
total_rupiah = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayaidr + seaporttax + uangtambahan + sertifikasi + t_son ;
end if;

elseif (hari > 5 and hari < 15) then
a = fu_getestimasi(lokasi,grade,2);
son = unnest (a) offset 0 limit 1 ;
a_son = son * ((hari) - 5 ) ;
allowance = unnest (a) offset 1 limit 1 ;
meal = unnest (a) offset 2 limit 1 ;
t_meal = meal * ((hari)-5) ;
transport = unnest (a) offset 3 limit 1 ;
phone = unnest (a) offset 4 limit 1 ;
laundry = unnest (a) offset 5 limit 1 ;
airporttax = unnest (a) offset 6 limit 1 ;
seaporttax = unnest (a) offset 7 limit 1 ;
allowanceovernight = unnest (a) offset 8 limit 1 ;
b = fu_getestimasi(lokasi,grade,1);
b_son = (select unnest (b) offset 0 limit 1) * (5) ;
c_son = 0 ;
t_son = a_son + b_son + c_son ;
if (currency = 'SGD') then
total_sgd = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayasgd + uangtambahan + sertifikasi + t_son ;
total_usd = t_biayausd ;
total_euro = t_biayaeuro ;
total_rupiah = t_biayaidr + seaporttax;
elseif (currency ='EURO') then
total_sgd = t_biayasgd + airporttax + allowanceovernight;
total_usd = t_biayausd ;
total_euro = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayaeuro + uangtambahan + sertifikasi + t_son  ;
total_rupiah = t_biayaidr + seaporttax ;
elseif (currency ='USD') then
total_sgd = t_biayasgd + airporttax + allowanceovernight;
total_usd = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayausd + uangtambahan + sertifikasi + t_son ;
total_euro = t_biayaeuro ;
total_rupiah = t_biayaidr + seaporttax;
else 
total_sgd = t_biayasgd + airporttax + allowanceovernight;
total_usd = t_biayausd ;
total_euro = t_biayaeuro ;
total_rupiah = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayaidr + seaporttax + uangtambahan + sertifikasi + t_son ;
end if;

else
a = fu_getestimasi(lokasi,grade,3);
son = unnest (a) offset 0 limit 1 ;
a_son = son * ((hari) - 14);
allowance = unnest (a) offset 1 limit 1 ;
meal = unnest (a) offset 2 limit 1 ;
t_meal = meal * ((hari)-14) ;
transport = unnest (a) offset 3 limit 1 ;
phone = unnest (a) offset 4 limit 1 ;
laundry = unnest (a) offset 5 limit 1 ;
airporttax = unnest (a) offset 6 limit 1 ;
seaporttax = unnest (a) offset 7 limit 1 ;
allowanceovernight = unnest (a) offset 8 limit 1 ;
b = fu_getestimasi(lokasi,grade,2);
b_son = (select unnest (b) offset 0 limit 1) * (9) ;
c = fu_getestimasi(lokasi,grade,1);
c_son = (select unnest (c) offset 0 limit 1) * (5) ;
t_son = a_son + b_son + c_son ;
if (currency = 'SGD') then
total_sgd = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayasgd + uangtambahan + sertifikasi + t_son ;
total_usd = t_biayausd ;
total_euro = t_biayaeuro ;
total_rupiah = t_biayaidr + seaporttax;
elseif (currency ='EURO') then
total_sgd = t_biayasgd + airporttax + allowanceovernight;
total_usd = t_biayausd ;
total_euro = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayaeuro + uangtambahan + sertifikasi + t_son ;
total_rupiah = t_biayaidr + seaporttax ;
elseif (currency ='USD') then
total_sgd = t_biayasgd + airporttax + allowanceovernight;
total_usd = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayausd + uangtambahan + sertifikasi + t_son ;
total_euro = t_biayaeuro ;
total_rupiah = t_biayaidr + seaporttax;
else 
total_sgd = t_biayasgd + airporttax + aloowanceovernight;
total_usd = t_biayausd ;
total_euro = t_biayaeuro ;
total_rupiah = (rate * (meal + son)) + airporttax + allowanceovernight + phone + laundry + transport + t_biayaidr + seaporttax + uangtambahan + sertifikasi;
end if;

end if;

total_semua = total_semua || array[array[seaporttax,airporttax,allowanceovernight,t_son,t_meal,transport,phone,laundry,t_waktu, hari,
t_biayaidr,t_biayasgd,t_biayausd,t_biayaeuro,total_rupiah,total_sgd,total_usd,total_euro]];
end loop;

return total_semua ;


end
$_$;


ALTER FUNCTION public.fu_totalestimasi(kota character varying, nik character varying[], date1 date, date2 date, numeric[], numeric[], biayapergi_idr numeric[], biayapergi_sgd numeric[], biayapergi_usd numeric[], biayapergi_euro numeric[], biayapulang_idr numeric[], biayapulang_sgd numeric[], biayapulang_usd numeric[], biayapulang_euro numeric[], numeric[], numeric) OWNER TO postgres;

--
-- Name: fu_totalestimasigroup(numeric[], numeric[], numeric[], numeric[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_totalestimasigroup(numeric[], numeric[], numeric[], numeric[]) RETURNS numeric[]
    LANGUAGE plpgsql
    AS $_$
declare
totalidr numeric;
totalsgd numeric;
totalusd numeric;
totaleuro numeric;
totalsemua numeric[];
begin
totalidr = (select sum(idr) from unnest ($1) idr );
totalsgd = (select sum(sgd) from unnest ($2) sgd );
totalusd = (select sum(usd) from unnest ($3) usd );
totaleuro = (select sum(euro) from unnest ($4) euro );
totalsemua=totalsemua || array[array[totalidr,totalsgd,totalusd,totaleuro]];
return totalsemua ;
end
$_$;


ALTER FUNCTION public.fu_totalestimasigroup(numeric[], numeric[], numeric[], numeric[]) OWNER TO postgres;

--
-- Name: fu_totalhari(date, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_totalhari(date1 date, date2 date) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare
asd numeric(4);
begin
asd = date2::date - date1::date;
return asd;
end;
$$;


ALTER FUNCTION public.fu_totalhari(date1 date, date2 date) OWNER TO postgres;

--
-- Name: fu_totalwaktutrip(numeric[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_totalwaktutrip(numeric[]) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$
declare 
nilai numeric ;
begin
nilai = sum(a) from unnest ($1) a;
return nilai;
end
$_$;


ALTER FUNCTION public.fu_totalwaktutrip(numeric[]) OWNER TO postgres;

--
-- Name: fu_ubahdepartemen(character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_ubahdepartemen(iddepartemen character, namadepartemen character) RETURNS void
    LANGUAGE sql
    AS $_$
update ta_departemen
set
namadepartemen =$2
where iddepartemen=$1;
$_$;


ALTER FUNCTION public.fu_ubahdepartemen(iddepartemen character, namadepartemen character) OWNER TO postgres;

--
-- Name: fu_ubahjabatan(character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_ubahjabatan(idjabatan character, namajabatan character) RETURNS void
    LANGUAGE sql
    AS $_$
update ta_jabatan
set
namajabatan=$2
where idjabatan=$1;
$_$;


ALTER FUNCTION public.fu_ubahjabatan(idjabatan character, namajabatan character) OWNER TO postgres;

--
-- Name: fu_ubahkaryawan(character varying, character varying, character varying, character, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_ubahkaryawan(nik character varying, nama character varying, email character varying, idtelegram character, iddepartemen character varying, idjabatan character varying, tingkat integer) RETURNS void
    LANGUAGE sql
    AS $_$
update ta_karyawan
set
nama=$2,
email=$3,
idtelegram=$4,
iddepartemen=$5,
idjabatan=$6,
tingkat=$7
where nik=$1;
$_$;


ALTER FUNCTION public.fu_ubahkaryawan(nik character varying, nama character varying, email character varying, idtelegram character, iddepartemen character varying, idjabatan character varying, tingkat integer) OWNER TO postgres;

--
-- Name: fu_ubahkodelokasi(character varying, character varying, ty_kodelokasi); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_ubahkodelokasi(character varying, character varying, ty_kodelokasi) RETURNS void
    LANGUAGE sql
    AS $_$
update ta_kodelokasi
set
namalokasi=$2,
matauang=$3
where idlokasi=$1;
$_$;


ALTER FUNCTION public.fu_ubahkodelokasi(character varying, character varying, ty_kodelokasi) OWNER TO postgres;

--
-- Name: fu_ubahkota(character varying, character varying, character varying, ty_kodekota); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_ubahkota(idkota character varying, namakota character varying, namanegara character varying, kode ty_kodekota) RETURNS void
    LANGUAGE sql
    AS $_$
update ta_kota
set
namakota =$2,
namanegara=$3,
kode=$4
where idkota=$1;
$_$;


ALTER FUNCTION public.fu_ubahkota(idkota character varying, namakota character varying, namanegara character varying, kode ty_kodekota) OWNER TO postgres;

--
-- Name: fu_ubahlokasi(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_ubahlokasi(idlokasi character varying, namatempat character varying, namakota character varying, namanegara character varying) RETURNS void
    LANGUAGE sql
    AS $_$
update ta_lokasi
set
namatempat =$2,
namakota=$3,
namanegara=$4
where idlokasi=$1;
$_$;


ALTER FUNCTION public.fu_ubahlokasi(idlokasi character varying, namatempat character varying, namakota character varying, namanegara character varying) OWNER TO postgres;

--
-- Name: fu_ubahmatauang(character, character, character); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_ubahmatauang(idmatauang character, namamatauang character, simbolmatauang character) RETURNS void
    LANGUAGE sql
    AS $_$
update ta_matauang
set
namamatauang =$2,
simbolmatauang=$3
where idmatauang=$1;
$_$;


ALTER FUNCTION public.fu_ubahmatauang(idmatauang character, namamatauang character, simbolmatauang character) OWNER TO postgres;

--
-- Name: fu_ubahpengguna(character varying, character varying, ty_level, ty_status); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_ubahpengguna(nik character varying, katasandi character varying, level ty_level, ty_status) RETURNS void
    LANGUAGE sql
    AS $_$
update ta_pengguna
set
katasandi =$2,
level=$3,
status=$4
where nik=$1;
$_$;


ALTER FUNCTION public.fu_ubahpengguna(nik character varying, katasandi character varying, level ty_level, ty_status) OWNER TO postgres;

--
-- Name: fu_ubahpermintaanpergipulang(character varying, character varying, character varying[], character varying[], character varying[], character varying[], integer[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date, character varying[], character varying[], character varying[], integer[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date, numeric, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_ubahpermintaanpergipulang(character varying, character varying, character varying[], character varying[], character varying[], character varying[], integer[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date, character varying[], character varying[], character varying[], integer[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date, numeric, numeric) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
totalwaktupergi int;
totalwaktupulang int;
kendaraan varchar[];
totalkendaraan text;
begin
kendaraan=$13||$24;
totalwaktupergi = fu_totalwaktutrip ($7);
totalwaktupulang = fu_totalwaktutrip ($18);
totalkendaraan = fu_hitungelement(array_agg(kendaraan:: text[])) ;
update ta_permintaanpergipulang set nikpengaju=$2, nikpejalan=$3, lokasipergi=$4, lokasipertrippergifrom=$5, lokasipertrippergito=$6, waktupertrippergi=$7, 
biayapertrippergiidr=$8, biayapertrippergisgd=$9, biayapertrippergiusd=$10, biayapertrippergieur=$11, matauangpergi=$12,
kendaraanpertrippergi=$13, tanggalpergi=$14, lokasipulang=$15, lokasipertrippulangfrom=$16, lokasipertrippulangto=$17,
waktupertrippulang=$18, biayapertrippulangidr=$19, biayapertrippulangsgd=$20, biayapertrippulangusd=$21, biayapertrippulangeur=$22,
matauangpulang=$23, kendaraanpertrippulang=$24, tanggalpulang=$25, biayatambahan=$26, biayapelatihan=$27, 
kendaraanpertrippergipulang=kendaraan,
jumlahkendaraanpertrippergipulang=totalkendaraan,totalwaktupergipulang=totalwaktupergi+totalwaktupulang,
totalhari=fu_totalhari($14,$25)
where idpermintaan=$1;
end;
$_$;


ALTER FUNCTION public.fu_ubahpermintaanpergipulang(character varying, character varying, character varying[], character varying[], character varying[], character varying[], integer[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date, character varying[], character varying[], character varying[], integer[], numeric[], numeric[], numeric[], numeric[], character varying[], character varying[], date, numeric, numeric) OWNER TO postgres;

--
-- Name: fu_ubahpersetujuan(character varying, character varying, character varying, character varying, character varying, ty_otomatisterima); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fu_ubahpersetujuan(nikpeminta character varying, nikpenerima1 character varying, nikpenerima2 character varying, nikpenerima3 character varying, nikpenerima4 character varying, statuspersetujuan ty_otomatisterima) RETURNS void
    LANGUAGE sql
    AS $_$
update ta_persetujuan
set
nikpenerima1=$2,
nikpenerima2=$3,
nikpenerima3=$4,
nikpenerima4=$5,
statuspersetujuan=$6
where nikpeminta=$1;
$_$;


ALTER FUNCTION public.fu_ubahpersetujuan(nikpeminta character varying, nikpenerima1 character varying, nikpenerima2 character varying, nikpenerima3 character varying, nikpenerima4 character varying, statuspersetujuan ty_otomatisterima) OWNER TO postgres;

--
-- Name: get_allowance(character varying, character varying[], character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_allowance(city character varying, nik character varying[], grade character varying, homebasee integer, day integer) RETURNS TABLE(n_karyawan character varying[], basic_rate_bs_pa character varying[], pocket_allowance integer[], basic_rate_bs character varying[], basic_rate integer[], basic_rate_bs_ha character varying[], hotel_allowance integer[], basic_rate_bs_as character varying[], basic_rate_as integer[], basic_rate_bs_ha_as character varying[], hotel_allowance_as integer[], total_at_cost_system integer[], total_allowance_system integer[], total_total_at_cost_system integer[], total_total_allowance_system integer[])
    LANGUAGE plpgsql
    AS $$
declare
destinate numeric[]; area_code varchar; konstanta numeric; loop_basicrate int ; loop_hotelallowance int ; loop_pocketallowance int ;
basic numeric[]; estimasi numeric[]; rate varchar; rate_total varchar[];
vlue numeric; freq int; home int; total_value numeric[];
total_freq int[]; total_home int[]; totalfreq_totalvalue numeric; totalfreqvalue numeric(10,2)[];
totalfreqvalueadvance numeric(10,2) ; total_totalfreqvalueadvance numeric (10,2)[];
totalfreqvalueadvance_pa numeric(10,2) ; total_totalfreqvalueadvance_pa numeric (10,2)[];
home_pa int; freq_pa int; vlue_pa numeric ;
total_home_pa int[]; total_freq_pa int[]; total_value_pa numeric[] ;
totalfreq_totalvalue_pa numeric; totalfreqvalue_pa numeric[];
totalfreqvalueadvance_ha numeric(10,2) ; total_totalfreqvalueadvance_ha numeric (10,2)[];
home_ha int; freq_ha int; vlue_ha numeric ;
total_home_ha int[]; total_freq_ha int[]; total_value_ha numeric[] ;
totalfreq_totalvalue_ha numeric; totalfreqvalue_ha numeric[];
min_pa int; max_pa int ; day_pa int ; total_day int ;
min_ha int; max_ha int ; day_ha int ; total_day_ha int ;
total_total_total_day int[] ; total_total_day int ; day_paa int; nilai int; array_max_pa int; angka int;
total_total_total_day_ha int[] ; total_total_day_ha int ; day_haa int; nilai_ha int; array_max_ha int; angka_ha int;
total_total_total_day_basic int[] ; total_total_day_basic int ; day_basic int;
var_r record ; asd int; count_all_pocketallowance int; count_all_hotelallowance int; count_all_basicrate int ; count_all_basicrate_allowance_system int;
bs_rate varchar ; bs_rate_ha varchar ; bs_rate_pa varchar ;  bs_rate_array varchar[] ; bs_rate_ha_array varchar[] ; bs_rate_pa_array varchar[] ; 
total_pa int; total_bs int; total_ha int ; total_all int; 
const numeric; nik_karyawan varchar; loop_nik int ;
konstanta_config_system numeric;
bs_rate_as varchar ; home_as int; vlue_as numeric; freq_as int; loop_basicrate_as int;
totalfreq_totalvalue_as numeric ; total_total_day_basic_as int;  totalfreqvalueadvance_as numeric ; total_total_total_day_basic_as int[];
bs_rate_array_as varchar[]; total_freq_as int []; total_value_as numeric []; total_home_as int [] ; 
totalfreqvalue_as numeric[] ;total_totalfreqvalueadvance_as numeric[];
total_pa_as int ; total_bs_as int ; total_ha_as int ; total_all_as int ;
totalfreq_totalvalue_ha_as numeric; totalfreqvalueadvance_ha_as numeric ;
bs_rate_ha_array_as varchar[]; total_total_total_day_ha_as int []; total_freq_ha_as int []; total_value_ha_as numeric[];
total_home_ha_as int []; totalfreqvalue_ha_as numeric []; total_totalfreqvalueadvance_ha_as numeric[];

begin
loop_nik := 0;
select destination.area_code into area_code from destination where name_destination=city;
select destination.constant into konstanta from destination where name_destination=city;
select config_system.value into konstanta_config_system from config_system where id=1;
select count(*) into count_all_basicrate from basic_rate where id_area_code=area_code ;
select count(*) into count_all_basicrate_allowance_system from basic_rate where id_area_code=area_code  and receipt='no' ;
select count(*) into count_all_hotelallowance from basic_rate_hotel where id_area_code=area_code;
select count(*) into count_all_pocketallowance  from basic_rate_pocket_allowance where id_area_code=area_code ;
for var_r in array_lower(nik,1) .. array_upper(nik,1)  loop
loop_basicrate := 0 ; loop_hotelallowance := 0 ; loop_pocketallowance := 0 ; loop_basicrate_as := 0 ;
day_paa = day;
day_haa = day;
bs_rate_pa_array := array[] :: varchar[] ;
total_total_total_day := array[] :: int []; total_freq_pa := array[] :: int [] ; total_home_pa := array[] :: int [];
total_value_pa := array[] :: numeric[];  totalfreqvalue_pa := array[] :: numeric[]; total_totalfreqvalueadvance_pa := array[]:: numeric[];
bs_rate_array := array[] :: varchar[] ;
total_total_total_day_basic := array[] :: int []; total_freq := array[]:: int []; total_home := array[]:: int []; 
total_value := array[]:: numeric[]; totalfreqvalue := array[] :: numeric[]; total_totalfreqvalueadvance := array[]:: numeric[] ;
bs_rate_ha_array := array[] :: varchar[] ;
total_total_total_day_ha := array[] :: int []; total_freq_ha := array[]:: int [] ;total_home_ha := array[] :: int []; 
total_value_ha := array[]:: numeric[]; totalfreqvalue_ha := array[]:: numeric[]; total_totalfreqvalueadvance_ha := array[]:: numeric[];
total_total_total_day_basic_as := array[] :: int[];
bs_rate_array_as:= array[]::  varchar[]; total_freq_as := array[]:: int []; total_value_as :=array[]:: numeric []; total_home_as := array[]:: int [] ; 
totalfreqvalue_as := array[]::  numeric[] ;total_totalfreqvalueadvance_as := array[]::  numeric[];
bs_rate_ha_array_as := array[]:: varchar[]; total_total_total_day_ha_as := array[]:: int []; total_freq_ha_as := array[]:: int [];
total_value_ha_as := array[]:: numeric[]; total_home_ha_as := array[]:: int []; totalfreqvalue_ha_as := array[]:: numeric []; 
total_totalfreqvalueadvance_ha_as := array[]:: numeric[];


for counter in 1 .. count_all_pocketallowance  
loop
select basic_rate_pocket_allowance.basic_rate into bs_rate_pa from basic_rate_pocket_allowance where id_area_code = area_code offset loop_pocketallowance limit 1 ;
select homebase into home_pa from basic_rate_pocket_allowance where id_area_code = area_code offset loop_pocketallowance limit 1 ;
select value into vlue_pa from basic_rate_pocket_allowance where id_area_code = area_code  offset loop_pocketallowance limit 1 ;
select frequency into freq_pa from basic_rate_pocket_allowance where id_area_code = area_code  offset loop_pocketallowance limit 1 ;
select min into min_pa from basic_rate_pocket_allowance where id_area_code = area_code offset loop_pocketallowance limit 1 ;
select max into max_pa from basic_rate_pocket_allowance where id_area_code = area_code offset loop_pocketallowance limit 1 ;


loop_pocketallowance = loop_pocketallowance + 1 ;
angka:=0;
if (min_pa = 0 ) then 
min_pa = 1 ;
else
min_pa = min_pa ;
end if; 
for minmax in min_pa .. max_pa
loop
angka = angka + 1 ;
end loop;
if (day > min_pa and day > max_pa ) then
total_day = angka ;
elseif (day >= min_pa and day <= max_pa) then
total_day = angka ;
elseif (day < min_pa and day < max_pa) then
total_day = 0 ;
end if;

if (total_day = 0 ) then 
day_pa = 0;
nilai = 0 ;
elseif (total_day < day_paa) then
day_pa = day_paa - total_day;
nilai = total_day ;
elseif (total_day >= day_paa) then
day_pa = day_paa ;
nilai = day_paa ;

end if;
day_paa = day_pa ;
total_total_day = nilai ;

totalfreq_totalvalue_pa =  (vlue_pa * konstanta) / freq_pa ;
if (homebasee = 1 and homebasee = home_pa) then 
totalfreqvalueadvance_pa = (((vlue_pa * konstanta) /freq_pa) * total_total_day ) * home_pa;
elseif (homebasee = 1 and homebasee != home_pa) then
totalfreqvalueadvance_pa = (((vlue_pa * konstanta) /freq_pa) * total_total_day ) * home_pa;
elseif (homebasee = 0) then
totalfreqvalueadvance_pa = (((vlue_pa * konstanta) /freq_pa) * total_total_day ) * 1;
end if ;
bs_rate_pa_array = bs_rate_pa_array || array [bs_rate_pa];
total_total_total_day = total_total_total_day || array[nilai];
total_freq_pa = total_freq_pa || array[freq_pa];
total_value_pa = total_value_pa || array[vlue_pa];
total_home_pa= total_home_pa || array[home_pa];
totalfreqvalue_pa = totalfreqvalue_pa || array[totalfreq_totalvalue_pa];
total_totalfreqvalueadvance_pa = total_totalfreqvalueadvance_pa || array[totalfreqvalueadvance_pa];
end loop;


for counter in 1 .. count_all_basicrate  
loop
select basic_rate.basic_rate into bs_rate from basic_rate where id_area_code = area_code offset loop_basicrate limit 1 ;
select homebase into home from basic_rate where id_area_code = area_code offset loop_basicrate limit 1 ;
select value into vlue from basic_rate where id_area_code = area_code offset loop_basicrate limit 1 ;
select frequency into freq from basic_rate where id_area_code = area_code offset loop_basicrate limit 1 ;
loop_basicrate = loop_basicrate + 1 ;
totalfreq_totalvalue =  (vlue * konstanta) / freq ;
if (homebasee = 1 and homebasee = home) then 
totalfreqvalueadvance = (((vlue * konstanta) /freq) * day) * home ;
elseif (homebasee = 1 and homebasee != home) then
totalfreqvalueadvance = (((vlue * konstanta) /freq) * day) * home ;
elseif (homebasee = 0) then
totalfreqvalueadvance = (((vlue * konstanta) /freq) * day) * 1 ;
end if ;
total_total_day_basic = day ;
bs_rate_array = bs_rate_array || array[bs_rate];
total_total_total_day_basic = total_total_total_day_basic || array[total_total_day_basic];
total_freq = total_freq || array[freq];
total_value = total_value || array[vlue];
total_home= total_home || array[home];
totalfreqvalue = totalfreqvalue || array[totalfreq_totalvalue];
total_totalfreqvalueadvance = total_totalfreqvalueadvance || array[totalfreqvalueadvance];
end loop;

for counter in 1 .. count_all_basicrate_allowance_system 
loop
select basic_rate.basic_rate into bs_rate_as from basic_rate where id_area_code = area_code and receipt='no' offset loop_basicrate_as limit 1 ;
select homebase into home_as from basic_rate where id_area_code = area_code and receipt='no' offset loop_basicrate_as limit 1 ;
select value into vlue_as from basic_rate where id_area_code = area_code and receipt='no' offset loop_basicrate_as limit 1 ;
select frequency into freq_as from basic_rate where id_area_code = area_code and receipt='no' offset loop_basicrate_as limit 1 ;
loop_basicrate_as = loop_basicrate_as + 1 ;
totalfreq_totalvalue_as =  (vlue_as * konstanta_config_system) / freq_as ;
if (homebasee = 1 and homebasee = home_as) then 
totalfreqvalueadvance_as = (((vlue_as * konstanta_config_system) /freq_as) * day) * home_as ;
elseif (homebasee = 1 and homebasee != home_as) then
totalfreqvalueadvance_as = (((vlue_as * konstanta_config_system) /freq_as) * day) * home_as ;
elseif (homebasee = 0) then
totalfreqvalueadvance_as = (((vlue_as * konstanta_config_system )/freq_as) * day) * 1 ;
end if ;
total_total_day_basic_as = day ;
bs_rate_array_as = bs_rate_array_as || array[bs_rate_as];
total_total_total_day_basic_as = total_total_total_day_basic_as || array[total_total_day_basic_as];
total_freq_as = total_freq_as || array[freq_as];
total_value_as = total_value_as || array[vlue_as];
total_home_as= total_home_as || array[home_as];
totalfreqvalue_as = totalfreqvalue_as || array[totalfreq_totalvalue_as];
total_totalfreqvalueadvance_as = total_totalfreqvalueadvance_as || array[totalfreqvalueadvance_as];
end loop;



for counter in 1 .. count_all_hotelallowance 
loop
select basic_rate_hotel.basic_rate into bs_rate_ha from basic_rate_hotel where id_area_code = area_code offset loop_hotelallowance limit 1 ;
select homebase into home_ha from basic_rate_hotel where id_area_code = area_code offset loop_hotelallowance limit 1 ;
select value into vlue_ha from basic_rate_hotel where id_area_code = area_code  offset loop_hotelallowance limit 1 ;
select frequency into freq_ha from basic_rate_hotel where id_area_code = area_code  offset loop_hotelallowance limit 1 ;
select min into min_ha from basic_rate_hotel where id_area_code = area_code offset loop_hotelallowance limit 1 ;
select max into max_ha from basic_rate_hotel where id_area_code = area_code offset loop_hotelallowance limit 1 ;


loop_hotelallowance = loop_hotelallowance + 1 ;
angka_ha:=0;
if (min_ha = 0 ) then 
min_ha = 1 ;
else
min_ha = min_ha ;
end if; 
for minmax_ha in min_ha .. max_ha
loop
angka_ha = angka_ha + 1 ;
end loop;
if (day > min_ha and day > max_ha ) then
total_day_ha = angka_ha ;
elseif (day >= min_ha and day <= max_ha) then
total_day_ha = angka_ha ;
elseif (day < min_ha and day < max_ha) then
total_day_ha = 0 ;
end if;

if (total_day_ha = 0 ) then 
day_ha = 0;
nilai_ha = 0 ;
elseif (total_day_ha < day_haa) then
day_ha = day_haa - total_day_ha;
nilai_ha = total_day_ha ;
elseif (total_day_ha >= day_haa) then
day_ha = day_haa ;
nilai_ha = day_haa ;

end if;
day_haa = day_ha ;
total_total_day_ha = nilai_ha ;

totalfreq_totalvalue_ha =  (vlue_ha * konstanta) / freq_ha ;
if (homebasee = 1 and homebasee = home_ha) then 
totalfreqvalueadvance_ha = (((vlue_ha * konstanta) /freq_ha) * total_total_day_ha ) * home_ha;
elseif (homebasee = 1 and homebasee != home_ha) then
totalfreqvalueadvance_ha = (((vlue_ha * konstanta) /freq_ha) * total_total_day_ha ) * home_ha;
elseif (homebasee = 0) then
totalfreqvalueadvance_ha = (((vlue_ha * konstanta) /freq_ha) * total_total_day_ha ) * 1;
end if ;
bs_rate_ha_array = bs_rate_ha_array || array[bs_rate_ha];
total_total_total_day_ha = total_total_total_day_ha || array[nilai_ha];
total_freq_ha = total_freq_ha || array[freq_ha];
total_value_ha = total_value_ha || array[vlue_ha];
total_home_ha= total_home_ha || array[home_ha];
totalfreqvalue_ha = totalfreqvalue_ha || array[totalfreq_totalvalue_ha];
total_totalfreqvalueadvance_ha = total_totalfreqvalueadvance_ha || array[totalfreqvalueadvance_ha];

totalfreq_totalvalue_ha_as =  (vlue_ha * konstanta_config_system) / freq_ha ;
if (homebasee = 1 and homebasee = home_ha) then 
totalfreqvalueadvance_ha_as = (((vlue_ha * konstanta_config_system) /freq_ha) * total_total_day_ha ) * home_ha;
elseif (homebasee = 1 and homebasee != home_ha) then
totalfreqvalueadvance_ha = (((vlue_ha * konstanta_config_system) /freq_ha) * total_total_day_ha ) * home_ha;
elseif (homebasee = 0) then
totalfreqvalueadvance_ha = (((vlue_ha * konstanta_config_system) /freq_ha) * total_total_day_ha ) * 1;
end if ;
bs_rate_ha_array_as = bs_rate_ha_array_as || array[bs_rate_ha];
total_total_total_day_ha_as = total_total_total_day_ha_as || array[nilai_ha];
total_freq_ha_as = total_freq_ha_as || array[freq_ha];
total_value_ha_as = total_value_ha_as || array[vlue_ha];
total_home_ha_as= total_home_ha_as || array[home_ha];
totalfreqvalue_ha_as = totalfreqvalue_ha_as || array[totalfreq_totalvalue_ha];
total_totalfreqvalueadvance_ha_as = total_totalfreqvalueadvance_ha_as || array[totalfreqvalueadvance_ha];

end loop;
total_pa = (select sum(total_pa_pa) from unnest (total_totalfreqvalueadvance_pa) total_pa_pa);
total_bs = (select sum(total_bs_bs) from unnest (total_totalfreqvalueadvance) total_bs_bs);
total_ha = (select sum(total_ha_ha) from unnest (total_totalfreqvalueadvance_ha) total_ha_ha);
total_all = total_pa + total_bs + total_ha ;

total_pa_as = (select sum(total_pa_pa) from unnest (total_totalfreqvalueadvance_pa) total_pa_pa);
total_bs_as = (select sum(total_bs_bs) from unnest (total_totalfreqvalueadvance_as) total_bs_bs);
total_ha_as = (select sum(total_ha_ha) from unnest (total_totalfreqvalueadvance_ha_as) total_ha_ha);
total_all_as = total_pa_as + total_bs_as + total_ha_as ;


nik_karyawan = (select unnest (nik) offset loop_nik limit 1);
loop_nik = loop_nik + 1 ;
n_karyawan :=  array[nik_karyawan];
basic_rate_bs_pa := array[bs_rate_pa_array];
pocket_allowance := array[total_total_total_day,total_freq_pa,total_home_pa,total_value_pa, totalfreqvalue_pa,total_totalfreqvalueadvance_pa];

basic_rate_bs := array[bs_rate_array];
basic_rate := array[total_total_total_day_basic,total_freq,total_home,total_value, totalfreqvalue,total_totalfreqvalueadvance];
basic_rate_bs_ha := array[bs_rate_ha_array];
hotel_allowance := array[total_total_total_day_ha,total_freq_ha,total_home_ha,total_value_ha, totalfreqvalue_ha,total_totalfreqvalueadvance_ha];

basic_rate_bs_as := array[bs_rate_array_as];
basic_rate_as := array[total_total_total_day_basic_as,total_freq_as,total_home_as,total_value_as, totalfreqvalue_as,total_totalfreqvalueadvance_as];
basic_rate_bs_ha_as := array[bs_rate_ha_array_as];
hotel_allowance_as := array[total_total_total_day_ha_as,total_freq_ha_as,total_home_ha_as,total_value_ha_as, totalfreqvalue_ha_as,total_totalfreqvalueadvance_ha_as];


total_at_cost_system := array[total_pa,total_bs,total_ha];
total_allowance_system := array[total_pa_as,total_bs_as,total_ha_as];
total_total_at_cost_system := total_all;
total_total_allowance_system := total_all_as ; 
return next;
end loop;
end
$$;


ALTER FUNCTION public.get_allowance(city character varying, nik character varying[], grade character varying, homebasee integer, day integer) OWNER TO postgres;

--
-- Name: hapuspengguna(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION hapuspengguna(idpengguna integer) RETURNS void
    LANGUAGE sql
    AS $_$
delete from ta_pengguna where idpengguna=$1;
$_$;


ALTER FUNCTION public.hapuspengguna(idpengguna integer) OWNER TO postgres;

--
-- Name: my_proc(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION my_proc() RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
FOR i IN 1..5 LOOP
BEGIN
INSERT INTO my_table(id, val) VALUES (i, 'row ' || i);
EXCEPTION WHEN unique_violation THEN
-- do nothing
END;
END LOOP;
END;
$$;


ALTER FUNCTION public.my_proc() OWNER TO postgres;

--
-- Name: random_string(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION random_string(length integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
declare
  chars text[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';
  result text := '';
  i integer := 0;
begin
  if length < 0 then
    raise exception 'Given length cannot be less than 0';
  end if;
  for i in 1..length loop
    result := result || chars[1+random()*(array_length(chars, 1)-1)];
  end loop;
  return result;
end;
$$;


ALTER FUNCTION public.random_string(length integer) OWNER TO postgres;

--
-- Name: totalrecords(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION totalrecords() RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare
	total integer;
BEGIN
   SELECT count(*) into total FROM buah;
   RETURN total;
END;
$$;


ALTER FUNCTION public.totalrecords() OWNER TO postgres;

--
-- Name: tr_fu_log_departemen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tr_fu_log_departemen() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE
    col RECORD;
    newValue text;
    oldValue text;
    isChange boolean;
BEGIN
IF TG_OP<>'DELETE' then
    INSERT INTO ta_log_ta_departemen
    (
        log_time,
        log_action,
        iddepartemen,
  		namadepartemen
     )
    VALUES
    (
        now(),
        TG_OP,
        new.iddepartemen,
  		new.namadepartemen
    );
    RETURN NEW;
ELSIF TG_OP='DELETE' then
    INSERT INTO ta_log_ta_departemen
    (
        log_time,
        log_action,
        iddepartemen,
  		namadepartemen
    )
    VALUES
    (
        now(),
        TG_OP,
        old.iddepartemen,
        old.namadepartemen
    );
    RETURN OLD;
END IF;
RETURN NULL;
END;$$;


ALTER FUNCTION public.tr_fu_log_departemen() OWNER TO postgres;

--
-- Name: tr_fu_log_jabatan(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tr_fu_log_jabatan() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE
    col RECORD;
    newValue text;
    oldValue text;
    isChange boolean;
BEGIN
IF TG_OP<>'DELETE' then
    INSERT INTO ta_log_ta_jabatan
    (
        log_time,
        log_action,
        idjabatan,
  		namajabatan
     )
    VALUES
    (
        now(),
        TG_OP,
        new.idjabatan,
  		new.namajabatan
    );
    RETURN NEW;
ELSIF TG_OP='DELETE' then
    INSERT INTO ta_log_ta_jabatan
    (
        log_time,
        log_action,
        idjabatan,
  		namajabatan
    )
    VALUES
    (
        now(),
        TG_OP,
        old.idjabatan,
        old.namajabatan
    );
    RETURN OLD;
END IF;
RETURN NULL;
END;$$;


ALTER FUNCTION public.tr_fu_log_jabatan() OWNER TO postgres;

--
-- Name: tr_fu_log_karyawan(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tr_fu_log_karyawan() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE
    col RECORD;
    newValue text;
    oldValue text;
    isChange boolean;
BEGIN
IF TG_OP<>'DELETE' then
    INSERT INTO ta_log_ta_karyawan
    (
        log_time,
        log_action,
        nik,
  		nama,
        email,
        idtelegram,
  		iddepartemen,
        idjabatan,
        tingkat,
        token
    )
    VALUES
    (
        now(),
        TG_OP,
        new.nik,
  		new.nama,
        new.email,
        new.idtelegram,
  		new.iddepartemen,
        new.idjabatan,
        new.tingkat,
       	new.token
    );
    RETURN NEW;
ELSIF TG_OP='DELETE' then
    INSERT INTO ta_log_ta_karyawan
    (
        log_time,
        log_action,
        nik,
  		nama,
        email,
        idtelegram,
  		iddepartemen,
        idjabatan,
        tingkat,
        token
    )
    VALUES
    (
        now(),
        TG_OP,
        old.nik,
  		old.nama,
        old.email,
        old.idtelegram,
  		old.iddepartemen,
        old.idjabatan,
        old.tingkat,
        old.token
    );
    RETURN OLD;
END IF;
RETURN NULL;
END;$$;


ALTER FUNCTION public.tr_fu_log_karyawan() OWNER TO postgres;

--
-- Name: tr_fu_log_konfig(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tr_fu_log_konfig() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE
    col RECORD;
    newValue text;
    oldValue text;
    isChange boolean;
BEGIN
IF TG_OP<>'DELETE' then
    INSERT INTO ta_log_ta_konfig
    (
        log_time,
        log_action,
        idkonfig,
  		idlokasi,
  		minimaltingkat,
    maksimaltingkat,
    hari,
    allowanceson,
    allowance,
    meal,
    transport,
    phone,
    laundry,
    airporttax,
    seaporttax,
    allowanceovernight
     )
    VALUES
    (
        now(),
        TG_OP,
        new.idkonfig,
  		new.idlokasi,
  		new.minimaltingkat,
   new.maksimaltingkat,
    new.hari,
    new.allowanceson,
    new.allowance,
    new.meal,
    new.transport,
   new.phone,
    new.laundry,
    new.airporttax,
    new.seaporttax,
    new.allowanceovernight
    );
    RETURN NEW;
ELSIF TG_OP='DELETE' then
    INSERT INTO ta_log_ta_konfig
    (
        log_time,
        log_action,
        idkonfig,
  		idlokasi,
  		minimaltingkat,
    maksimaltingkat,
    hari,
    allowanceson,
    allowance,
    meal,
    transport,
    phone,
    laundry,
    airporttax,
    seaporttax,
    allowanceovernight
    )
    VALUES
    (
        now(),
        TG_OP,
        old.idkonfig,
  		old.idlokasi,
  		old.minimaltingkat,
   old.maksimaltingkat,
    old.hari,
    old.allowanceson,
    old.allowance,
    old.meal,
    old.transport,
    old.phone,
    old.laundry,
    old.airporttax,
    old.seaporttax,
    old.allowanceovernight
    );
    RETURN OLD;
END IF;
RETURN NULL;
END;$$;


ALTER FUNCTION public.tr_fu_log_konfig() OWNER TO postgres;

--
-- Name: tr_fu_log_pengguna(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tr_fu_log_pengguna() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE
    col RECORD;
    newValue text;
    oldValue text;
    isChange boolean;
BEGIN
IF TG_OP<>'DELETE' then
    INSERT INTO ta_log_ta_pengguna
    (
        log_time,
        log_action,
        nik,
  		katasandi,
        level,
        status
     )
    VALUES
    (
        now(),
        TG_OP,
        new.nik,
  		new.katasandi,
        new.level,
        new.status
    );
    RETURN NEW;
ELSIF TG_OP='DELETE' then
    INSERT INTO ta_log_ta_pengguna
    (
        log_time,
        log_action,
        nik,
  		katasandi,
        level,
        status
    )
    VALUES
    (
        now(),
        TG_OP,
        old.nik,
        old.katasandi,
        old.level,
        old.status
    );
    RETURN OLD;
END IF;
RETURN NULL;
END;$$;


ALTER FUNCTION public.tr_fu_log_pengguna() OWNER TO postgres;

--
-- Name: tr_fu_log_permintaanpergipulang(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tr_fu_log_permintaanpergipulang() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE
    col RECORD;
    newValue text;
    oldValue text;
    isChange boolean;
BEGIN
IF TG_OP<>'DELETE' then
    INSERT INTO ta_log_ta_permintaanpergipulang
    (
        log_time,
        log_action,
        idpermintaan,
  		nikpengaju,
        nikpejalan,
        lokasipergi,
  		lokasipulang,
        waktupermintaan
     )
    VALUES
    (
        now(),
        TG_OP,
        new.idpermintaan,
        new.nikpengaju,
        new.nikpejalan,
        new.lokasipergi,
        new.lokasipulang,
        new.waktupermintaan
    );
    RETURN NEW;
ELSIF TG_OP='DELETE' then
    INSERT INTO ta_log_ta_permintaanpergipulang
    (
        log_time,
        log_action,
        idpermintaan,
  		nikpengaju,
        nikpejalan,
        lokasipergi,
  		lokasipulang,
        waktupermintaan
    )
    VALUES
    (
        now(),
        TG_OP,
        old.idpermintaan,
        old.nikpengaju,
        old.nikpejalan,
        old.lokasipergi,
        old.lokasipulang,
        old.waktupermintaan
    );
    RETURN OLD;
END IF;
RETURN NULL;
END;$$;


ALTER FUNCTION public.tr_fu_log_permintaanpergipulang() OWNER TO postgres;

SET search_path = program, pg_catalog;

--
-- Name: ta_area_code_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_area_code_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_area_code_id_seq OWNER TO postgres;

--
-- Name: ta_area_code_id_seq; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_area_code_id_seq OWNED BY ta_area_code.id;


--
-- Name: ta_basic_rate; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_basic_rate (
    id integer NOT NULL,
    basic_rate character varying(35),
    frequency numeric(10,2),
    homebase numeric(10,2),
    id_area_code character varying(30) NOT NULL,
    value numeric(10,2),
    receipt character varying(20)
);


ALTER TABLE ta_basic_rate OWNER TO postgres;

--
-- Name: ta_basic_rate_hotel; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_basic_rate_hotel (
    id integer NOT NULL,
    basic_rate character varying(30),
    frequency numeric(10,2),
    homebase numeric(10,2),
    id_area_code character varying(30),
    value numeric(10,2),
    min integer,
    max integer
);


ALTER TABLE ta_basic_rate_hotel OWNER TO postgres;

--
-- Name: ta_basic_rate_hotel_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_basic_rate_hotel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_basic_rate_hotel_id_seq OWNER TO postgres;

--
-- Name: ta_basic_rate_hotel_id_seq1; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_basic_rate_hotel_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_basic_rate_hotel_id_seq1 OWNER TO postgres;

--
-- Name: ta_basic_rate_hotel_id_seq1; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_basic_rate_hotel_id_seq1 OWNED BY ta_basic_rate_hotel.id;


--
-- Name: ta_basic_rate_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_basic_rate_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_basic_rate_id_seq OWNER TO postgres;

--
-- Name: ta_basic_rate_id_seq1; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_basic_rate_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_basic_rate_id_seq1 OWNER TO postgres;

--
-- Name: ta_basic_rate_id_seq1; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_basic_rate_id_seq1 OWNED BY ta_basic_rate.id;


--
-- Name: ta_basic_rate_pocket_allowance; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_basic_rate_pocket_allowance (
    id integer NOT NULL,
    basic_rate character varying(30),
    frequency numeric(10,2),
    homebase numeric(10,2),
    id_area_code character varying(30),
    value numeric(10,2),
    min integer,
    max integer
);


ALTER TABLE ta_basic_rate_pocket_allowance OWNER TO postgres;

--
-- Name: ta_basic_rate_pocket_allowance_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_basic_rate_pocket_allowance_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_basic_rate_pocket_allowance_id_seq OWNER TO postgres;

--
-- Name: ta_basic_rate_pocket_allowance_id_seq1; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_basic_rate_pocket_allowance_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_basic_rate_pocket_allowance_id_seq1 OWNER TO postgres;

--
-- Name: ta_basic_rate_pocket_allowance_id_seq1; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_basic_rate_pocket_allowance_id_seq1 OWNED BY ta_basic_rate_pocket_allowance.id;


--
-- Name: ta_city; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_city (
    id integer NOT NULL,
    name character varying(35),
    countrycode character varying(3)
);


ALTER TABLE ta_city OWNER TO postgres;

--
-- Name: ta_city_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_city_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_city_id_seq OWNER TO postgres;

--
-- Name: ta_city_id_seq; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_city_id_seq OWNED BY ta_city.id;


--
-- Name: ta_country; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_country (
    code character varying(3) NOT NULL,
    name character varying(52) NOT NULL
);


ALTER TABLE ta_country OWNER TO postgres;

--
-- Name: ta_grade; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_grade (
    grade character(5) NOT NULL,
    flight character(5),
    train character(5),
    taxi character(5),
    ferry character(5),
    ship character(5),
    rent character(5)
);


ALTER TABLE ta_grade OWNER TO postgres;

--
-- Name: ta_livingcost; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_livingcost (
    id integer NOT NULL,
    reqid character varying(30),
    nikreq character varying(30),
    niktraveler character varying[],
    basic_rate_bs_pa character varying[],
    pocket_allowance integer[],
    basic_rate_bs character varying[],
    basic_rate integer[],
    basic_rate_bs_ha character varying[],
    hotel_allowance integer[],
    basic_rate_bs_as character varying[],
    basic_rate_as integer[],
    basic_rate_bs_ha_as character varying[],
    hotel_allowance_as integer[],
    total_at_cost_system integer[],
    total_allowance_system integer[],
    total_total_at_cost_system integer,
    total_total_allowance_system integer
);


ALTER TABLE ta_livingcost OWNER TO postgres;

--
-- Name: ta_livingcost_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_livingcost_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_livingcost_id_seq OWNER TO postgres;

--
-- Name: ta_livingcost_id_seq; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_livingcost_id_seq OWNED BY ta_livingcost.id;


--
-- Name: ta_location; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_location (
    id integer NOT NULL,
    name character varying
);


ALTER TABLE ta_location OWNER TO postgres;

--
-- Name: ta_location_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_location_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_location_id_seq OWNER TO postgres;

--
-- Name: ta_location_id_seq; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_location_id_seq OWNED BY ta_location.id;


--
-- Name: ta_notification; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_notification (
    id integer NOT NULL,
    reqnik character varying(50) NOT NULL,
    reqid character varying(50) NOT NULL,
    "time" integer,
    approval1 character varying(30),
    approval2 character varying(30),
    approval3 character varying(30),
    approval4 character varying(30),
    statusreq ty_reqstatus DEFAULT 'Approv'::ty_reqstatus NOT NULL,
    notceknik character varying,
    notcekapp character varying
);


ALTER TABLE ta_notification OWNER TO postgres;

--
-- Name: ta_notification_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_notification_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_notification_id_seq OWNER TO postgres;

--
-- Name: ta_notification_id_seq; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_notification_id_seq OWNED BY ta_notification.id;


--
-- Name: ta_realization; Type: TABLE; Schema: program; Owner: postgres
--

CREATE TABLE ta_realization (
    id integer NOT NULL,
    reqid character varying(50) NOT NULL,
    reqnik character varying(50) NOT NULL,
    travelnik character varying(50)[],
    loctdept character varying(50)[],
    loctdeptfrom character varying(50)[],
    loctdeptto character varying(50)[],
    timedeptpertrip integer[],
    costdept numeric[],
    currencydept character varying(50)[],
    transportdept character varying(50)[],
    datedept date,
    loctarrive character varying(50)[],
    loctarrivefrom character varying(50)[],
    loctarriveto character varying(50)[],
    timearrivepertrip integer[],
    costarrive numeric[],
    currencyarrive character varying(50)[],
    transportarrive character varying(50)[],
    datearrive date,
    transports character varying(50)[],
    totaltransport text,
    totaltime integer,
    totalday integer,
    othercost numeric,
    trainingcost numeric,
    reqtime timestamp with time zone,
    totalcost numeric[],
    totalcurrency character varying[],
    approvenik character varying(30),
    timeapprove timestamp with time zone,
    caption text,
    statusreq ty_reqstatus DEFAULT 'Pending'::ty_reqstatus,
    rute character varying(20),
    homebase integer,
    statuspocket integer,
    photodept character varying[],
    photoarrive character varying[],
    gps numeric[]
);


ALTER TABLE ta_realization OWNER TO postgres;

--
-- Name: ta_realization_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_realization_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_realization_id_seq OWNER TO postgres;

--
-- Name: ta_realization_id_seq; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_realization_id_seq OWNED BY ta_realization.id;


--
-- Name: ta_request_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_request_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_request_id_seq OWNER TO postgres;

--
-- Name: ta_request_id_seq; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_request_id_seq OWNED BY ta_request.id;


--
-- Name: ta_timecost_system_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_timecost_system_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_timecost_system_id_seq OWNER TO postgres;

--
-- Name: ta_timecost_system_id_seq; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_timecost_system_id_seq OWNED BY ta_timecost_system.id;


--
-- Name: ta_tipsandtrick_id_seq; Type: SEQUENCE; Schema: program; Owner: postgres
--

CREATE SEQUENCE ta_tipsandtrick_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_tipsandtrick_id_seq OWNER TO postgres;

--
-- Name: ta_tipsandtrick_id_seq; Type: SEQUENCE OWNED BY; Schema: program; Owner: postgres
--

ALTER SEQUENCE ta_tipsandtrick_id_seq OWNED BY ta_tipsandtrick.id;


--
-- Name: vi_department; Type: VIEW; Schema: program; Owner: postgres
--

CREATE VIEW vi_department AS
 SELECT ta_department.deptid,
    ta_department.deptname
   FROM ta_department;


ALTER TABLE vi_department OWNER TO postgres;

--
-- Name: vi_position; Type: VIEW; Schema: program; Owner: postgres
--

CREATE VIEW vi_position AS
 SELECT ta_position.postid,
    ta_position.postname
   FROM ta_position;


ALTER TABLE vi_position OWNER TO postgres;

--
-- Name: vi_user; Type: VIEW; Schema: program; Owner: postgres
--

CREATE VIEW vi_user AS
 SELECT ta_user.nik,
    ta_user.password,
    ta_user.level,
    ta_user.status
   FROM ta_user;


ALTER TABLE vi_user OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: a; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE a (
    id integer NOT NULL,
    aaa text
);


ALTER TABLE a OWNER TO postgres;

--
-- Name: a_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE a_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE a_id_seq OWNER TO postgres;

--
-- Name: a_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE a_id_seq OWNED BY a.id;


--
-- Name: array_code; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE array_code (
    "array" character varying(20)[]
);


ALTER TABLE array_code OWNER TO postgres;

--
-- Name: count_id; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE count_id (
    id integer
);


ALTER TABLE count_id OWNER TO postgres;

--
-- Name: idkonfig; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE idkonfig
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE idkonfig OWNER TO postgres;

--
-- Name: latihan; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE latihan
    START WITH 6
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE latihan OWNER TO postgres;

--
-- Name: my_table; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE my_table (
    id integer NOT NULL,
    val character varying(64)
);


ALTER TABLE my_table OWNER TO postgres;

--
-- Name: ta_destination; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_destination (
    code character(8) NOT NULL,
    area character(8) NOT NULL,
    currency character(8) NOT NULL,
    constant numeric NOT NULL
);


ALTER TABLE ta_destination OWNER TO postgres;

--
-- Name: ta_karyawan_idkaryawan_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ta_karyawan_idkaryawan_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_karyawan_idkaryawan_seq OWNER TO postgres;

--
-- Name: ta_konfig; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_konfig (
    idkonfig integer NOT NULL,
    idlokasi character varying(35) NOT NULL,
    minimaltingkat integer,
    maksimaltingkat integer,
    hari integer,
    allowanceson numeric(9,2),
    allowance numeric(9,2),
    meal numeric(9,2),
    transport numeric(9,2),
    phone numeric(9,2),
    laundry numeric(9,2),
    airporttax numeric(9,2),
    seaporttax numeric(9,2),
    allowanceovernight numeric(9,2)
);


ALTER TABLE ta_konfig OWNER TO postgres;

--
-- Name: ta_log_ta_departemen; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_log_ta_departemen (
    log_id integer NOT NULL,
    log_time timestamp without time zone,
    log_action character varying(20),
    iddepartemen character varying(35),
    namadepartemen character varying(30)
);


ALTER TABLE ta_log_ta_departemen OWNER TO postgres;

--
-- Name: ta_log_ta_departemen_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ta_log_ta_departemen_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_log_ta_departemen_log_id_seq OWNER TO postgres;

--
-- Name: ta_log_ta_departemen_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE ta_log_ta_departemen_log_id_seq OWNED BY ta_log_ta_departemen.log_id;


--
-- Name: ta_log_ta_jabatan; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_log_ta_jabatan (
    log_id integer NOT NULL,
    log_time timestamp without time zone,
    log_action character varying(20),
    idjabatan character varying(35),
    namajabatan character varying(30)
);


ALTER TABLE ta_log_ta_jabatan OWNER TO postgres;

--
-- Name: ta_log_ta_jabatan_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ta_log_ta_jabatan_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_log_ta_jabatan_log_id_seq OWNER TO postgres;

--
-- Name: ta_log_ta_jabatan_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE ta_log_ta_jabatan_log_id_seq OWNED BY ta_log_ta_jabatan.log_id;


--
-- Name: ta_log_ta_karyawan; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_log_ta_karyawan (
    log_id integer NOT NULL,
    log_time timestamp without time zone,
    log_action character varying(20),
    nik character varying(35),
    nama character varying(25),
    email character varying(50),
    idtelegram character(16),
    iddepartemen character varying(25),
    idjabatan character varying(25),
    tingkat integer,
    token character(10)
);


ALTER TABLE ta_log_ta_karyawan OWNER TO postgres;

--
-- Name: ta_log_ta_karyawan_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ta_log_ta_karyawan_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_log_ta_karyawan_log_id_seq OWNER TO postgres;

--
-- Name: ta_log_ta_karyawan_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE ta_log_ta_karyawan_log_id_seq OWNED BY ta_log_ta_karyawan.log_id;


--
-- Name: ta_log_ta_konfig; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_log_ta_konfig (
    log_id integer NOT NULL,
    log_time timestamp without time zone,
    log_action character varying(20),
    idkonfig integer,
    idlokasi character varying(30),
    minimaltingkat integer,
    maksimaltingkat integer,
    hari integer,
    allowanceson numeric,
    allowance numeric,
    meal numeric,
    transport numeric,
    phone numeric,
    laundry numeric,
    airporttax numeric,
    seaporttax numeric,
    allowanceovernight numeric
);


ALTER TABLE ta_log_ta_konfig OWNER TO postgres;

--
-- Name: ta_log_ta_konfig_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ta_log_ta_konfig_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_log_ta_konfig_log_id_seq OWNER TO postgres;

--
-- Name: ta_log_ta_konfig_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE ta_log_ta_konfig_log_id_seq OWNED BY ta_log_ta_konfig.log_id;


--
-- Name: ta_log_ta_pengguna; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_log_ta_pengguna (
    log_id integer NOT NULL,
    log_time timestamp without time zone,
    log_action character varying(20),
    nik character varying(35),
    katasandi character varying(35),
    level ty_level,
    status ty_status
);


ALTER TABLE ta_log_ta_pengguna OWNER TO postgres;

--
-- Name: ta_log_ta_pengguna_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ta_log_ta_pengguna_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_log_ta_pengguna_log_id_seq OWNER TO postgres;

--
-- Name: ta_log_ta_pengguna_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE ta_log_ta_pengguna_log_id_seq OWNED BY ta_log_ta_pengguna.log_id;


--
-- Name: ta_log_ta_permintaanpergipulang; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_log_ta_permintaanpergipulang (
    log_id integer NOT NULL,
    log_time timestamp without time zone,
    log_action character varying(20),
    idpermintaan character varying(35),
    nikpengaju character varying(25),
    nikpejalan character varying[],
    lokasipergi character varying[],
    lokasipulang character varying[],
    waktupermintaan date
);


ALTER TABLE ta_log_ta_permintaanpergipulang OWNER TO postgres;

--
-- Name: ta_log_ta_permintaanpergipulang_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ta_log_ta_permintaanpergipulang_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ta_log_ta_permintaanpergipulang_log_id_seq OWNER TO postgres;

--
-- Name: ta_log_ta_permintaanpergipulang_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE ta_log_ta_permintaanpergipulang_log_id_seq OWNED BY ta_log_ta_permintaanpergipulang.log_id;


--
-- Name: ta_permintaan; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ta_permintaan (
    idpermintaan character varying(35),
    allowanceson numeric[],
    allowance numeric[],
    meal numeric[],
    transport numeric[],
    phone numeric[],
    laundry numeric[],
    airporttax numeric[],
    seaporttax numeric[],
    othercost numeric[],
    trainingcost numeric(10,2),
    totalidr numeric(10,2),
    totalsgd numeric(10,2),
    totalusd numeric(10,2),
    totaleur numeric(10,2),
    totalidrgrup numeric(10,2),
    totalsgdgrup numeric(10,2),
    totalusdgrup numeric(10,2),
    totaleurgrup numeric(10,2),
    nikpenerima character varying(35),
    waktuditerima timestamp without time zone,
    keterangan text,
    statuspermintaan ty_statuspermintaan
);


ALTER TABLE ta_permintaan OWNER TO postgres;

--
-- Name: vi_departemen; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vi_departemen AS
 SELECT ta_departemen.iddepartemen,
    ta_departemen.namadepartemen
   FROM ta_departemen;


ALTER TABLE vi_departemen OWNER TO postgres;

--
-- Name: vi_jabatan; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vi_jabatan AS
 SELECT ta_jabatan.idjabatan,
    ta_jabatan.namajabatan
   FROM ta_jabatan;


ALTER TABLE vi_jabatan OWNER TO postgres;

--
-- Name: vi_konfig; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vi_konfig AS
 SELECT a.idkonfig,
    a.idlokasi,
    a.minimaltingkat,
    a.maksimaltingkat,
    a.hari,
    a.allowanceson,
    a.allowance,
    a.meal,
    a.transport,
    a.phone,
    a.laundry,
    a.airporttax,
    a.seaporttax,
    a.allowanceovernight,
    b.namalokasi
   FROM ta_konfig a,
    ta_kodelokasi b
  WHERE ((a.idlokasi)::bpchar = (b.idlokasi)::bpchar);


ALTER TABLE vi_konfig OWNER TO postgres;

--
-- Name: vi_matauang; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vi_matauang AS
 SELECT ta_matauang.idmatauang,
    ta_matauang.namamatauang,
    ta_matauang.simbolmatauang
   FROM ta_matauang;


ALTER TABLE vi_matauang OWNER TO postgres;

--
-- Name: vi_pengguna; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vi_pengguna AS
 SELECT ta_pengguna.nik,
    ta_pengguna.katasandi,
    ta_pengguna.level,
    ta_pengguna.status
   FROM ta_pengguna
  WITH CASCADED CHECK OPTION;


ALTER TABLE vi_pengguna OWNER TO postgres;

--
-- Name: vi_persetujuan; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW vi_persetujuan AS
 SELECT ta_persetujuan.nikpeminta,
    ta_persetujuan.nikpenerima1,
    ta_persetujuan.nikpenerima2,
    ta_persetujuan.nikpenerima3,
    ta_persetujuan.nikpenerima4,
    ta_persetujuan.statuspersetujuan
   FROM ta_persetujuan;


ALTER TABLE vi_persetujuan OWNER TO postgres;

SET search_path = program, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_area_code ALTER COLUMN id SET DEFAULT nextval('ta_area_code_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_basic_rate ALTER COLUMN id SET DEFAULT nextval('ta_basic_rate_id_seq1'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_basic_rate_hotel ALTER COLUMN id SET DEFAULT nextval('ta_basic_rate_hotel_id_seq1'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_basic_rate_pocket_allowance ALTER COLUMN id SET DEFAULT nextval('ta_basic_rate_pocket_allowance_id_seq1'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_city ALTER COLUMN id SET DEFAULT nextval('ta_city_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_livingcost ALTER COLUMN id SET DEFAULT nextval('ta_livingcost_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_location ALTER COLUMN id SET DEFAULT nextval('ta_location_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_notification ALTER COLUMN id SET DEFAULT nextval('ta_notification_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_realization ALTER COLUMN id SET DEFAULT nextval('ta_realization_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_request ALTER COLUMN id SET DEFAULT nextval('ta_request_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_timecost_system ALTER COLUMN id SET DEFAULT nextval('ta_timecost_system_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_tipsandtrick ALTER COLUMN id SET DEFAULT nextval('ta_tipsandtrick_id_seq'::regclass);


SET search_path = public, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY a ALTER COLUMN id SET DEFAULT nextval('a_id_seq'::regclass);


--
-- Name: log_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_log_ta_departemen ALTER COLUMN log_id SET DEFAULT nextval('ta_log_ta_departemen_log_id_seq'::regclass);


--
-- Name: log_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_log_ta_jabatan ALTER COLUMN log_id SET DEFAULT nextval('ta_log_ta_jabatan_log_id_seq'::regclass);


--
-- Name: log_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_log_ta_karyawan ALTER COLUMN log_id SET DEFAULT nextval('ta_log_ta_karyawan_log_id_seq'::regclass);


--
-- Name: log_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_log_ta_konfig ALTER COLUMN log_id SET DEFAULT nextval('ta_log_ta_konfig_log_id_seq'::regclass);


--
-- Name: log_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_log_ta_pengguna ALTER COLUMN log_id SET DEFAULT nextval('ta_log_ta_pengguna_log_id_seq'::regclass);


--
-- Name: log_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_log_ta_permintaanpergipulang ALTER COLUMN log_id SET DEFAULT nextval('ta_log_ta_permintaanpergipulang_log_id_seq'::regclass);


SET search_path = program, pg_catalog;

--
-- Data for Name: ta_approval; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_approval (reqnik, approval1, approval2, approval3, approval4, requeststatus) FROM stdin;
032013055	032013008	032013006	032013010	032013012	nonactive
\.


--
-- Data for Name: ta_area_code; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_area_code (id, area_code, name) FROM stdin;
1	BR02	Indo
2	BR03	Out Indo
\.


--
-- Name: ta_area_code_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_area_code_id_seq', 2, true);


--
-- Data for Name: ta_basic_rate; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_basic_rate (id, basic_rate, frequency, homebase, id_area_code, value, receipt) FROM stdin;
9	LA	3.00	0.00	BR02	100.00	yes
10	LA	3.00	0.00	BR03	20.00	yes
1	MA-Breakfast	1.00	1.00	BR02	75.00	no
2	MA-Breakfast	1.00	1.00	BR03	25.00	no
3	MA-Lunch	1.00	1.00	BR02	100.00	no
4	MA-Lunch	1.00	1.00	BR03	35.00	no
5	MA-Dinner	1.00	1.00	BR02	125.00	no
6	MA-Dinner	1.00	1.00	BR03	40.00	no
7	TA-Taxi	1.00	1.00	BR02	125.00	no
8	TA-Taxi	1.00	1.00	BR03	40.00	no
12	CA	3.00	0.00	BR03	50.00	no
11	CA	3.00	0.00	BR02	100.00	no
\.


--
-- Data for Name: ta_basic_rate_hotel; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_basic_rate_hotel (id, basic_rate, frequency, homebase, id_area_code, value, min, max) FROM stdin;
3	HA DAY 2-5	1.00	0.00	BR02	500.00	2	5
4	HA DAY 2-5	1.00	0.00	BR03	150.00	2	5
5	HA DAY 6-All	1.00	0.00	BR02	500.00	6	30
6	HA DAY 6-All	1.00	0.00	BR03	150.00	6	30
1	HA DAY 1	1.00	0.00	BR02	600.00	0	1
2	HA DAY 1	1.00	0.00	BR03	150.00	0	1
\.


--
-- Name: ta_basic_rate_hotel_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_basic_rate_hotel_id_seq', 1, false);


--
-- Name: ta_basic_rate_hotel_id_seq1; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_basic_rate_hotel_id_seq1', 6, true);


--
-- Name: ta_basic_rate_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_basic_rate_id_seq', 1, false);


--
-- Name: ta_basic_rate_id_seq1; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_basic_rate_id_seq1', 12, true);


--
-- Data for Name: ta_basic_rate_pocket_allowance; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_basic_rate_pocket_allowance (id, basic_rate, frequency, homebase, id_area_code, value, min, max) FROM stdin;
1	PA DAY 1	1.00	0.00	BR02	300.00	0	1
2	PA DAY 1	1.00	0.00	BR03	40.00	0	1
3	PA DAY 2-5	1.00	0.00	BR02	250.00	2	5
4	PA DAY 2-5	1.00	0.00	BR03	35.00	2	5
5	PA DAY 6-All	1.00	0.00	BR02	250.00	6	30
6	PA DAY 6-All	1.00	0.00	BR03	25.00	6	30
\.


--
-- Name: ta_basic_rate_pocket_allowance_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_basic_rate_pocket_allowance_id_seq', 1, false);


--
-- Name: ta_basic_rate_pocket_allowance_id_seq1; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_basic_rate_pocket_allowance_id_seq1', 6, true);


--
-- Data for Name: ta_city; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_city (id, name, countrycode) FROM stdin;
3586	Kabul	AFG
3587	Qandahar	AFG
3588	Herat	AFG
3589	Mazar-e-Sharif	AFG
3590	Amsterdam	NLD
3591	Rotterdam	NLD
3592	Haag	NLD
3593	Utrecht	NLD
3594	Eindhoven	NLD
3595	Tilburg	NLD
3596	Groningen	NLD
3597	Breda	NLD
3598	Apeldoorn	NLD
3599	Nijmegen	NLD
3600	Enschede	NLD
3601	Haarlem	NLD
3602	Almere	NLD
3603	Arnhem	NLD
3604	Zaanstad	NLD
3605	´s-Hertogenbosch	NLD
3606	Amersfoort	NLD
3607	Maastricht	NLD
3608	Dordrecht	NLD
3609	Leiden	NLD
3610	Haarlemmermeer	NLD
3611	Zoetermeer	NLD
3612	Emmen	NLD
3613	Zwolle	NLD
3614	Ede	NLD
3615	Delft	NLD
3616	Heerlen	NLD
3617	Alkmaar	NLD
3618	Willemstad	ANT
3619	Tirana	ALB
3620	Alger	DZA
3621	Oran	DZA
3622	Constantine	DZA
3623	Annaba	DZA
3624	Batna	DZA
3625	Sétif	DZA
3626	Sidi Bel Abbès	DZA
3627	Skikda	DZA
3628	Biskra	DZA
3629	Blida (el-Boulaida)	DZA
3630	Béjaïa	DZA
3631	Mostaganem	DZA
3632	Tébessa	DZA
3633	Tlemcen (Tilimsen)	DZA
3634	Béchar	DZA
3635	Tiaret	DZA
3636	Ech-Chleff (el-Asnam)	DZA
3637	Ghardaïa	DZA
3638	Tafuna	ASM
3639	Fagatogo	ASM
3640	Andorra la Vella	AND
3641	Luanda	AGO
3642	Huambo	AGO
3643	Lobito	AGO
3644	Benguela	AGO
3645	Namibe	AGO
3646	South Hill	AIA
3647	The Valley	AIA
3648	Saint John´s	ATG
3649	Dubai	ARE
3650	Abu Dhabi	ARE
3651	Sharja	ARE
3652	al-Ayn	ARE
3653	Ajman	ARE
3654	Buenos Aires	ARG
3655	La Matanza	ARG
3656	Córdoba	ARG
3657	Rosario	ARG
3658	Lomas de Zamora	ARG
3659	Quilmes	ARG
3660	Almirante Brown	ARG
3661	La Plata	ARG
3662	Mar del Plata	ARG
3663	San Miguel de Tucumán	ARG
3664	Lanús	ARG
3665	Merlo	ARG
3666	General San Martín	ARG
3667	Salta	ARG
3668	Moreno	ARG
3669	Santa Fé	ARG
3670	Avellaneda	ARG
3671	Tres de Febrero	ARG
3672	Morón	ARG
3673	Florencio Varela	ARG
3674	San Isidro	ARG
3675	Tigre	ARG
3676	Malvinas Argentinas	ARG
3677	Vicente López	ARG
3678	Berazategui	ARG
3679	Corrientes	ARG
3680	San Miguel	ARG
3681	Bahía Blanca	ARG
3682	Esteban Echeverría	ARG
3683	Resistencia	ARG
3684	José C. Paz	ARG
3685	Paraná	ARG
3686	Godoy Cruz	ARG
3687	Posadas	ARG
3688	Guaymallén	ARG
3689	Santiago del Estero	ARG
3690	San Salvador de Jujuy	ARG
3691	Hurlingham	ARG
3692	Neuquén	ARG
3693	Ituzaingó	ARG
3694	San Fernando	ARG
3695	Formosa	ARG
3696	Las Heras	ARG
3697	La Rioja	ARG
3698	San Fernando del Valle de Cata	ARG
3699	Río Cuarto	ARG
3700	Comodoro Rivadavia	ARG
3701	Mendoza	ARG
3702	San Nicolás de los Arroyos	ARG
3703	San Juan	ARG
3704	Escobar	ARG
3705	Concordia	ARG
3706	Pilar	ARG
3707	San Luis	ARG
3708	Ezeiza	ARG
3709	San Rafael	ARG
3710	Tandil	ARG
3711	Yerevan	ARM
3712	Gjumri	ARM
3713	Vanadzor	ARM
3714	Oranjestad	ABW
3715	Sydney	AUS
3716	Melbourne	AUS
3717	Brisbane	AUS
3718	Perth	AUS
3719	Adelaide	AUS
3720	Canberra	AUS
3721	Gold Coast	AUS
3722	Newcastle	AUS
3723	Central Coast	AUS
3724	Wollongong	AUS
3725	Hobart	AUS
3726	Geelong	AUS
3727	Townsville	AUS
3728	Cairns	AUS
3729	Baku	AZE
3730	Gäncä	AZE
3731	Sumqayit	AZE
3732	Mingäçevir	AZE
3733	Nassau	BHS
3734	al-Manama	BHR
3735	Dhaka	BGD
3736	Chittagong	BGD
3737	Khulna	BGD
3738	Rajshahi	BGD
3739	Narayanganj	BGD
3740	Rangpur	BGD
3741	Mymensingh	BGD
3742	Barisal	BGD
3743	Tungi	BGD
3744	Jessore	BGD
3745	Comilla	BGD
3746	Nawabganj	BGD
3747	Dinajpur	BGD
3748	Bogra	BGD
3749	Sylhet	BGD
3750	Brahmanbaria	BGD
3751	Tangail	BGD
3752	Jamalpur	BGD
3753	Pabna	BGD
3754	Naogaon	BGD
3755	Sirajganj	BGD
3756	Narsinghdi	BGD
3757	Saidpur	BGD
3758	Gazipur	BGD
3759	Bridgetown	BRB
3760	Antwerpen	BEL
3761	Gent	BEL
3762	Charleroi	BEL
3763	Liège	BEL
3764	Bruxelles [Brussel]	BEL
3765	Brugge	BEL
3766	Schaerbeek	BEL
3767	Namur	BEL
3768	Mons	BEL
3769	Belize City	BLZ
3770	Belmopan	BLZ
3771	Cotonou	BEN
3772	Porto-Novo	BEN
3773	Djougou	BEN
3774	Parakou	BEN
3775	Saint George	BMU
3776	Hamilton	BMU
3777	Thimphu	BTN
3778	Santa Cruz de la Sierra	BOL
3779	La Paz	BOL
3780	El Alto	BOL
3781	Cochabamba	BOL
3782	Oruro	BOL
3783	Sucre	BOL
3784	Potosí	BOL
3785	Tarija	BOL
3786	Sarajevo	BIH
3787	Banja Luka	BIH
3788	Zenica	BIH
3789	Gaborone	BWA
3790	Francistown	BWA
3791	São Paulo	BRA
3792	Rio de Janeiro	BRA
3793	Salvador	BRA
3794	Belo Horizonte	BRA
3795	Fortaleza	BRA
3796	Brasília	BRA
3797	Curitiba	BRA
3798	Recife	BRA
3799	Porto Alegre	BRA
3800	Manaus	BRA
3801	Belém	BRA
3802	Guarulhos	BRA
3803	Goiânia	BRA
3804	Campinas	BRA
3805	São Gonçalo	BRA
3806	Nova Iguaçu	BRA
3807	São Luís	BRA
3808	Maceió	BRA
3809	Duque de Caxias	BRA
3810	São Bernardo do Campo	BRA
3811	Teresina	BRA
3812	Natal	BRA
3813	Osasco	BRA
3814	Campo Grande	BRA
3815	Santo André	BRA
3816	João Pessoa	BRA
3817	Jaboatão dos Guararapes	BRA
3818	Contagem	BRA
3819	São José dos Campos	BRA
3820	Uberlândia	BRA
3821	Feira de Santana	BRA
3822	Ribeirão Preto	BRA
3823	Sorocaba	BRA
3824	Niterói	BRA
3825	Cuiabá	BRA
3826	Juiz de Fora	BRA
3827	Aracaju	BRA
3828	São João de Meriti	BRA
3829	Londrina	BRA
3830	Joinville	BRA
3831	Belford Roxo	BRA
3832	Santos	BRA
3833	Ananindeua	BRA
3834	Campos dos Goytacazes	BRA
3835	Mauá	BRA
3836	Carapicuíba	BRA
3837	Olinda	BRA
3838	Campina Grande	BRA
3839	São José do Rio Preto	BRA
3840	Caxias do Sul	BRA
3841	Moji das Cruzes	BRA
3842	Diadema	BRA
3843	Aparecida de Goiânia	BRA
3844	Piracicaba	BRA
3845	Cariacica	BRA
3846	Vila Velha	BRA
3847	Pelotas	BRA
3848	Bauru	BRA
3849	Porto Velho	BRA
3850	Serra	BRA
3851	Betim	BRA
3852	Jundíaí	BRA
3853	Canoas	BRA
3854	Franca	BRA
3855	São Vicente	BRA
3856	Maringá	BRA
3857	Montes Claros	BRA
3858	Anápolis	BRA
3859	Florianópolis	BRA
3860	Petrópolis	BRA
3861	Itaquaquecetuba	BRA
3862	Vitória	BRA
3863	Ponta Grossa	BRA
3864	Rio Branco	BRA
3865	Foz do Iguaçu	BRA
3866	Macapá	BRA
3867	Ilhéus	BRA
3868	Vitória da Conquista	BRA
3869	Uberaba	BRA
3870	Paulista	BRA
3871	Limeira	BRA
3872	Blumenau	BRA
3873	Caruaru	BRA
3874	Santarém	BRA
3875	Volta Redonda	BRA
3876	Novo Hamburgo	BRA
3877	Caucaia	BRA
3878	Santa Maria	BRA
3879	Cascavel	BRA
3880	Guarujá	BRA
3881	Ribeirão das Neves	BRA
3882	Governador Valadares	BRA
3883	Taubaté	BRA
3884	Imperatriz	BRA
3885	Gravataí	BRA
3886	Embu	BRA
3887	Mossoró	BRA
3888	Várzea Grande	BRA
3889	Petrolina	BRA
3890	Barueri	BRA
3891	Viamão	BRA
3892	Ipatinga	BRA
3893	Juazeiro	BRA
3894	Juazeiro do Norte	BRA
3895	Taboão da Serra	BRA
3896	São José dos Pinhais	BRA
3897	Magé	BRA
3898	Suzano	BRA
3899	São Leopoldo	BRA
3900	Marília	BRA
3901	São Carlos	BRA
3902	Sumaré	BRA
3903	Presidente Prudente	BRA
3904	Divinópolis	BRA
3905	Sete Lagoas	BRA
3906	Rio Grande	BRA
3907	Itabuna	BRA
3908	Jequié	BRA
3909	Arapiraca	BRA
3910	Colombo	BRA
3911	Americana	BRA
3912	Alvorada	BRA
3913	Araraquara	BRA
3914	Itaboraí	BRA
3915	Santa Bárbara d´Oeste	BRA
3916	Nova Friburgo	BRA
3917	Jacareí	BRA
3918	Araçatuba	BRA
3919	Barra Mansa	BRA
3920	Praia Grande	BRA
3921	Marabá	BRA
3922	Criciúma	BRA
3923	Boa Vista	BRA
3924	Passo Fundo	BRA
3925	Dourados	BRA
3926	Santa Luzia	BRA
3927	Rio Claro	BRA
3928	Maracanaú	BRA
3929	Guarapuava	BRA
3930	Rondonópolis	BRA
3931	São José	BRA
3932	Cachoeiro de Itapemirim	BRA
3933	Nilópolis	BRA
3934	Itapevi	BRA
3935	Cabo de Santo Agostinho	BRA
3936	Camaçari	BRA
3937	Sobral	BRA
3938	Itajaí	BRA
3939	Chapecó	BRA
3940	Cotia	BRA
3941	Lages	BRA
3942	Ferraz de Vasconcelos	BRA
3943	Indaiatuba	BRA
3944	Hortolândia	BRA
3945	Caxias	BRA
3946	São Caetano do Sul	BRA
3947	Itu	BRA
3948	Nossa Senhora do Socorro	BRA
3949	Parnaíba	BRA
3950	Poços de Caldas	BRA
3951	Teresópolis	BRA
3952	Barreiras	BRA
3953	Castanhal	BRA
3954	Alagoinhas	BRA
3955	Itapecerica da Serra	BRA
3956	Uruguaiana	BRA
3957	Paranaguá	BRA
3958	Ibirité	BRA
3959	Timon	BRA
3960	Luziânia	BRA
3961	Macaé	BRA
3962	Teófilo Otoni	BRA
3963	Moji-Guaçu	BRA
3964	Palmas	BRA
3965	Pindamonhangaba	BRA
3966	Francisco Morato	BRA
3967	Bagé	BRA
3968	Sapucaia do Sul	BRA
3969	Cabo Frio	BRA
3970	Itapetininga	BRA
3971	Patos de Minas	BRA
3972	Camaragibe	BRA
3973	Bragança Paulista	BRA
3974	Queimados	BRA
3975	Araguaína	BRA
3976	Garanhuns	BRA
3977	Vitória de Santo Antão	BRA
3978	Santa Rita	BRA
3979	Barbacena	BRA
3980	Abaetetuba	BRA
3981	Jaú	BRA
3982	Lauro de Freitas	BRA
3983	Franco da Rocha	BRA
3984	Teixeira de Freitas	BRA
3985	Varginha	BRA
3986	Ribeirão Pires	BRA
3987	Sabará	BRA
3988	Catanduva	BRA
3989	Rio Verde	BRA
3990	Botucatu	BRA
3991	Colatina	BRA
3992	Santa Cruz do Sul	BRA
3993	Linhares	BRA
3994	Apucarana	BRA
3995	Barretos	BRA
3996	Guaratinguetá	BRA
3997	Cachoeirinha	BRA
3998	Codó	BRA
3999	Jaraguá do Sul	BRA
4000	Cubatão	BRA
4001	Itabira	BRA
4002	Itaituba	BRA
4003	Araras	BRA
4004	Resende	BRA
4005	Atibaia	BRA
4006	Pouso Alegre	BRA
4007	Toledo	BRA
4008	Crato	BRA
4009	Passos	BRA
4010	Araguari	BRA
4011	São José de Ribamar	BRA
4012	Pinhais	BRA
4013	Sertãozinho	BRA
4014	Conselheiro Lafaiete	BRA
4015	Paulo Afonso	BRA
4016	Angra dos Reis	BRA
4017	Eunápolis	BRA
4018	Salto	BRA
4019	Ourinhos	BRA
4020	Parnamirim	BRA
4021	Jacobina	BRA
4022	Coronel Fabriciano	BRA
4023	Birigui	BRA
4024	Tatuí	BRA
4025	Ji-Paraná	BRA
4026	Bacabal	BRA
4027	Cametá	BRA
4028	Guaíba	BRA
4029	São Lourenço da Mata	BRA
4030	Santana do Livramento	BRA
4031	Votorantim	BRA
4032	Campo Largo	BRA
4033	Patos	BRA
4034	Ituiutaba	BRA
4035	Corumbá	BRA
4036	Palhoça	BRA
4037	Barra do Piraí	BRA
4038	Bento Gonçalves	BRA
4039	Poá	BRA
4040	Águas Lindas de Goiás	BRA
4041	London	GBR
4042	Birmingham	GBR
4043	Glasgow	GBR
4044	Liverpool	GBR
4045	Edinburgh	GBR
4046	Sheffield	GBR
4047	Manchester	GBR
4048	Leeds	GBR
4049	Bristol	GBR
4050	Cardiff	GBR
4051	Coventry	GBR
4052	Leicester	GBR
4053	Bradford	GBR
4054	Belfast	GBR
4055	Nottingham	GBR
4056	Kingston upon Hull	GBR
4057	Plymouth	GBR
4058	Stoke-on-Trent	GBR
4059	Wolverhampton	GBR
4060	Derby	GBR
4061	Swansea	GBR
4062	Southampton	GBR
4063	Aberdeen	GBR
4064	Northampton	GBR
4065	Dudley	GBR
4066	Portsmouth	GBR
4067	Newcastle upon Tyne	GBR
4068	Sunderland	GBR
4069	Luton	GBR
4070	Swindon	GBR
4071	Southend-on-Sea	GBR
4072	Walsall	GBR
4073	Bournemouth	GBR
4074	Peterborough	GBR
4075	Brighton	GBR
4076	Blackpool	GBR
4077	Dundee	GBR
4078	West Bromwich	GBR
4079	Reading	GBR
4080	Oldbury/Smethwick (Warley)	GBR
4081	Middlesbrough	GBR
4082	Huddersfield	GBR
4083	Oxford	GBR
4084	Poole	GBR
4085	Bolton	GBR
4086	Blackburn	GBR
4087	Newport	GBR
4088	Preston	GBR
4089	Stockport	GBR
4090	Norwich	GBR
4091	Rotherham	GBR
4092	Cambridge	GBR
4093	Watford	GBR
4094	Ipswich	GBR
4095	Slough	GBR
4096	Exeter	GBR
4097	Cheltenham	GBR
4098	Gloucester	GBR
4099	Saint Helens	GBR
4100	Sutton Coldfield	GBR
4101	York	GBR
4102	Oldham	GBR
4103	Basildon	GBR
4104	Worthing	GBR
4105	Chelmsford	GBR
4106	Colchester	GBR
4107	Crawley	GBR
4108	Gillingham	GBR
4109	Solihull	GBR
4110	Rochdale	GBR
4111	Birkenhead	GBR
4112	Worcester	GBR
4113	Hartlepool	GBR
4114	Halifax	GBR
4115	Woking/Byfleet	GBR
4116	Southport	GBR
4117	Maidstone	GBR
4118	Eastbourne	GBR
4119	Grimsby	GBR
4120	Saint Helier	GBR
4121	Douglas	GBR
4122	Road Town	VGB
4123	Bandar Seri Begawan	BRN
4124	Sofija	BGR
4125	Plovdiv	BGR
4126	Varna	BGR
4127	Burgas	BGR
4128	Ruse	BGR
4129	Stara Zagora	BGR
4130	Pleven	BGR
4131	Sliven	BGR
4132	Dobric	BGR
4133	Šumen	BGR
4134	Ouagadougou	BFA
4135	Bobo-Dioulasso	BFA
4136	Koudougou	BFA
4137	Bujumbura	BDI
4138	George Town	CYM
4139	Santiago de Chile	CHL
4140	Puente Alto	CHL
4141	Viña del Mar	CHL
4142	Valparaíso	CHL
4143	Talcahuano	CHL
4144	Antofagasta	CHL
4145	San Bernardo	CHL
4146	Temuco	CHL
4147	Concepción	CHL
4148	Rancagua	CHL
4149	Arica	CHL
4150	Talca	CHL
4151	Chillán	CHL
4152	Iquique	CHL
4153	Los Angeles	CHL
4154	Puerto Montt	CHL
4155	Coquimbo	CHL
4156	Osorno	CHL
4157	La Serena	CHL
4158	Calama	CHL
4159	Valdivia	CHL
4160	Punta Arenas	CHL
4161	Copiapó	CHL
4162	Quilpué	CHL
4163	Curicó	CHL
4164	Ovalle	CHL
4165	Coronel	CHL
4166	San Pedro de la Paz	CHL
4167	Melipilla	CHL
4168	Avarua	COK
4169	San José	CRI
4170	Djibouti	DJI
4171	Roseau	DMA
4172	Santo Domingo de Guzmán	DOM
4173	Santiago de los Caballeros	DOM
4174	La Romana	DOM
4175	San Pedro de Macorís	DOM
4176	San Francisco de Macorís	DOM
4177	San Felipe de Puerto Plata	DOM
4178	Guayaquil	ECU
4179	Quito	ECU
4180	Cuenca	ECU
4181	Machala	ECU
4182	Santo Domingo de los Colorados	ECU
4183	Portoviejo	ECU
4184	Ambato	ECU
4185	Manta	ECU
4186	Duran [Eloy Alfaro]	ECU
4187	Ibarra	ECU
4188	Quevedo	ECU
4189	Milagro	ECU
4190	Loja	ECU
4191	Ríobamba	ECU
4192	Esmeraldas	ECU
4193	Cairo	EGY
4194	Alexandria	EGY
4195	Giza	EGY
4196	Shubra al-Khayma	EGY
4197	Port Said	EGY
4198	Suez	EGY
4199	al-Mahallat al-Kubra	EGY
4200	Tanta	EGY
4201	al-Mansura	EGY
4202	Luxor	EGY
4203	Asyut	EGY
4204	Bahtim	EGY
4205	Zagazig	EGY
4206	al-Faiyum	EGY
4207	Ismailia	EGY
4208	Kafr al-Dawwar	EGY
4209	Assuan	EGY
4210	Damanhur	EGY
4211	al-Minya	EGY
4212	Bani Suwayf	EGY
4213	Qina	EGY
4214	Sawhaj	EGY
4215	Shibin al-Kawm	EGY
4216	Bulaq al-Dakrur	EGY
4217	Banha	EGY
4218	Warraq al-Arab	EGY
4219	Kafr al-Shaykh	EGY
4220	Mallawi	EGY
4221	Bilbays	EGY
4222	Mit Ghamr	EGY
4223	al-Arish	EGY
4224	Talkha	EGY
4225	Qalyub	EGY
4226	Jirja	EGY
4227	Idfu	EGY
4228	al-Hawamidiya	EGY
4229	Disuq	EGY
4230	San Salvador	SLV
4231	Santa Ana	SLV
4232	Mejicanos	SLV
4233	Soyapango	SLV
4234	San Miguel	SLV
4235	Nueva San Salvador	SLV
4236	Apopa	SLV
4237	Asmara	ERI
4238	Madrid	ESP
4239	Barcelona	ESP
4240	Valencia	ESP
4241	Sevilla	ESP
4242	Zaragoza	ESP
4243	Málaga	ESP
4244	Bilbao	ESP
4245	Las Palmas de Gran Canaria	ESP
4246	Murcia	ESP
4247	Palma de Mallorca	ESP
4248	Valladolid	ESP
4249	Córdoba	ESP
4250	Vigo	ESP
4251	Alicante [Alacant]	ESP
4252	Gijón	ESP
4253	L´Hospitalet de Llobregat	ESP
4254	Granada	ESP
4255	A Coruña (La Coruña)	ESP
4256	Vitoria-Gasteiz	ESP
4257	Santa Cruz de Tenerife	ESP
4258	Badalona	ESP
4259	Oviedo	ESP
4260	Móstoles	ESP
4261	Elche [Elx]	ESP
4262	Sabadell	ESP
4263	Santander	ESP
4264	Jerez de la Frontera	ESP
4265	Pamplona [Iruña]	ESP
4266	Donostia-San Sebastián	ESP
4267	Cartagena	ESP
4268	Leganés	ESP
4269	Fuenlabrada	ESP
4270	Almería	ESP
4271	Terrassa	ESP
4272	Alcalá de Henares	ESP
4273	Burgos	ESP
4274	Salamanca	ESP
4275	Albacete	ESP
4276	Getafe	ESP
4277	Cádiz	ESP
4278	Alcorcón	ESP
4279	Huelva	ESP
4280	León	ESP
4281	Castellón de la Plana [Castell	ESP
4282	Badajoz	ESP
4283	[San Cristóbal de] la Laguna	ESP
4284	Logroño	ESP
4285	Santa Coloma de Gramenet	ESP
4286	Tarragona	ESP
4287	Lleida (Lérida)	ESP
4288	Jaén	ESP
4289	Ourense (Orense)	ESP
4290	Mataró	ESP
4291	Algeciras	ESP
4292	Marbella	ESP
4293	Barakaldo	ESP
4294	Dos Hermanas	ESP
4295	Santiago de Compostela	ESP
4296	Torrejón de Ardoz	ESP
4297	Cape Town	ZAF
4298	Soweto	ZAF
4299	Johannesburg	ZAF
4300	Port Elizabeth	ZAF
4301	Pretoria	ZAF
4302	Inanda	ZAF
4303	Durban	ZAF
4304	Vanderbijlpark	ZAF
4305	Kempton Park	ZAF
4306	Alberton	ZAF
4307	Pinetown	ZAF
4308	Pietermaritzburg	ZAF
4309	Benoni	ZAF
4310	Randburg	ZAF
4311	Umlazi	ZAF
4312	Bloemfontein	ZAF
4313	Vereeniging	ZAF
4314	Wonderboom	ZAF
4315	Roodepoort	ZAF
4316	Boksburg	ZAF
4317	Klerksdorp	ZAF
4318	Soshanguve	ZAF
4319	Newcastle	ZAF
4320	East London	ZAF
4321	Welkom	ZAF
4322	Kimberley	ZAF
4323	Uitenhage	ZAF
4324	Chatsworth	ZAF
4325	Mdantsane	ZAF
4326	Krugersdorp	ZAF
4327	Botshabelo	ZAF
4328	Brakpan	ZAF
4329	Witbank	ZAF
4330	Oberholzer	ZAF
4331	Germiston	ZAF
4332	Springs	ZAF
4333	Westonaria	ZAF
4334	Randfontein	ZAF
4335	Paarl	ZAF
4336	Potchefstroom	ZAF
4337	Rustenburg	ZAF
4338	Nigel	ZAF
4339	George	ZAF
4340	Ladysmith	ZAF
4341	Addis Abeba	ETH
4342	Dire Dawa	ETH
4343	Nazret	ETH
4344	Gonder	ETH
4345	Dese	ETH
4346	Mekele	ETH
4347	Bahir Dar	ETH
4348	Stanley	FLK
4349	Suva	FJI
4350	Quezon	PHL
4351	Manila	PHL
4352	Kalookan	PHL
4353	Davao	PHL
4354	Cebu	PHL
4355	Zamboanga	PHL
4356	Pasig	PHL
4357	Valenzuela	PHL
4358	Las Piñas	PHL
4359	Antipolo	PHL
4360	Taguig	PHL
4361	Cagayan de Oro	PHL
4362	Parañaque	PHL
4363	Makati	PHL
4364	Bacolod	PHL
4365	General Santos	PHL
4366	Marikina	PHL
4367	Dasmariñas	PHL
4368	Muntinlupa	PHL
4369	Iloilo	PHL
4370	Pasay	PHL
4371	Malabon	PHL
4372	San José del Monte	PHL
4373	Bacoor	PHL
4374	Iligan	PHL
4375	Calamba	PHL
4376	Mandaluyong	PHL
4377	Butuan	PHL
4378	Angeles	PHL
4379	Tarlac	PHL
4380	Mandaue	PHL
4381	Baguio	PHL
4382	Batangas	PHL
4383	Cainta	PHL
4384	San Pedro	PHL
4385	Navotas	PHL
4386	Cabanatuan	PHL
4387	San Fernando	PHL
4388	Lipa	PHL
4389	Lapu-Lapu	PHL
4390	San Pablo	PHL
4391	Biñan	PHL
4392	Taytay	PHL
4393	Lucena	PHL
4394	Imus	PHL
4395	Olongapo	PHL
4396	Binangonan	PHL
4397	Santa Rosa	PHL
4398	Tagum	PHL
4399	Tacloban	PHL
4400	Malolos	PHL
4401	Mabalacat	PHL
4402	Cotabato	PHL
4403	Meycauayan	PHL
4404	Puerto Princesa	PHL
4405	Legazpi	PHL
4406	Silang	PHL
4407	Ormoc	PHL
4408	San Carlos	PHL
4409	Kabankalan	PHL
4410	Talisay	PHL
4411	Valencia	PHL
4412	Calbayog	PHL
4413	Santa Maria	PHL
4414	Pagadian	PHL
4415	Cadiz	PHL
4416	Bago	PHL
4417	Toledo	PHL
4418	Naga	PHL
4419	San Mateo	PHL
4420	Panabo	PHL
4421	Koronadal	PHL
4422	Marawi	PHL
4423	Dagupan	PHL
4424	Sagay	PHL
4425	Roxas	PHL
4426	Lubao	PHL
4427	Digos	PHL
4428	San Miguel	PHL
4429	Malaybalay	PHL
4430	Tuguegarao	PHL
4431	Ilagan	PHL
4432	Baliuag	PHL
4433	Surigao	PHL
4434	San Carlos	PHL
4435	San Juan del Monte	PHL
4436	Tanauan	PHL
4437	Concepcion	PHL
4438	Rodriguez (Montalban)	PHL
4439	Sariaya	PHL
4440	Malasiqui	PHL
4441	General Mariano Alvarez	PHL
4442	Urdaneta	PHL
4443	Hagonoy	PHL
4444	San Jose	PHL
4445	Polomolok	PHL
4446	Santiago	PHL
4447	Tanza	PHL
4448	Ozamis	PHL
4449	Mexico	PHL
4450	San Jose	PHL
4451	Silay	PHL
4452	General Trias	PHL
4453	Tabaco	PHL
4454	Cabuyao	PHL
4455	Calapan	PHL
4456	Mati	PHL
4457	Midsayap	PHL
4458	Cauayan	PHL
4459	Gingoog	PHL
4460	Dumaguete	PHL
4461	San Fernando	PHL
4462	Arayat	PHL
4463	Bayawan (Tulong)	PHL
4464	Kidapawan	PHL
4465	Daraga (Locsin)	PHL
4466	Marilao	PHL
4467	Malita	PHL
4468	Dipolog	PHL
4469	Cavite	PHL
4470	Danao	PHL
4471	Bislig	PHL
4472	Talavera	PHL
4473	Guagua	PHL
4474	Bayambang	PHL
4475	Nasugbu	PHL
4476	Baybay	PHL
4477	Capas	PHL
4478	Sultan Kudarat	PHL
4479	Laoag	PHL
4480	Bayugan	PHL
4481	Malungon	PHL
4482	Santa Cruz	PHL
4483	Sorsogon	PHL
4484	Candelaria	PHL
4485	Ligao	PHL
4486	Tórshavn	FRO
4487	Libreville	GAB
4488	Serekunda	GMB
4489	Banjul	GMB
4490	Tbilisi	GEO
4491	Kutaisi	GEO
4492	Rustavi	GEO
4493	Batumi	GEO
4494	Sohumi	GEO
4495	Accra	GHA
4496	Kumasi	GHA
4497	Tamale	GHA
4498	Tema	GHA
4499	Sekondi-Takoradi	GHA
4500	Gibraltar	GIB
4501	Saint George´s	GRD
4502	Nuuk	GRL
4503	Les Abymes	GLP
4504	Basse-Terre	GLP
4505	Tamuning	GUM
4506	Agaña	GUM
4507	Ciudad de Guatemala	GTM
4508	Mixco	GTM
4509	Villa Nueva	GTM
4510	Quetzaltenango	GTM
4511	Conakry	GIN
4512	Bissau	GNB
4513	Georgetown	GUY
4514	Port-au-Prince	HTI
4515	Carrefour	HTI
4516	Delmas	HTI
4517	Le-Cap-Haïtien	HTI
4518	Tegucigalpa	HND
4519	San Pedro Sula	HND
4520	La Ceiba	HND
4521	Kowloon and New Kowloon	HKG
4522	Victoria	HKG
4523	Longyearbyen	SJM
4524	Jakarta	IDN
4525	Surabaya	IDN
4526	Bandung	IDN
4527	Medan	IDN
4528	Palembang	IDN
4529	Tangerang	IDN
4530	Semarang	IDN
4531	Ujung Pandang	IDN
4532	Malang	IDN
4533	Bandar Lampung	IDN
4534	Bekasi	IDN
4535	Padang	IDN
4536	Surakarta	IDN
4537	Banjarmasin	IDN
4538	Pekan Baru	IDN
4539	Denpasar	IDN
4540	Yogyakarta	IDN
4541	Pontianak	IDN
4542	Samarinda	IDN
4543	Jambi	IDN
4544	Depok	IDN
4545	Cimahi	IDN
4546	Balikpapan	IDN
4547	Manado	IDN
4548	Mataram	IDN
4549	Pekalongan	IDN
4550	Tegal	IDN
4551	Bogor	IDN
4552	Ciputat	IDN
4553	Pondokgede	IDN
4554	Cirebon	IDN
4555	Kediri	IDN
4556	Ambon	IDN
4557	Jember	IDN
4558	Cilacap	IDN
4559	Cimanggis	IDN
4560	Pematang Siantar	IDN
4561	Purwokerto	IDN
4562	Ciomas	IDN
4563	Tasikmalaya	IDN
4564	Madiun	IDN
4565	Bengkulu	IDN
4566	Karawang	IDN
4567	Banda Aceh	IDN
4568	Palu	IDN
4569	Pasuruan	IDN
4570	Kupang	IDN
4571	Tebing Tinggi	IDN
4572	Percut Sei Tuan	IDN
4573	Binjai	IDN
4574	Sukabumi	IDN
4575	Waru	IDN
4576	Pangkal Pinang	IDN
4577	Magelang	IDN
4578	Blitar	IDN
4579	Serang	IDN
4580	Probolinggo	IDN
4581	Cilegon	IDN
4582	Cianjur	IDN
4583	Ciparay	IDN
4584	Lhokseumawe	IDN
4585	Taman	IDN
4586	Depok	IDN
4587	Citeureup	IDN
4588	Pemalang	IDN
4589	Klaten	IDN
4590	Salatiga	IDN
4591	Cibinong	IDN
4592	Palangka Raya	IDN
4593	Mojokerto	IDN
4594	Purwakarta	IDN
4595	Garut	IDN
4596	Kudus	IDN
4597	Kendari	IDN
4598	Jaya Pura	IDN
4599	Gorontalo	IDN
4600	Majalaya	IDN
4601	Pondok Aren	IDN
4602	Jombang	IDN
4603	Sunggal	IDN
4604	Batam	IDN
4605	Padang Sidempuan	IDN
4606	Sawangan	IDN
4607	Banyuwangi	IDN
4608	Tanjung Pinang	IDN
4609	Mumbai (Bombay)	IND
4610	Delhi	IND
4611	Calcutta [Kolkata]	IND
4612	Chennai (Madras)	IND
4613	Hyderabad	IND
4614	Ahmedabad	IND
4615	Bangalore	IND
4616	Kanpur	IND
4617	Nagpur	IND
4618	Lucknow	IND
4619	Pune	IND
4620	Surat	IND
4621	Jaipur	IND
4622	Indore	IND
4623	Bhopal	IND
4624	Ludhiana	IND
4625	Vadodara (Baroda)	IND
4626	Kalyan	IND
4627	Madurai	IND
4628	Haora (Howrah)	IND
4629	Varanasi (Benares)	IND
4630	Patna	IND
4631	Srinagar	IND
4632	Agra	IND
4633	Coimbatore	IND
4634	Thane (Thana)	IND
4635	Allahabad	IND
4636	Meerut	IND
4637	Vishakhapatnam	IND
4638	Jabalpur	IND
4639	Amritsar	IND
4640	Faridabad	IND
4641	Vijayawada	IND
4642	Gwalior	IND
4643	Jodhpur	IND
4644	Nashik (Nasik)	IND
4645	Hubli-Dharwad	IND
4646	Solapur (Sholapur)	IND
4647	Ranchi	IND
4648	Bareilly	IND
4649	Guwahati (Gauhati)	IND
4650	Shambajinagar (Aurangabad)	IND
4651	Cochin (Kochi)	IND
4652	Rajkot	IND
4653	Kota	IND
4654	Thiruvananthapuram (Trivandrum	IND
4655	Pimpri-Chinchwad	IND
4656	Jalandhar (Jullundur)	IND
4657	Gorakhpur	IND
4658	Chandigarh	IND
4659	Mysore	IND
4660	Aligarh	IND
4661	Guntur	IND
4662	Jamshedpur	IND
4663	Ghaziabad	IND
4664	Warangal	IND
4665	Raipur	IND
4666	Moradabad	IND
4667	Durgapur	IND
4668	Amravati	IND
4669	Calicut (Kozhikode)	IND
4670	Bikaner	IND
4671	Bhubaneswar	IND
4672	Kolhapur	IND
4673	Kataka (Cuttack)	IND
4674	Ajmer	IND
4675	Bhavnagar	IND
4676	Tiruchirapalli	IND
4677	Bhilai	IND
4678	Bhiwandi	IND
4679	Saharanpur	IND
4680	Ulhasnagar	IND
4681	Salem	IND
4682	Ujjain	IND
4683	Malegaon	IND
4684	Jamnagar	IND
4685	Bokaro Steel City	IND
4686	Akola	IND
4687	Belgaum	IND
4688	Rajahmundry	IND
4689	Nellore	IND
4690	Udaipur	IND
4691	New Bombay	IND
4692	Bhatpara	IND
4693	Gulbarga	IND
4694	New Delhi	IND
4695	Jhansi	IND
4696	Gaya	IND
4697	Kakinada	IND
4698	Dhule (Dhulia)	IND
4699	Panihati	IND
4700	Nanded (Nander)	IND
4701	Mangalore	IND
4702	Dehra Dun	IND
4703	Kamarhati	IND
4704	Davangere	IND
4705	Asansol	IND
4706	Bhagalpur	IND
4707	Bellary	IND
4708	Barddhaman (Burdwan)	IND
4709	Rampur	IND
4710	Jalgaon	IND
4711	Muzaffarpur	IND
4712	Nizamabad	IND
4713	Muzaffarnagar	IND
4714	Patiala	IND
4715	Shahjahanpur	IND
4716	Kurnool	IND
4717	Tiruppur (Tirupper)	IND
4718	Rohtak	IND
4719	South Dum Dum	IND
4720	Mathura	IND
4721	Chandrapur	IND
4722	Barahanagar (Baranagar)	IND
4723	Darbhanga	IND
4724	Siliguri (Shiliguri)	IND
4725	Raurkela	IND
4726	Ambattur	IND
4727	Panipat	IND
4728	Firozabad	IND
4729	Ichalkaranji	IND
4730	Jammu	IND
4731	Ramagundam	IND
4732	Eluru	IND
4733	Brahmapur	IND
4734	Alwar	IND
4735	Pondicherry	IND
4736	Thanjavur	IND
4737	Bihar Sharif	IND
4738	Tuticorin	IND
4739	Imphal	IND
4740	Latur	IND
4741	Sagar	IND
4742	Farrukhabad-cum-Fatehgarh	IND
4743	Sangli	IND
4744	Parbhani	IND
4745	Nagar Coil	IND
4746	Bijapur	IND
4747	Kukatpalle	IND
4748	Bally	IND
4749	Bhilwara	IND
4750	Ratlam	IND
4751	Avadi	IND
4752	Dindigul	IND
4753	Ahmadnagar	IND
4754	Bilaspur	IND
4755	Shimoga	IND
4756	Kharagpur	IND
4757	Mira Bhayandar	IND
4758	Vellore	IND
4759	Jalna	IND
4760	Burnpur	IND
4761	Anantapur	IND
4762	Allappuzha (Alleppey)	IND
4763	Tirupati	IND
4764	Karnal	IND
4765	Burhanpur	IND
4766	Hisar (Hissar)	IND
4767	Tiruvottiyur	IND
4768	Mirzapur-cum-Vindhyachal	IND
4769	Secunderabad	IND
4770	Nadiad	IND
4771	Dewas	IND
4772	Murwara (Katni)	IND
4773	Ganganagar	IND
4774	Vizianagaram	IND
4775	Erode	IND
4776	Machilipatnam (Masulipatam)	IND
4777	Bhatinda (Bathinda)	IND
4778	Raichur	IND
4779	Agartala	IND
4780	Arrah (Ara)	IND
4781	Satna	IND
4782	Lalbahadur Nagar	IND
4783	Aizawl	IND
4784	Uluberia	IND
4785	Katihar	IND
4786	Cuddalore	IND
4787	Hugli-Chinsurah	IND
4788	Dhanbad	IND
4789	Raiganj	IND
4790	Sambhal	IND
4791	Durg	IND
4792	Munger (Monghyr)	IND
4793	Kanchipuram	IND
4794	North Dum Dum	IND
4795	Karimnagar	IND
4796	Bharatpur	IND
4797	Sikar	IND
4798	Hardwar (Haridwar)	IND
4799	Dabgram	IND
4800	Morena	IND
4801	Noida	IND
4802	Hapur	IND
4803	Bhusawal	IND
4804	Khandwa	IND
4805	Yamuna Nagar	IND
4806	Sonipat (Sonepat)	IND
4807	Tenali	IND
4808	Raurkela Civil Township	IND
4809	Kollam (Quilon)	IND
4810	Kumbakonam	IND
4811	Ingraj Bazar (English Bazar)	IND
4812	Timkur	IND
4813	Amroha	IND
4814	Serampore	IND
4815	Chapra	IND
4816	Pali	IND
4817	Maunath Bhanjan	IND
4818	Adoni	IND
4819	Jaunpur	IND
4820	Tirunelveli	IND
4821	Bahraich	IND
4822	Gadag Betigeri	IND
4823	Proddatur	IND
4824	Chittoor	IND
4825	Barrackpur	IND
4826	Bharuch (Broach)	IND
4827	Naihati	IND
4828	Shillong	IND
4829	Sambalpur	IND
4830	Junagadh	IND
4831	Rae Bareli	IND
4832	Rewa	IND
4833	Gurgaon	IND
4834	Khammam	IND
4835	Bulandshahr	IND
4836	Navsari	IND
4837	Malkajgiri	IND
4838	Midnapore (Medinipur)	IND
4839	Miraj	IND
4840	Raj Nandgaon	IND
4841	Alandur	IND
4842	Puri	IND
4843	Navadwip	IND
4844	Sirsa	IND
4845	Korba	IND
4846	Faizabad	IND
4847	Etawah	IND
4848	Pathankot	IND
4849	Gandhinagar	IND
4850	Palghat (Palakkad)	IND
4851	Veraval	IND
4852	Hoshiarpur	IND
4853	Ambala	IND
4854	Sitapur	IND
4855	Bhiwani	IND
4856	Cuddapah	IND
4857	Bhimavaram	IND
4858	Krishnanagar	IND
4859	Chandannagar	IND
4860	Mandya	IND
4861	Dibrugarh	IND
4862	Nandyal	IND
4863	Balurghat	IND
4864	Neyveli	IND
4865	Fatehpur	IND
4866	Mahbubnagar	IND
4867	Budaun	IND
4868	Porbandar	IND
4869	Silchar	IND
4870	Berhampore (Baharampur)	IND
4871	Purnea (Purnia)	IND
4872	Bankura	IND
4873	Rajapalaiyam	IND
4874	Titagarh	IND
4875	Halisahar	IND
4876	Hathras	IND
4877	Bhir (Bid)	IND
4878	Pallavaram	IND
4879	Anand	IND
4880	Mango	IND
4881	Santipur	IND
4882	Bhind	IND
4883	Gondiya	IND
4884	Tiruvannamalai	IND
4885	Yeotmal (Yavatmal)	IND
4886	Kulti-Barakar	IND
4887	Moga	IND
4888	Shivapuri	IND
4889	Bidar	IND
4890	Guntakal	IND
4891	Unnao	IND
4892	Barasat	IND
4893	Tambaram	IND
4894	Abohar	IND
4895	Pilibhit	IND
4896	Valparai	IND
4897	Gonda	IND
4898	Surendranagar	IND
4899	Qutubullapur	IND
4900	Beawar	IND
4901	Hindupur	IND
4902	Gandhidham	IND
4903	Haldwani-cum-Kathgodam	IND
4904	Tellicherry (Thalassery)	IND
4905	Wardha	IND
4906	Rishra	IND
4907	Bhuj	IND
4908	Modinagar	IND
4909	Gudivada	IND
4910	Basirhat	IND
4911	Uttarpara-Kotrung	IND
4912	Ongole	IND
4913	North Barrackpur	IND
4914	Guna	IND
4915	Haldia	IND
4916	Habra	IND
4917	Kanchrapara	IND
4918	Tonk	IND
4919	Champdani	IND
4920	Orai	IND
4921	Pudukkottai	IND
4922	Sasaram	IND
4923	Hazaribag	IND
4924	Palayankottai	IND
4925	Banda	IND
4926	Godhra	IND
4927	Hospet	IND
4928	Ashoknagar-Kalyangarh	IND
4929	Achalpur	IND
4930	Patan	IND
4931	Mandasor	IND
4932	Damoh	IND
4933	Satara	IND
4934	Meerut Cantonment	IND
4935	Dehri	IND
4936	Delhi Cantonment	IND
4937	Chhindwara	IND
4938	Bansberia	IND
4939	Nagaon	IND
4940	Kanpur Cantonment	IND
4941	Vidisha	IND
4942	Bettiah	IND
4943	Purulia	IND
4944	Hassan	IND
4945	Ambala Sadar	IND
4946	Baidyabati	IND
4947	Morvi	IND
4948	Raigarh	IND
4949	Vejalpur	IND
4950	Baghdad	IRQ
4951	Mosul	IRQ
4952	Irbil	IRQ
4953	Kirkuk	IRQ
4954	Basra	IRQ
4955	al-Sulaymaniya	IRQ
4956	al-Najaf	IRQ
4957	Karbala	IRQ
4958	al-Hilla	IRQ
4959	al-Nasiriya	IRQ
4960	al-Amara	IRQ
4961	al-Diwaniya	IRQ
4962	al-Ramadi	IRQ
4963	al-Kut	IRQ
4964	Baquba	IRQ
4965	Teheran	IRN
4966	Mashhad	IRN
4967	Esfahan	IRN
4968	Tabriz	IRN
4969	Shiraz	IRN
4970	Karaj	IRN
4971	Ahvaz	IRN
4972	Qom	IRN
4973	Kermanshah	IRN
4974	Urmia	IRN
4975	Zahedan	IRN
4976	Rasht	IRN
4977	Hamadan	IRN
4978	Kerman	IRN
4979	Arak	IRN
4980	Ardebil	IRN
4981	Yazd	IRN
4982	Qazvin	IRN
4983	Zanjan	IRN
4984	Sanandaj	IRN
4985	Bandar-e-Abbas	IRN
4986	Khorramabad	IRN
4987	Eslamshahr	IRN
4988	Borujerd	IRN
4989	Abadan	IRN
4990	Dezful	IRN
4991	Kashan	IRN
4992	Sari	IRN
4993	Gorgan	IRN
4994	Najafabad	IRN
4995	Sabzevar	IRN
4996	Khomeynishahr	IRN
4997	Amol	IRN
4998	Neyshabur	IRN
4999	Babol	IRN
5000	Khoy	IRN
5001	Malayer	IRN
5002	Bushehr	IRN
5003	Qaemshahr	IRN
5004	Qarchak	IRN
5005	Qods	IRN
5006	Sirjan	IRN
5007	Bojnurd	IRN
5008	Maragheh	IRN
5009	Birjand	IRN
5010	Ilam	IRN
5011	Bukan	IRN
5012	Masjed-e-Soleyman	IRN
5013	Saqqez	IRN
5014	Gonbad-e Qabus	IRN
5015	Saveh	IRN
5016	Mahabad	IRN
5017	Varamin	IRN
5018	Andimeshk	IRN
5019	Khorramshahr	IRN
5020	Shahrud	IRN
5021	Marv Dasht	IRN
5022	Zabol	IRN
5023	Shahr-e Kord	IRN
5024	Bandar-e Anzali	IRN
5025	Rafsanjan	IRN
5026	Marand	IRN
5027	Torbat-e Heydariyeh	IRN
5028	Jahrom	IRN
5029	Semnan	IRN
5030	Miandoab	IRN
5031	Qomsheh	IRN
5032	Dublin	IRL
5033	Cork	IRL
5034	Reykjavík	ISL
5035	Jerusalem	ISR
5036	Tel Aviv-Jaffa	ISR
5037	Haifa	ISR
5038	Rishon Le Ziyyon	ISR
5039	Beerseba	ISR
5040	Holon	ISR
5041	Petah Tiqwa	ISR
5042	Ashdod	ISR
5043	Netanya	ISR
5044	Bat Yam	ISR
5045	Bene Beraq	ISR
5046	Ramat Gan	ISR
5047	Ashqelon	ISR
5048	Rehovot	ISR
5049	Roma	ITA
5050	Milano	ITA
5051	Napoli	ITA
5052	Torino	ITA
5053	Palermo	ITA
5054	Genova	ITA
5055	Bologna	ITA
5056	Firenze	ITA
5057	Catania	ITA
5058	Bari	ITA
5059	Venezia	ITA
5060	Messina	ITA
5061	Verona	ITA
5062	Trieste	ITA
5063	Padova	ITA
5064	Taranto	ITA
5065	Brescia	ITA
5066	Reggio di Calabria	ITA
5067	Modena	ITA
5068	Prato	ITA
5069	Parma	ITA
5070	Cagliari	ITA
5071	Livorno	ITA
5072	Perugia	ITA
5073	Foggia	ITA
5074	Reggio nell´ Emilia	ITA
5075	Salerno	ITA
5076	Ravenna	ITA
5077	Ferrara	ITA
5078	Rimini	ITA
5079	Syrakusa	ITA
5080	Sassari	ITA
5081	Monza	ITA
5082	Bergamo	ITA
5083	Pescara	ITA
5084	Latina	ITA
5085	Vicenza	ITA
5086	Terni	ITA
5087	Forlì	ITA
5088	Trento	ITA
5089	Novara	ITA
5090	Piacenza	ITA
5091	Ancona	ITA
5092	Lecce	ITA
5093	Bolzano	ITA
5094	Catanzaro	ITA
5095	La Spezia	ITA
5096	Udine	ITA
5097	Torre del Greco	ITA
5098	Andria	ITA
5099	Brindisi	ITA
5100	Giugliano in Campania	ITA
5101	Pisa	ITA
5102	Barletta	ITA
5103	Arezzo	ITA
5104	Alessandria	ITA
5105	Cesena	ITA
5106	Pesaro	ITA
5107	Dili	TMP
5108	Wien	AUT
5109	Graz	AUT
5110	Linz	AUT
5111	Salzburg	AUT
5112	Innsbruck	AUT
5113	Klagenfurt	AUT
5114	Spanish Town	JAM
5115	Kingston	JAM
5116	Portmore	JAM
5117	Tokyo	JPN
5118	Jokohama [Yokohama]	JPN
5119	Osaka	JPN
5120	Nagoya	JPN
5121	Sapporo	JPN
5122	Kioto	JPN
5123	Kobe	JPN
5124	Fukuoka	JPN
5125	Kawasaki	JPN
5126	Hiroshima	JPN
5127	Kitakyushu	JPN
5128	Sendai	JPN
5129	Chiba	JPN
5130	Sakai	JPN
5131	Kumamoto	JPN
5132	Okayama	JPN
5133	Sagamihara	JPN
5134	Hamamatsu	JPN
5135	Kagoshima	JPN
5136	Funabashi	JPN
5137	Higashiosaka	JPN
5138	Hachioji	JPN
5139	Niigata	JPN
5140	Amagasaki	JPN
5141	Himeji	JPN
5142	Shizuoka	JPN
5143	Urawa	JPN
5144	Matsuyama	JPN
5145	Matsudo	JPN
5146	Kanazawa	JPN
5147	Kawaguchi	JPN
5148	Ichikawa	JPN
5149	Omiya	JPN
5150	Utsunomiya	JPN
5151	Oita	JPN
5152	Nagasaki	JPN
5153	Yokosuka	JPN
5154	Kurashiki	JPN
5155	Gifu	JPN
5156	Hirakata	JPN
5157	Nishinomiya	JPN
5158	Toyonaka	JPN
5159	Wakayama	JPN
5160	Fukuyama	JPN
5161	Fujisawa	JPN
5162	Asahikawa	JPN
5163	Machida	JPN
5164	Nara	JPN
5165	Takatsuki	JPN
5166	Iwaki	JPN
5167	Nagano	JPN
5168	Toyohashi	JPN
5169	Toyota	JPN
5170	Suita	JPN
5171	Takamatsu	JPN
5172	Koriyama	JPN
5173	Okazaki	JPN
5174	Kawagoe	JPN
5175	Tokorozawa	JPN
5176	Toyama	JPN
5177	Kochi	JPN
5178	Kashiwa	JPN
5179	Akita	JPN
5180	Miyazaki	JPN
5181	Koshigaya	JPN
5182	Naha	JPN
5183	Aomori	JPN
5184	Hakodate	JPN
5185	Akashi	JPN
5186	Yokkaichi	JPN
5187	Fukushima	JPN
5188	Morioka	JPN
5189	Maebashi	JPN
5190	Kasugai	JPN
5191	Otsu	JPN
5192	Ichihara	JPN
5193	Yao	JPN
5194	Ichinomiya	JPN
5195	Tokushima	JPN
5196	Kakogawa	JPN
5197	Ibaraki	JPN
5198	Neyagawa	JPN
5199	Shimonoseki	JPN
5200	Yamagata	JPN
5201	Fukui	JPN
5202	Hiratsuka	JPN
5203	Mito	JPN
5204	Sasebo	JPN
5205	Hachinohe	JPN
5206	Takasaki	JPN
5207	Shimizu	JPN
5208	Kurume	JPN
5209	Fuji	JPN
5210	Soka	JPN
5211	Fuchu	JPN
5212	Chigasaki	JPN
5213	Atsugi	JPN
5214	Numazu	JPN
5215	Ageo	JPN
5216	Yamato	JPN
5217	Matsumoto	JPN
5218	Kure	JPN
5219	Takarazuka	JPN
5220	Kasukabe	JPN
5221	Chofu	JPN
5222	Odawara	JPN
5223	Kofu	JPN
5224	Kushiro	JPN
5225	Kishiwada	JPN
5226	Hitachi	JPN
5227	Nagaoka	JPN
5228	Itami	JPN
5229	Uji	JPN
5230	Suzuka	JPN
5231	Hirosaki	JPN
5232	Ube	JPN
5233	Kodaira	JPN
5234	Takaoka	JPN
5235	Obihiro	JPN
5236	Tomakomai	JPN
5237	Saga	JPN
5238	Sakura	JPN
5239	Kamakura	JPN
5240	Mitaka	JPN
5241	Izumi	JPN
5242	Hino	JPN
5243	Hadano	JPN
5244	Ashikaga	JPN
5245	Tsu	JPN
5246	Sayama	JPN
5247	Yachiyo	JPN
5248	Tsukuba	JPN
5249	Tachikawa	JPN
5250	Kumagaya	JPN
5251	Moriguchi	JPN
5252	Otaru	JPN
5253	Anjo	JPN
5254	Narashino	JPN
5255	Oyama	JPN
5256	Ogaki	JPN
5257	Matsue	JPN
5258	Kawanishi	JPN
5259	Hitachinaka	JPN
5260	Niiza	JPN
5261	Nagareyama	JPN
5262	Tottori	JPN
5263	Tama	JPN
5264	Iruma	JPN
5265	Ota	JPN
5266	Omuta	JPN
5267	Komaki	JPN
5268	Ome	JPN
5269	Kadoma	JPN
5270	Yamaguchi	JPN
5271	Higashimurayama	JPN
5272	Yonago	JPN
5273	Matsubara	JPN
5274	Musashino	JPN
5275	Tsuchiura	JPN
5276	Joetsu	JPN
5277	Miyakonojo	JPN
5278	Misato	JPN
5279	Kakamigahara	JPN
5280	Daito	JPN
5281	Seto	JPN
5282	Kariya	JPN
5283	Urayasu	JPN
5284	Beppu	JPN
5285	Niihama	JPN
5286	Minoo	JPN
5287	Fujieda	JPN
5288	Abiko	JPN
5289	Nobeoka	JPN
5290	Tondabayashi	JPN
5291	Ueda	JPN
5292	Kashihara	JPN
5293	Matsusaka	JPN
5294	Isesaki	JPN
5295	Zama	JPN
5296	Kisarazu	JPN
5297	Noda	JPN
5298	Ishinomaki	JPN
5299	Fujinomiya	JPN
5300	Kawachinagano	JPN
5301	Imabari	JPN
5302	Aizuwakamatsu	JPN
5303	Higashihiroshima	JPN
5304	Habikino	JPN
5305	Ebetsu	JPN
5306	Hofu	JPN
5307	Kiryu	JPN
5308	Okinawa	JPN
5309	Yaizu	JPN
5310	Toyokawa	JPN
5311	Ebina	JPN
5312	Asaka	JPN
5313	Higashikurume	JPN
5314	Ikoma	JPN
5315	Kitami	JPN
5316	Koganei	JPN
5317	Iwatsuki	JPN
5318	Mishima	JPN
5319	Handa	JPN
5320	Muroran	JPN
5321	Komatsu	JPN
5322	Yatsushiro	JPN
5323	Iida	JPN
5324	Tokuyama	JPN
5325	Kokubunji	JPN
5326	Akishima	JPN
5327	Iwakuni	JPN
5328	Kusatsu	JPN
5329	Kuwana	JPN
5330	Sanda	JPN
5331	Hikone	JPN
5332	Toda	JPN
5333	Tajimi	JPN
5334	Ikeda	JPN
5335	Fukaya	JPN
5336	Ise	JPN
5337	Sakata	JPN
5338	Kasuga	JPN
5339	Kamagaya	JPN
5340	Tsuruoka	JPN
5341	Hoya	JPN
5342	Nishio	JPN
5343	Tokai	JPN
5344	Inazawa	JPN
5345	Sakado	JPN
5346	Isehara	JPN
5347	Takasago	JPN
5348	Fujimi	JPN
5349	Urasoe	JPN
5350	Yonezawa	JPN
5351	Konan	JPN
5352	Yamatokoriyama	JPN
5353	Maizuru	JPN
5354	Onomichi	JPN
5355	Higashimatsuyama	JPN
5356	Kimitsu	JPN
5357	Isahaya	JPN
5358	Kanuma	JPN
5359	Izumisano	JPN
5360	Kameoka	JPN
5361	Mobara	JPN
5362	Narita	JPN
5363	Kashiwazaki	JPN
5364	Tsuyama	JPN
5365	Sanaa	YEM
5366	Aden	YEM
5367	Taizz	YEM
5368	Hodeida	YEM
5369	al-Mukalla	YEM
5370	Ibb	YEM
5371	Amman	JOR
5372	al-Zarqa	JOR
5373	Irbid	JOR
5374	al-Rusayfa	JOR
5375	Wadi al-Sir	JOR
5376	Flying Fish Cove	CXR
5377	Beograd	YUG
5378	Novi Sad	YUG
5379	Niš	YUG
5380	Priština	YUG
5381	Kragujevac	YUG
5382	Podgorica	YUG
5383	Subotica	YUG
5384	Prizren	YUG
5385	Phnom Penh	KHM
5386	Battambang	KHM
5387	Siem Reap	KHM
5388	Douala	CMR
5389	Yaoundé	CMR
5390	Garoua	CMR
5391	Maroua	CMR
5392	Bamenda	CMR
5393	Bafoussam	CMR
5394	Nkongsamba	CMR
5395	Montréal	CAN
5396	Calgary	CAN
5397	Toronto	CAN
5398	North York	CAN
5399	Winnipeg	CAN
5400	Edmonton	CAN
5401	Mississauga	CAN
5402	Scarborough	CAN
5403	Vancouver	CAN
5404	Etobicoke	CAN
5405	London	CAN
5406	Hamilton	CAN
5407	Ottawa	CAN
5408	Laval	CAN
5409	Surrey	CAN
5410	Brampton	CAN
5411	Windsor	CAN
5412	Saskatoon	CAN
5413	Kitchener	CAN
5414	Markham	CAN
5415	Regina	CAN
5416	Burnaby	CAN
5417	Québec	CAN
5418	York	CAN
5419	Richmond	CAN
5420	Vaughan	CAN
5421	Burlington	CAN
5422	Oshawa	CAN
5423	Oakville	CAN
5424	Saint Catharines	CAN
5425	Longueuil	CAN
5426	Richmond Hill	CAN
5427	Thunder Bay	CAN
5428	Nepean	CAN
5429	Cape Breton	CAN
5430	East York	CAN
5431	Halifax	CAN
5432	Cambridge	CAN
5433	Gloucester	CAN
5434	Abbotsford	CAN
5435	Guelph	CAN
5436	Saint John´s	CAN
5437	Coquitlam	CAN
5438	Saanich	CAN
5439	Gatineau	CAN
5440	Delta	CAN
5441	Sudbury	CAN
5442	Kelowna	CAN
5443	Barrie	CAN
5444	Praia	CPV
5445	Almaty	KAZ
5446	Qaraghandy	KAZ
5447	Shymkent	KAZ
5448	Taraz	KAZ
5449	Astana	KAZ
5450	Öskemen	KAZ
5451	Pavlodar	KAZ
5452	Semey	KAZ
5453	Aqtöbe	KAZ
5454	Qostanay	KAZ
5455	Petropavl	KAZ
5456	Oral	KAZ
5457	Temirtau	KAZ
5458	Qyzylorda	KAZ
5459	Aqtau	KAZ
5460	Atyrau	KAZ
5461	Ekibastuz	KAZ
5462	Kökshetau	KAZ
5463	Rudnyy	KAZ
5464	Taldyqorghan	KAZ
5465	Zhezqazghan	KAZ
5466	Nairobi	KEN
5467	Mombasa	KEN
5468	Kisumu	KEN
5469	Nakuru	KEN
5470	Machakos	KEN
5471	Eldoret	KEN
5472	Meru	KEN
5473	Nyeri	KEN
5474	Bangui	CAF
5475	Shanghai	CHN
5476	Peking	CHN
5477	Chongqing	CHN
5478	Tianjin	CHN
5479	Wuhan	CHN
5480	Harbin	CHN
5481	Shenyang	CHN
5482	Kanton [Guangzhou]	CHN
5483	Chengdu	CHN
5484	Nanking [Nanjing]	CHN
5485	Changchun	CHN
5486	Xi´an	CHN
5487	Dalian	CHN
5488	Qingdao	CHN
5489	Jinan	CHN
5490	Hangzhou	CHN
5491	Zhengzhou	CHN
5492	Shijiazhuang	CHN
5493	Taiyuan	CHN
5494	Kunming	CHN
5495	Changsha	CHN
5496	Nanchang	CHN
5497	Fuzhou	CHN
5498	Lanzhou	CHN
5499	Guiyang	CHN
5500	Ningbo	CHN
5501	Hefei	CHN
5502	Urumtši [Ürümqi]	CHN
5503	Anshan	CHN
5504	Fushun	CHN
5505	Nanning	CHN
5506	Zibo	CHN
5507	Qiqihar	CHN
5508	Jilin	CHN
5509	Tangshan	CHN
5510	Baotou	CHN
5511	Shenzhen	CHN
5512	Hohhot	CHN
5513	Handan	CHN
5514	Wuxi	CHN
5515	Xuzhou	CHN
5516	Datong	CHN
5517	Yichun	CHN
5518	Benxi	CHN
5519	Luoyang	CHN
5520	Suzhou	CHN
5521	Xining	CHN
5522	Huainan	CHN
5523	Jixi	CHN
5524	Daqing	CHN
5525	Fuxin	CHN
5526	Amoy [Xiamen]	CHN
5527	Liuzhou	CHN
5528	Shantou	CHN
5529	Jinzhou	CHN
5530	Mudanjiang	CHN
5531	Yinchuan	CHN
5532	Changzhou	CHN
5533	Zhangjiakou	CHN
5534	Dandong	CHN
5535	Hegang	CHN
5536	Kaifeng	CHN
5537	Jiamusi	CHN
5538	Liaoyang	CHN
5539	Hengyang	CHN
5540	Baoding	CHN
5541	Hunjiang	CHN
5542	Xinxiang	CHN
5543	Huangshi	CHN
5544	Haikou	CHN
5545	Yantai	CHN
5546	Bengbu	CHN
5547	Xiangtan	CHN
5548	Weifang	CHN
5549	Wuhu	CHN
5550	Pingxiang	CHN
5551	Yingkou	CHN
5552	Anyang	CHN
5553	Panzhihua	CHN
5554	Pingdingshan	CHN
5555	Xiangfan	CHN
5556	Zhuzhou	CHN
5557	Jiaozuo	CHN
5558	Wenzhou	CHN
5559	Zhangjiang	CHN
5560	Zigong	CHN
5561	Shuangyashan	CHN
5562	Zaozhuang	CHN
5563	Yakeshi	CHN
5564	Yichang	CHN
5565	Zhenjiang	CHN
5566	Huaibei	CHN
5567	Qinhuangdao	CHN
5568	Guilin	CHN
5569	Liupanshui	CHN
5570	Panjin	CHN
5571	Yangquan	CHN
5572	Jinxi	CHN
5573	Liaoyuan	CHN
5574	Lianyungang	CHN
5575	Xianyang	CHN
5576	Tai´an	CHN
5577	Chifeng	CHN
5578	Shaoguan	CHN
5579	Nantong	CHN
5580	Leshan	CHN
5581	Baoji	CHN
5582	Linyi	CHN
5583	Tonghua	CHN
5584	Siping	CHN
5585	Changzhi	CHN
5586	Tengzhou	CHN
5587	Chaozhou	CHN
5588	Yangzhou	CHN
5589	Dongwan	CHN
5590	Ma´anshan	CHN
5591	Foshan	CHN
5592	Yueyang	CHN
5593	Xingtai	CHN
5594	Changde	CHN
5595	Shihezi	CHN
5596	Yancheng	CHN
5597	Jiujiang	CHN
5598	Dongying	CHN
5599	Shashi	CHN
5600	Xintai	CHN
5601	Jingdezhen	CHN
5602	Tongchuan	CHN
5603	Zhongshan	CHN
5604	Shiyan	CHN
5605	Tieli	CHN
5606	Jining	CHN
5607	Wuhai	CHN
5608	Mianyang	CHN
5609	Luzhou	CHN
5610	Zunyi	CHN
5611	Shizuishan	CHN
5612	Neijiang	CHN
5613	Tongliao	CHN
5614	Tieling	CHN
5615	Wafangdian	CHN
5616	Anqing	CHN
5617	Shaoyang	CHN
5618	Laiwu	CHN
5619	Chengde	CHN
5620	Tianshui	CHN
5621	Nanyang	CHN
5622	Cangzhou	CHN
5623	Yibin	CHN
5624	Huaiyin	CHN
5625	Dunhua	CHN
5626	Yanji	CHN
5627	Jiangmen	CHN
5628	Tongling	CHN
5629	Suihua	CHN
5630	Gongziling	CHN
5631	Xiantao	CHN
5632	Chaoyang	CHN
5633	Ganzhou	CHN
5634	Huzhou	CHN
5635	Baicheng	CHN
5636	Shangzi	CHN
5637	Yangjiang	CHN
5638	Qitaihe	CHN
5639	Gejiu	CHN
5640	Jiangyin	CHN
5641	Hebi	CHN
5642	Jiaxing	CHN
5643	Wuzhou	CHN
5644	Meihekou	CHN
5645	Xuchang	CHN
5646	Liaocheng	CHN
5647	Haicheng	CHN
5648	Qianjiang	CHN
5649	Baiyin	CHN
5650	Bei´an	CHN
5651	Yixing	CHN
5652	Laizhou	CHN
5653	Qaramay	CHN
5654	Acheng	CHN
5655	Dezhou	CHN
5656	Nanping	CHN
5657	Zhaoqing	CHN
5658	Beipiao	CHN
5659	Fengcheng	CHN
5660	Fuyu	CHN
5661	Xinyang	CHN
5662	Dongtai	CHN
5663	Yuci	CHN
5664	Honghu	CHN
5665	Ezhou	CHN
5666	Heze	CHN
5667	Daxian	CHN
5668	Linfen	CHN
5669	Tianmen	CHN
5670	Yiyang	CHN
5671	Quanzhou	CHN
5672	Rizhao	CHN
5673	Deyang	CHN
5674	Guangyuan	CHN
5675	Changshu	CHN
5676	Zhangzhou	CHN
5677	Hailar	CHN
5678	Nanchong	CHN
5679	Jiutai	CHN
5680	Zhaodong	CHN
5681	Shaoxing	CHN
5682	Fuyang	CHN
5683	Maoming	CHN
5684	Qujing	CHN
5685	Ghulja	CHN
5686	Jiaohe	CHN
5687	Puyang	CHN
5688	Huadian	CHN
5689	Jiangyou	CHN
5690	Qashqar	CHN
5691	Anshun	CHN
5692	Fuling	CHN
5693	Xinyu	CHN
5694	Hanzhong	CHN
5695	Danyang	CHN
5696	Chenzhou	CHN
5697	Xiaogan	CHN
5698	Shangqiu	CHN
5699	Zhuhai	CHN
5700	Qingyuan	CHN
5701	Aqsu	CHN
5702	Jining	CHN
5703	Xiaoshan	CHN
5704	Zaoyang	CHN
5705	Xinghua	CHN
5706	Hami	CHN
5707	Huizhou	CHN
5708	Jinmen	CHN
5709	Sanming	CHN
5710	Ulanhot	CHN
5711	Korla	CHN
5712	Wanxian	CHN
5713	Rui´an	CHN
5714	Zhoushan	CHN
5715	Liangcheng	CHN
5716	Jiaozhou	CHN
5717	Taizhou	CHN
5718	Suzhou	CHN
5719	Yichun	CHN
5720	Taonan	CHN
5721	Pingdu	CHN
5722	Ji´an	CHN
5723	Longkou	CHN
5724	Langfang	CHN
5725	Zhoukou	CHN
5726	Suining	CHN
5727	Yulin	CHN
5728	Jinhua	CHN
5729	Liu´an	CHN
5730	Shuangcheng	CHN
5731	Suizhou	CHN
5732	Ankang	CHN
5733	Weinan	CHN
5734	Longjing	CHN
5735	Da´an	CHN
5736	Lengshuijiang	CHN
5737	Laiyang	CHN
5738	Xianning	CHN
5739	Dali	CHN
5740	Anda	CHN
5741	Jincheng	CHN
5742	Longyan	CHN
5743	Xichang	CHN
5744	Wendeng	CHN
5745	Hailun	CHN
5746	Binzhou	CHN
5747	Linhe	CHN
5748	Wuwei	CHN
5749	Duyun	CHN
5750	Mishan	CHN
5751	Shangrao	CHN
5752	Changji	CHN
5753	Meixian	CHN
5754	Yushu	CHN
5755	Tiefa	CHN
5756	Huai´an	CHN
5757	Leiyang	CHN
5758	Zalantun	CHN
5759	Weihai	CHN
5760	Loudi	CHN
5761	Qingzhou	CHN
5762	Qidong	CHN
5763	Huaihua	CHN
5764	Luohe	CHN
5765	Chuzhou	CHN
5766	Kaiyuan	CHN
5767	Linqing	CHN
5768	Chaohu	CHN
5769	Laohekou	CHN
5770	Dujiangyan	CHN
5771	Zhumadian	CHN
5772	Linchuan	CHN
5773	Jiaonan	CHN
5774	Sanmenxia	CHN
5775	Heyuan	CHN
5776	Manzhouli	CHN
5777	Lhasa	CHN
5778	Lianyuan	CHN
5779	Kuytun	CHN
5780	Puqi	CHN
5781	Hongjiang	CHN
5782	Qinzhou	CHN
5783	Renqiu	CHN
5784	Yuyao	CHN
5785	Guigang	CHN
5786	Kaili	CHN
5787	Yan´an	CHN
5788	Beihai	CHN
5789	Xuangzhou	CHN
5790	Quzhou	CHN
5791	Yong´an	CHN
5792	Zixing	CHN
5793	Liyang	CHN
5794	Yizheng	CHN
5795	Yumen	CHN
5796	Liling	CHN
5797	Yuncheng	CHN
5798	Shanwei	CHN
5799	Cixi	CHN
5800	Yuanjiang	CHN
5801	Bozhou	CHN
5802	Jinchang	CHN
5803	Fu´an	CHN
5804	Suqian	CHN
5805	Shishou	CHN
5806	Hengshui	CHN
5807	Danjiangkou	CHN
5808	Fujin	CHN
5809	Sanya	CHN
5810	Guangshui	CHN
5811	Huangshan	CHN
5812	Xingcheng	CHN
5813	Zhucheng	CHN
5814	Kunshan	CHN
5815	Haining	CHN
5816	Pingliang	CHN
5817	Fuqing	CHN
5818	Xinzhou	CHN
5819	Jieyang	CHN
5820	Zhangjiagang	CHN
5821	Tong Xian	CHN
5822	Ya´an	CHN
5823	Jinzhou	CHN
5824	Emeishan	CHN
5825	Enshi	CHN
5826	Bose	CHN
5827	Yuzhou	CHN
5828	Kaiyuan	CHN
5829	Tumen	CHN
5830	Putian	CHN
5831	Linhai	CHN
5832	Xilin Hot	CHN
5833	Shaowu	CHN
5834	Junan	CHN
5835	Huaying	CHN
5836	Pingyi	CHN
5837	Huangyan	CHN
5838	Bishkek	KGZ
5839	Osh	KGZ
5840	Bikenibeu	KIR
5841	Bairiki	KIR
5842	Santafé de Bogotá	COL
5843	Cali	COL
5844	Medellín	COL
5845	Barranquilla	COL
5846	Cartagena	COL
5847	Cúcuta	COL
5848	Bucaramanga	COL
5849	Ibagué	COL
5850	Pereira	COL
5851	Santa Marta	COL
5852	Manizales	COL
5853	Bello	COL
5854	Pasto	COL
5855	Neiva	COL
5856	Soledad	COL
5857	Armenia	COL
5858	Villavicencio	COL
5859	Soacha	COL
5860	Valledupar	COL
5861	Montería	COL
5862	Itagüí	COL
5863	Palmira	COL
5864	Buenaventura	COL
5865	Floridablanca	COL
5866	Sincelejo	COL
5867	Popayán	COL
5868	Barrancabermeja	COL
5869	Dos Quebradas	COL
5870	Tuluá	COL
5871	Envigado	COL
5872	Cartago	COL
5873	Girardot	COL
5874	Buga	COL
5875	Tunja	COL
5876	Florencia	COL
5877	Maicao	COL
5878	Sogamoso	COL
5879	Giron	COL
5880	Moroni	COM
5881	Brazzaville	COG
5882	Pointe-Noire	COG
5883	Kinshasa	COD
5884	Lubumbashi	COD
5885	Mbuji-Mayi	COD
5886	Kolwezi	COD
5887	Kisangani	COD
5888	Kananga	COD
5889	Likasi	COD
5890	Bukavu	COD
5891	Kikwit	COD
5892	Tshikapa	COD
5893	Matadi	COD
5894	Mbandaka	COD
5895	Mwene-Ditu	COD
5896	Boma	COD
5897	Uvira	COD
5898	Butembo	COD
5899	Goma	COD
5900	Kalemie	COD
5901	Bantam	CCK
5902	West Island	CCK
5903	Pyongyang	PRK
5904	Hamhung	PRK
5905	Chongjin	PRK
5906	Nampo	PRK
5907	Sinuiju	PRK
5908	Wonsan	PRK
5909	Phyongsong	PRK
5910	Sariwon	PRK
5911	Haeju	PRK
5912	Kanggye	PRK
5913	Kimchaek	PRK
5914	Hyesan	PRK
5915	Kaesong	PRK
5916	Seoul	KOR
5917	Pusan	KOR
5918	Inchon	KOR
5919	Taegu	KOR
5920	Taejon	KOR
5921	Kwangju	KOR
5922	Ulsan	KOR
5923	Songnam	KOR
5924	Puchon	KOR
5925	Suwon	KOR
5926	Anyang	KOR
5927	Chonju	KOR
5928	Chongju	KOR
5929	Koyang	KOR
5930	Ansan	KOR
5931	Pohang	KOR
5932	Chang-won	KOR
5933	Masan	KOR
5934	Kwangmyong	KOR
5935	Chonan	KOR
5936	Chinju	KOR
5937	Iksan	KOR
5938	Pyongtaek	KOR
5939	Kumi	KOR
5940	Uijongbu	KOR
5941	Kyongju	KOR
5942	Kunsan	KOR
5943	Cheju	KOR
5944	Kimhae	KOR
5945	Sunchon	KOR
5946	Mokpo	KOR
5947	Yong-in	KOR
5948	Wonju	KOR
5949	Kunpo	KOR
5950	Chunchon	KOR
5951	Namyangju	KOR
5952	Kangnung	KOR
5953	Chungju	KOR
5954	Andong	KOR
5955	Yosu	KOR
5956	Kyongsan	KOR
5957	Paju	KOR
5958	Yangsan	KOR
5959	Ichon	KOR
5960	Asan	KOR
5961	Koje	KOR
5962	Kimchon	KOR
5963	Nonsan	KOR
5964	Kuri	KOR
5965	Chong-up	KOR
5966	Chechon	KOR
5967	Sosan	KOR
5968	Shihung	KOR
5969	Tong-yong	KOR
5970	Kongju	KOR
5971	Yongju	KOR
5972	Chinhae	KOR
5973	Sangju	KOR
5974	Poryong	KOR
5975	Kwang-yang	KOR
5976	Miryang	KOR
5977	Hanam	KOR
5978	Kimje	KOR
5979	Yongchon	KOR
5980	Sachon	KOR
5981	Uiwang	KOR
5982	Naju	KOR
5983	Namwon	KOR
5984	Tonghae	KOR
5985	Mun-gyong	KOR
5986	Athenai	GRC
5987	Thessaloniki	GRC
5988	Pireus	GRC
5989	Patras	GRC
5990	Peristerion	GRC
5991	Herakleion	GRC
5992	Kallithea	GRC
5993	Larisa	GRC
5994	Zagreb	HRV
5995	Split	HRV
5996	Rijeka	HRV
5997	Osijek	HRV
5998	La Habana	CUB
5999	Santiago de Cuba	CUB
6000	Camagüey	CUB
6001	Holguín	CUB
6002	Santa Clara	CUB
6003	Guantánamo	CUB
6004	Pinar del Río	CUB
6005	Bayamo	CUB
6006	Cienfuegos	CUB
6007	Victoria de las Tunas	CUB
6008	Matanzas	CUB
6009	Manzanillo	CUB
6010	Sancti-Spíritus	CUB
6011	Ciego de Ávila	CUB
6012	al-Salimiya	KWT
6013	Jalib al-Shuyukh	KWT
6014	Kuwait	KWT
6015	Nicosia	CYP
6016	Limassol	CYP
6017	Vientiane	LAO
6018	Savannakhet	LAO
6019	Riga	LVA
6020	Daugavpils	LVA
6021	Liepaja	LVA
6022	Maseru	LSO
6023	Beirut	LBN
6024	Tripoli	LBN
6025	Monrovia	LBR
6026	Tripoli	LBY
6027	Bengasi	LBY
6028	Misrata	LBY
6029	al-Zawiya	LBY
6030	Schaan	LIE
6031	Vaduz	LIE
6032	Vilnius	LTU
6033	Kaunas	LTU
6034	Klaipeda	LTU
6035	Šiauliai	LTU
6036	Panevezys	LTU
6037	Luxembourg [Luxemburg/Lëtzebuerg]	LUX
6038	El-Aaiún	ESH
6039	Macao	MAC
6040	Antananarivo	MDG
6041	Toamasina	MDG
6042	Antsirabé	MDG
6043	Mahajanga	MDG
6044	Fianarantsoa	MDG
6045	Skopje	MKD
6046	Blantyre	MWI
6047	Lilongwe	MWI
6048	Male	MDV
6049	Kuala Lumpur	MYS
6050	Ipoh	MYS
6051	Johor Baharu	MYS
6052	Petaling Jaya	MYS
6053	Kelang	MYS
6054	Kuala Terengganu	MYS
6055	Pinang	MYS
6056	Kota Bharu	MYS
6057	Kuantan	MYS
6058	Taiping	MYS
6059	Seremban	MYS
6060	Kuching	MYS
6061	Sibu	MYS
6062	Sandakan	MYS
6063	Alor Setar	MYS
6064	Selayang Baru	MYS
6065	Sungai Petani	MYS
6066	Shah Alam	MYS
6067	Bamako	MLI
6068	Birkirkara	MLT
6069	Valletta	MLT
6070	Casablanca	MAR
6071	Rabat	MAR
6072	Marrakech	MAR
6073	Fès	MAR
6074	Tanger	MAR
6075	Salé	MAR
6076	Meknès	MAR
6077	Oujda	MAR
6078	Kénitra	MAR
6079	Tétouan	MAR
6080	Safi	MAR
6081	Agadir	MAR
6082	Mohammedia	MAR
6083	Khouribga	MAR
6084	Beni-Mellal	MAR
6085	Témara	MAR
6086	El Jadida	MAR
6087	Nador	MAR
6088	Ksar el Kebir	MAR
6089	Settat	MAR
6090	Taza	MAR
6091	El Araich	MAR
6092	Dalap-Uliga-Darrit	MHL
6093	Fort-de-France	MTQ
6094	Nouakchott	MRT
6095	Nouâdhibou	MRT
6096	Port-Louis	MUS
6097	Beau Bassin-Rose Hill	MUS
6098	Vacoas-Phoenix	MUS
6099	Mamoutzou	MYT
6100	Ciudad de México	MEX
6101	Guadalajara	MEX
6102	Ecatepec de Morelos	MEX
6103	Puebla	MEX
6104	Nezahualcóyotl	MEX
6105	Juárez	MEX
6106	Tijuana	MEX
6107	León	MEX
6108	Monterrey	MEX
6109	Zapopan	MEX
6110	Naucalpan de Juárez	MEX
6111	Mexicali	MEX
6112	Culiacán	MEX
6113	Acapulco de Juárez	MEX
6114	Tlalnepantla de Baz	MEX
6115	Mérida	MEX
6116	Chihuahua	MEX
6117	San Luis Potosí	MEX
6118	Guadalupe	MEX
6119	Toluca	MEX
6120	Aguascalientes	MEX
6121	Querétaro	MEX
6122	Morelia	MEX
6123	Hermosillo	MEX
6124	Saltillo	MEX
6125	Torreón	MEX
6126	Centro (Villahermosa)	MEX
6127	San Nicolás de los Garza	MEX
6128	Durango	MEX
6129	Chimalhuacán	MEX
6130	Tlaquepaque	MEX
6131	Atizapán de Zaragoza	MEX
6132	Veracruz	MEX
6133	Cuautitlán Izcalli	MEX
6134	Irapuato	MEX
6135	Tuxtla Gutiérrez	MEX
6136	Tultitlán	MEX
6137	Reynosa	MEX
6138	Benito Juárez	MEX
6139	Matamoros	MEX
6140	Xalapa	MEX
6141	Celaya	MEX
6142	Mazatlán	MEX
6143	Ensenada	MEX
6144	Ahome	MEX
6145	Cajeme	MEX
6146	Cuernavaca	MEX
6147	Tonalá	MEX
6148	Valle de Chalco Solidaridad	MEX
6149	Nuevo Laredo	MEX
6150	Tepic	MEX
6151	Tampico	MEX
6152	Ixtapaluca	MEX
6153	Apodaca	MEX
6154	Guasave	MEX
6155	Gómez Palacio	MEX
6156	Tapachula	MEX
6157	Nicolás Romero	MEX
6158	Coatzacoalcos	MEX
6159	Uruapan	MEX
6160	Victoria	MEX
6161	Oaxaca de Juárez	MEX
6162	Coacalco de Berriozábal	MEX
6163	Pachuca de Soto	MEX
6164	General Escobedo	MEX
6165	Salamanca	MEX
6166	Santa Catarina	MEX
6167	Tehuacán	MEX
6168	Chalco	MEX
6169	Cárdenas	MEX
6170	Campeche	MEX
6171	La Paz	MEX
6172	Othón P. Blanco (Chetumal)	MEX
6173	Texcoco	MEX
6174	La Paz	MEX
6175	Metepec	MEX
6176	Monclova	MEX
6177	Huixquilucan	MEX
6178	Chilpancingo de los Bravo	MEX
6179	Puerto Vallarta	MEX
6180	Fresnillo	MEX
6181	Ciudad Madero	MEX
6182	Soledad de Graciano Sánchez	MEX
6183	San Juan del Río	MEX
6184	San Felipe del Progreso	MEX
6185	Córdoba	MEX
6186	Tecámac	MEX
6187	Ocosingo	MEX
6188	Carmen	MEX
6189	Lázaro Cárdenas	MEX
6190	Jiutepec	MEX
6191	Papantla	MEX
6192	Comalcalco	MEX
6193	Zamora	MEX
6194	Nogales	MEX
6195	Huimanguillo	MEX
6196	Cuautla	MEX
6197	Minatitlán	MEX
6198	Poza Rica de Hidalgo	MEX
6199	Ciudad Valles	MEX
6200	Navolato	MEX
6201	San Luis Río Colorado	MEX
6202	Pénjamo	MEX
6203	San Andrés Tuxtla	MEX
6204	Guanajuato	MEX
6205	Navojoa	MEX
6206	Zitácuaro	MEX
6207	Boca del Río	MEX
6208	Allende	MEX
6209	Silao	MEX
6210	Macuspana	MEX
6211	San Juan Bautista Tuxtepec	MEX
6212	San Cristóbal de las Casas	MEX
6213	Valle de Santiago	MEX
6214	Guaymas	MEX
6215	Colima	MEX
6216	Dolores Hidalgo	MEX
6217	Lagos de Moreno	MEX
6218	Piedras Negras	MEX
6219	Altamira	MEX
6220	Túxpam	MEX
6221	San Pedro Garza García	MEX
6222	Cuauhtémoc	MEX
6223	Manzanillo	MEX
6224	Iguala de la Independencia	MEX
6225	Zacatecas	MEX
6226	Tlajomulco de Zúñiga	MEX
6227	Tulancingo de Bravo	MEX
6228	Zinacantepec	MEX
6229	San Martín Texmelucan	MEX
6230	Tepatitlán de Morelos	MEX
6231	Martínez de la Torre	MEX
6232	Orizaba	MEX
6233	Apatzingán	MEX
6234	Atlixco	MEX
6235	Delicias	MEX
6236	Ixtlahuaca	MEX
6237	El Mante	MEX
6238	Lerdo	MEX
6239	Almoloya de Juárez	MEX
6240	Acámbaro	MEX
6241	Acuña	MEX
6242	Guadalupe	MEX
6243	Huejutla de Reyes	MEX
6244	Hidalgo	MEX
6245	Los Cabos	MEX
6246	Comitán de Domínguez	MEX
6247	Cunduacán	MEX
6248	Río Bravo	MEX
6249	Temapache	MEX
6250	Chilapa de Alvarez	MEX
6251	Hidalgo del Parral	MEX
6252	San Francisco del Rincón	MEX
6253	Taxco de Alarcón	MEX
6254	Zumpango	MEX
6255	San Pedro Cholula	MEX
6256	Lerma	MEX
6257	Tecomán	MEX
6258	Las Margaritas	MEX
6259	Cosoleacaque	MEX
6260	San Luis de la Paz	MEX
6261	José Azueta	MEX
6262	Santiago Ixcuintla	MEX
6263	San Felipe	MEX
6264	Tejupilco	MEX
6265	Tantoyuca	MEX
6266	Salvatierra	MEX
6267	Tultepec	MEX
6268	Temixco	MEX
6269	Matamoros	MEX
6270	Pánuco	MEX
6271	El Fuerte	MEX
6272	Tierra Blanca	MEX
6273	Weno	FSM
6274	Palikir	FSM
6275	Chisinau	MDA
6276	Tiraspol	MDA
6277	Balti	MDA
6278	Bender (Tîghina)	MDA
6279	Monte-Carlo	MCO
6280	Monaco-Ville	MCO
6281	Ulan Bator	MNG
6282	Plymouth	MSR
6283	Maputo	MOZ
6284	Matola	MOZ
6285	Beira	MOZ
6286	Nampula	MOZ
6287	Chimoio	MOZ
6288	Naçala-Porto	MOZ
6289	Quelimane	MOZ
6290	Mocuba	MOZ
6291	Tete	MOZ
6292	Xai-Xai	MOZ
6293	Gurue	MOZ
6294	Maxixe	MOZ
6295	Rangoon (Yangon)	MMR
6296	Mandalay	MMR
6297	Moulmein (Mawlamyine)	MMR
6298	Pegu (Bago)	MMR
6299	Bassein (Pathein)	MMR
6300	Monywa	MMR
6301	Sittwe (Akyab)	MMR
6302	Taunggyi (Taunggye)	MMR
6303	Meikhtila	MMR
6304	Mergui (Myeik)	MMR
6305	Lashio (Lasho)	MMR
6306	Prome (Pyay)	MMR
6307	Henzada (Hinthada)	MMR
6308	Myingyan	MMR
6309	Tavoy (Dawei)	MMR
6310	Pagakku (Pakokku)	MMR
6311	Windhoek	NAM
6312	Yangor	NRU
6313	Yaren	NRU
6314	Kathmandu	NPL
6315	Biratnagar	NPL
6316	Pokhara	NPL
6317	Lalitapur	NPL
6318	Birgunj	NPL
6319	Managua	NIC
6320	León	NIC
6321	Chinandega	NIC
6322	Masaya	NIC
6323	Niamey	NER
6324	Zinder	NER
6325	Maradi	NER
6326	Lagos	NGA
6327	Ibadan	NGA
6328	Ogbomosho	NGA
6329	Kano	NGA
6330	Oshogbo	NGA
6331	Ilorin	NGA
6332	Abeokuta	NGA
6333	Port Harcourt	NGA
6334	Zaria	NGA
6335	Ilesha	NGA
6336	Onitsha	NGA
6337	Iwo	NGA
6338	Ado-Ekiti	NGA
6339	Abuja	NGA
6340	Kaduna	NGA
6341	Mushin	NGA
6342	Maiduguri	NGA
6343	Enugu	NGA
6344	Ede	NGA
6345	Aba	NGA
6346	Ife	NGA
6347	Ila	NGA
6348	Oyo	NGA
6349	Ikerre	NGA
6350	Benin City	NGA
6351	Iseyin	NGA
6352	Katsina	NGA
6353	Jos	NGA
6354	Sokoto	NGA
6355	Ilobu	NGA
6356	Offa	NGA
6357	Ikorodu	NGA
6358	Ilawe-Ekiti	NGA
6359	Owo	NGA
6360	Ikirun	NGA
6361	Shaki	NGA
6362	Calabar	NGA
6363	Ondo	NGA
6364	Akure	NGA
6365	Gusau	NGA
6366	Ijebu-Ode	NGA
6367	Effon-Alaiye	NGA
6368	Kumo	NGA
6369	Shomolu	NGA
6370	Oka-Akoko	NGA
6371	Ikare	NGA
6372	Sapele	NGA
6373	Deba Habe	NGA
6374	Minna	NGA
6375	Warri	NGA
6376	Bida	NGA
6377	Ikire	NGA
6378	Makurdi	NGA
6379	Lafia	NGA
6380	Inisa	NGA
6381	Shagamu	NGA
6382	Awka	NGA
6383	Gombe	NGA
6384	Igboho	NGA
6385	Ejigbo	NGA
6386	Agege	NGA
6387	Ise-Ekiti	NGA
6388	Ugep	NGA
6389	Epe	NGA
6390	Alofi	NIU
6391	Kingston	NFK
6392	Oslo	NOR
6393	Bergen	NOR
6394	Trondheim	NOR
6395	Stavanger	NOR
6396	Bærum	NOR
6397	Abidjan	CIV
6398	Bouaké	CIV
6399	Yamoussoukro	CIV
6400	Daloa	CIV
6401	Korhogo	CIV
6402	al-Sib	OMN
6403	Salala	OMN
6404	Bawshar	OMN
6405	Suhar	OMN
6406	Masqat	OMN
6407	Karachi	PAK
6408	Lahore	PAK
6409	Faisalabad	PAK
6410	Rawalpindi	PAK
6411	Multan	PAK
6412	Hyderabad	PAK
6413	Gujranwala	PAK
6414	Peshawar	PAK
6415	Quetta	PAK
6416	Islamabad	PAK
6417	Sargodha	PAK
6418	Sialkot	PAK
6419	Bahawalpur	PAK
6420	Sukkur	PAK
6421	Jhang	PAK
6422	Sheikhupura	PAK
6423	Larkana	PAK
6424	Gujrat	PAK
6425	Mardan	PAK
6426	Kasur	PAK
6427	Rahim Yar Khan	PAK
6428	Sahiwal	PAK
6429	Okara	PAK
6430	Wah	PAK
6431	Dera Ghazi Khan	PAK
6432	Mirpur Khas	PAK
6433	Nawabshah	PAK
6434	Mingora	PAK
6435	Chiniot	PAK
6436	Kamoke	PAK
6437	Mandi Burewala	PAK
6438	Jhelum	PAK
6439	Sadiqabad	PAK
6440	Jacobabad	PAK
6441	Shikarpur	PAK
6442	Khanewal	PAK
6443	Hafizabad	PAK
6444	Kohat	PAK
6445	Muzaffargarh	PAK
6446	Khanpur	PAK
6447	Gojra	PAK
6448	Bahawalnagar	PAK
6449	Muridke	PAK
6450	Pak Pattan	PAK
6451	Abottabad	PAK
6452	Tando Adam	PAK
6453	Jaranwala	PAK
6454	Khairpur	PAK
6455	Chishtian Mandi	PAK
6456	Daska	PAK
6457	Dadu	PAK
6458	Mandi Bahauddin	PAK
6459	Ahmadpur East	PAK
6460	Kamalia	PAK
6461	Khuzdar	PAK
6462	Vihari	PAK
6463	Dera Ismail Khan	PAK
6464	Wazirabad	PAK
6465	Nowshera	PAK
6466	Koror	PLW
6467	Ciudad de Panamá	PAN
6468	San Miguelito	PAN
6469	Port Moresby	PNG
6470	Asunción	PRY
6471	Ciudad del Este	PRY
6472	San Lorenzo	PRY
6473	Lambaré	PRY
6474	Fernando de la Mora	PRY
6475	Lima	PER
6476	Arequipa	PER
6477	Trujillo	PER
6478	Chiclayo	PER
6479	Callao	PER
6480	Iquitos	PER
6481	Chimbote	PER
6482	Huancayo	PER
6483	Piura	PER
6484	Cusco	PER
6485	Pucallpa	PER
6486	Tacna	PER
6487	Ica	PER
6488	Sullana	PER
6489	Juliaca	PER
6490	Huánuco	PER
6491	Ayacucho	PER
6492	Chincha Alta	PER
6493	Cajamarca	PER
6494	Puno	PER
6495	Ventanilla	PER
6496	Castilla	PER
6497	Adamstown	PCN
6498	Garapan	MNP
6499	Lisboa	PRT
6500	Porto	PRT
6501	Amadora	PRT
6502	Coímbra	PRT
6503	Braga	PRT
6504	San Juan	PRI
6505	Bayamón	PRI
6506	Ponce	PRI
6507	Carolina	PRI
6508	Caguas	PRI
6509	Arecibo	PRI
6510	Guaynabo	PRI
6511	Mayagüez	PRI
6512	Toa Baja	PRI
6513	Warszawa	POL
6514	Lódz	POL
6515	Kraków	POL
6516	Wroclaw	POL
6517	Poznan	POL
6518	Gdansk	POL
6519	Szczecin	POL
6520	Bydgoszcz	POL
6521	Lublin	POL
6522	Katowice	POL
6523	Bialystok	POL
6524	Czestochowa	POL
6525	Gdynia	POL
6526	Sosnowiec	POL
6527	Radom	POL
6528	Kielce	POL
6529	Gliwice	POL
6530	Torun	POL
6531	Bytom	POL
6532	Zabrze	POL
6533	Bielsko-Biala	POL
6534	Olsztyn	POL
6535	Rzeszów	POL
6536	Ruda Slaska	POL
6537	Rybnik	POL
6538	Walbrzych	POL
6539	Tychy	POL
6540	Dabrowa Górnicza	POL
6541	Plock	POL
6542	Elblag	POL
6543	Opole	POL
6544	Gorzów Wielkopolski	POL
6545	Wloclawek	POL
6546	Chorzów	POL
6547	Tarnów	POL
6548	Zielona Góra	POL
6549	Koszalin	POL
6550	Legnica	POL
6551	Kalisz	POL
6552	Grudziadz	POL
6553	Slupsk	POL
6554	Jastrzebie-Zdrój	POL
6555	Jaworzno	POL
6556	Jelenia Góra	POL
6557	Malabo	GNQ
6558	Doha	QAT
6559	Paris	FRA
6560	Marseille	FRA
6561	Lyon	FRA
6562	Toulouse	FRA
6563	Nice	FRA
6564	Nantes	FRA
6565	Strasbourg	FRA
6566	Montpellier	FRA
6567	Bordeaux	FRA
6568	Rennes	FRA
6569	Le Havre	FRA
6570	Reims	FRA
6571	Lille	FRA
6572	St-Étienne	FRA
6573	Toulon	FRA
6574	Grenoble	FRA
6575	Angers	FRA
6576	Dijon	FRA
6577	Brest	FRA
6578	Le Mans	FRA
6579	Clermont-Ferrand	FRA
6580	Amiens	FRA
6581	Aix-en-Provence	FRA
6582	Limoges	FRA
6583	Nîmes	FRA
6584	Tours	FRA
6585	Villeurbanne	FRA
6586	Metz	FRA
6587	Besançon	FRA
6588	Caen	FRA
6589	Orléans	FRA
6590	Mulhouse	FRA
6591	Rouen	FRA
6592	Boulogne-Billancourt	FRA
6593	Perpignan	FRA
6594	Nancy	FRA
6595	Roubaix	FRA
6596	Argenteuil	FRA
6597	Tourcoing	FRA
6598	Montreuil	FRA
6599	Cayenne	GUF
6600	Faaa	PYF
6601	Papeete	PYF
6602	Saint-Denis	REU
6603	Bucuresti	ROM
6604	Iasi	ROM
6605	Constanta	ROM
6606	Cluj-Napoca	ROM
6607	Galati	ROM
6608	Timisoara	ROM
6609	Brasov	ROM
6610	Craiova	ROM
6611	Ploiesti	ROM
6612	Braila	ROM
6613	Oradea	ROM
6614	Bacau	ROM
6615	Pitesti	ROM
6616	Arad	ROM
6617	Sibiu	ROM
6618	Târgu Mures	ROM
6619	Baia Mare	ROM
6620	Buzau	ROM
6621	Satu Mare	ROM
6622	Botosani	ROM
6623	Piatra Neamt	ROM
6624	Râmnicu Vâlcea	ROM
6625	Suceava	ROM
6626	Drobeta-Turnu Severin	ROM
6627	Târgoviste	ROM
6628	Focsani	ROM
6629	Târgu Jiu	ROM
6630	Tulcea	ROM
6631	Resita	ROM
6632	Kigali	RWA
6633	Stockholm	SWE
6634	Gothenburg [Göteborg]	SWE
6635	Malmö	SWE
6636	Uppsala	SWE
6637	Linköping	SWE
6638	Västerås	SWE
6639	Örebro	SWE
6640	Norrköping	SWE
6641	Helsingborg	SWE
6642	Jönköping	SWE
6643	Umeå	SWE
6644	Lund	SWE
6645	Borås	SWE
6646	Sundsvall	SWE
6647	Gävle	SWE
6648	Jamestown	SHN
6649	Basseterre	KNA
6650	Castries	LCA
6651	Kingstown	VCT
6652	Saint-Pierre	SPM
6653	Berlin	DEU
6654	Hamburg	DEU
6655	Munich [München]	DEU
6656	Köln	DEU
6657	Frankfurt am Main	DEU
6658	Essen	DEU
6659	Dortmund	DEU
6660	Stuttgart	DEU
6661	Düsseldorf	DEU
6662	Bremen	DEU
6663	Duisburg	DEU
6664	Hannover	DEU
6665	Leipzig	DEU
6666	Nürnberg	DEU
6667	Dresden	DEU
6668	Bochum	DEU
6669	Wuppertal	DEU
6670	Bielefeld	DEU
6671	Mannheim	DEU
6672	Bonn	DEU
6673	Gelsenkirchen	DEU
6674	Karlsruhe	DEU
6675	Wiesbaden	DEU
6676	Münster	DEU
6677	Mönchengladbach	DEU
6678	Chemnitz	DEU
6679	Augsburg	DEU
6680	Halle/Saale	DEU
6681	Braunschweig	DEU
6682	Aachen	DEU
6683	Krefeld	DEU
6684	Magdeburg	DEU
6685	Kiel	DEU
6686	Oberhausen	DEU
6687	Lübeck	DEU
6688	Hagen	DEU
6689	Rostock	DEU
6690	Freiburg im Breisgau	DEU
6691	Erfurt	DEU
6692	Kassel	DEU
6693	Saarbrücken	DEU
6694	Mainz	DEU
6695	Hamm	DEU
6696	Herne	DEU
6697	Mülheim an der Ruhr	DEU
6698	Solingen	DEU
6699	Osnabrück	DEU
6700	Ludwigshafen am Rhein	DEU
6701	Leverkusen	DEU
6702	Oldenburg	DEU
6703	Neuss	DEU
6704	Heidelberg	DEU
6705	Darmstadt	DEU
6706	Paderborn	DEU
6707	Potsdam	DEU
6708	Würzburg	DEU
6709	Regensburg	DEU
6710	Recklinghausen	DEU
6711	Göttingen	DEU
6712	Bremerhaven	DEU
6713	Wolfsburg	DEU
6714	Bottrop	DEU
6715	Remscheid	DEU
6716	Heilbronn	DEU
6717	Pforzheim	DEU
6718	Offenbach am Main	DEU
6719	Ulm	DEU
6720	Ingolstadt	DEU
6721	Gera	DEU
6722	Salzgitter	DEU
6723	Cottbus	DEU
6724	Reutlingen	DEU
6725	Fürth	DEU
6726	Siegen	DEU
6727	Koblenz	DEU
6728	Moers	DEU
6729	Bergisch Gladbach	DEU
6730	Zwickau	DEU
6731	Hildesheim	DEU
6732	Witten	DEU
6733	Schwerin	DEU
6734	Erlangen	DEU
6735	Kaiserslautern	DEU
6736	Trier	DEU
6737	Jena	DEU
6738	Iserlohn	DEU
6739	Gütersloh	DEU
6740	Marl	DEU
6741	Lünen	DEU
6742	Düren	DEU
6743	Ratingen	DEU
6744	Velbert	DEU
6745	Esslingen am Neckar	DEU
6746	Honiara	SLB
6747	Lusaka	ZMB
6748	Ndola	ZMB
6749	Kitwe	ZMB
6750	Kabwe	ZMB
6751	Chingola	ZMB
6752	Mufulira	ZMB
6753	Luanshya	ZMB
6754	Apia	WSM
6755	Serravalle	SMR
6756	San Marino	SMR
6757	São Tomé	STP
6758	Riyadh	SAU
6759	Jedda	SAU
6760	Mekka	SAU
6761	Medina	SAU
6762	al-Dammam	SAU
6763	al-Taif	SAU
6764	Tabuk	SAU
6765	Burayda	SAU
6766	al-Hufuf	SAU
6767	al-Mubarraz	SAU
6768	Khamis Mushayt	SAU
6769	Hail	SAU
6770	al-Kharj	SAU
6771	al-Khubar	SAU
6772	Jubayl	SAU
6773	Hafar al-Batin	SAU
6774	al-Tuqba	SAU
6775	Yanbu	SAU
6776	Abha	SAU
6777	Ara´ar	SAU
6778	al-Qatif	SAU
6779	al-Hawiya	SAU
6780	Unayza	SAU
6781	Najran	SAU
6782	Pikine	SEN
6783	Dakar	SEN
6784	Thiès	SEN
6785	Kaolack	SEN
6786	Ziguinchor	SEN
6787	Rufisque	SEN
6788	Saint-Louis	SEN
6789	Mbour	SEN
6790	Diourbel	SEN
6791	Victoria	SYC
6792	Freetown	SLE
6793	Singapore	SGP
6794	Bratislava	SVK
6795	Košice	SVK
6796	Prešov	SVK
6797	Ljubljana	SVN
6798	Maribor	SVN
6799	Mogadishu	SOM
6800	Hargeysa	SOM
6801	Kismaayo	SOM
6802	Colombo	LKA
6803	Dehiwala	LKA
6804	Moratuwa	LKA
6805	Jaffna	LKA
6806	Kandy	LKA
6807	Sri Jayawardenepura Kotte	LKA
6808	Negombo	LKA
6809	Omdurman	SDN
6810	Khartum	SDN
6811	Sharq al-Nil	SDN
6812	Port Sudan	SDN
6813	Kassala	SDN
6814	Obeid	SDN
6815	Nyala	SDN
6816	Wad Madani	SDN
6817	al-Qadarif	SDN
6818	Kusti	SDN
6819	al-Fashir	SDN
6820	Juba	SDN
6821	Helsinki [Helsingfors]	FIN
6822	Espoo	FIN
6823	Tampere	FIN
6824	Vantaa	FIN
6825	Turku [Åbo]	FIN
6826	Oulu	FIN
6827	Lahti	FIN
6828	Paramaribo	SUR
6829	Mbabane	SWZ
6830	Zürich	CHE
6831	Geneve	CHE
6832	Basel	CHE
6833	Bern	CHE
6834	Lausanne	CHE
6835	Damascus	SYR
6836	Aleppo	SYR
6837	Hims	SYR
6838	Hama	SYR
6839	Latakia	SYR
6840	al-Qamishliya	SYR
6841	Dayr al-Zawr	SYR
6842	Jaramana	SYR
6843	Duma	SYR
6844	al-Raqqa	SYR
6845	Idlib	SYR
6846	Dushanbe	TJK
6847	Khujand	TJK
6848	Taipei	TWN
6849	Kaohsiung	TWN
6850	Taichung	TWN
6851	Tainan	TWN
6852	Panchiao	TWN
6853	Chungho	TWN
6854	Keelung (Chilung)	TWN
6855	Sanchung	TWN
6856	Hsinchuang	TWN
6857	Hsinchu	TWN
6858	Chungli	TWN
6859	Fengshan	TWN
6860	Taoyuan	TWN
6861	Chiayi	TWN
6862	Hsintien	TWN
6863	Changhwa	TWN
6864	Yungho	TWN
6865	Tucheng	TWN
6866	Pingtung	TWN
6867	Yungkang	TWN
6868	Pingchen	TWN
6869	Tali	TWN
6870	Taiping	TWN
6871	Pate	TWN
6872	Fengyuan	TWN
6873	Luchou	TWN
6874	Hsichuh	TWN
6875	Shulin	TWN
6876	Yuanlin	TWN
6877	Yangmei	TWN
6878	Taliao	TWN
6879	Kueishan	TWN
6880	Tanshui	TWN
6881	Taitung	TWN
6882	Hualien	TWN
6883	Nantou	TWN
6884	Lungtan	TWN
6885	Touliu	TWN
6886	Tsaotun	TWN
6887	Kangshan	TWN
6888	Ilan	TWN
6889	Miaoli	TWN
6890	Dar es Salaam	TZA
6891	Dodoma	TZA
6892	Mwanza	TZA
6893	Zanzibar	TZA
6894	Tanga	TZA
6895	Mbeya	TZA
6896	Morogoro	TZA
6897	Arusha	TZA
6898	Moshi	TZA
6899	Tabora	TZA
6900	København	DNK
6901	Århus	DNK
6902	Odense	DNK
6903	Aalborg	DNK
6904	Frederiksberg	DNK
6905	Bangkok	THA
6906	Nonthaburi	THA
6907	Nakhon Ratchasima	THA
6908	Chiang Mai	THA
6909	Udon Thani	THA
6910	Hat Yai	THA
6911	Khon Kaen	THA
6912	Pak Kret	THA
6913	Nakhon Sawan	THA
6914	Ubon Ratchathani	THA
6915	Songkhla	THA
6916	Nakhon Pathom	THA
6917	Lomé	TGO
6918	Fakaofo	TKL
6919	Nuku´alofa	TON
6920	Chaguanas	TTO
6921	Port-of-Spain	TTO
6922	N´Djaména	TCD
6923	Moundou	TCD
6924	Praha	CZE
6925	Brno	CZE
6926	Ostrava	CZE
6927	Plzen	CZE
6928	Olomouc	CZE
6929	Liberec	CZE
6930	Ceské Budejovice	CZE
6931	Hradec Králové	CZE
6932	Ústí nad Labem	CZE
6933	Pardubice	CZE
6934	Tunis	TUN
6935	Sfax	TUN
6936	Ariana	TUN
6937	Ettadhamen	TUN
6938	Sousse	TUN
6939	Kairouan	TUN
6940	Biserta	TUN
6941	Gabès	TUN
6942	Istanbul	TUR
6943	Ankara	TUR
6944	Izmir	TUR
6945	Adana	TUR
6946	Bursa	TUR
6947	Gaziantep	TUR
6948	Konya	TUR
6949	Mersin (Içel)	TUR
6950	Antalya	TUR
6951	Diyarbakir	TUR
6952	Kayseri	TUR
6953	Eskisehir	TUR
6954	Sanliurfa	TUR
6955	Samsun	TUR
6956	Malatya	TUR
6957	Gebze	TUR
6958	Denizli	TUR
6959	Sivas	TUR
6960	Erzurum	TUR
6961	Tarsus	TUR
6962	Kahramanmaras	TUR
6963	Elâzig	TUR
6964	Van	TUR
6965	Sultanbeyli	TUR
6966	Izmit (Kocaeli)	TUR
6967	Manisa	TUR
6968	Batman	TUR
6969	Balikesir	TUR
6970	Sakarya (Adapazari)	TUR
6971	Iskenderun	TUR
6972	Osmaniye	TUR
6973	Çorum	TUR
6974	Kütahya	TUR
6975	Hatay (Antakya)	TUR
6976	Kirikkale	TUR
6977	Adiyaman	TUR
6978	Trabzon	TUR
6979	Ordu	TUR
6980	Aydin	TUR
6981	Usak	TUR
6982	Edirne	TUR
6983	Çorlu	TUR
6984	Isparta	TUR
6985	Karabük	TUR
6986	Kilis	TUR
6987	Alanya	TUR
6988	Kiziltepe	TUR
6989	Zonguldak	TUR
6990	Siirt	TUR
6991	Viransehir	TUR
6992	Tekirdag	TUR
6993	Karaman	TUR
6994	Afyon	TUR
6995	Aksaray	TUR
6996	Ceyhan	TUR
6997	Erzincan	TUR
6998	Bismil	TUR
6999	Nazilli	TUR
7000	Tokat	TUR
7001	Kars	TUR
7002	Inegöl	TUR
7003	Bandirma	TUR
7004	Ashgabat	TKM
7005	Chärjew	TKM
7006	Dashhowuz	TKM
7007	Mary	TKM
7008	Cockburn Town	TCA
7009	Funafuti	TUV
7010	Kampala	UGA
7011	Kyiv	UKR
7012	Harkova [Harkiv]	UKR
7013	Dnipropetrovsk	UKR
7014	Donetsk	UKR
7015	Odesa	UKR
7016	Zaporizzja	UKR
7017	Lviv	UKR
7018	Kryvyi Rig	UKR
7019	Mykolajiv	UKR
7020	Mariupol	UKR
7021	Lugansk	UKR
7022	Vinnytsja	UKR
7023	Makijivka	UKR
7024	Herson	UKR
7025	Sevastopol	UKR
7026	Simferopol	UKR
7027	Pultava [Poltava]	UKR
7028	Tšernigiv	UKR
7029	Tšerkasy	UKR
7030	Gorlivka	UKR
7031	Zytomyr	UKR
7032	Sumy	UKR
7033	Dniprodzerzynsk	UKR
7034	Kirovograd	UKR
7035	Hmelnytskyi	UKR
7036	Tšernivtsi	UKR
7037	Rivne	UKR
7038	Krementšuk	UKR
7039	Ivano-Frankivsk	UKR
7040	Ternopil	UKR
7041	Lutsk	UKR
7042	Bila Tserkva	UKR
7043	Kramatorsk	UKR
7044	Melitopol	UKR
7045	Kertš	UKR
7046	Nikopol	UKR
7047	Berdjansk	UKR
7048	Pavlograd	UKR
7049	Sjeverodonetsk	UKR
7050	Slovjansk	UKR
7051	Uzgorod	UKR
7052	Altševsk	UKR
7053	Lysytšansk	UKR
7054	Jevpatorija	UKR
7055	Kamjanets-Podilskyi	UKR
7056	Jenakijeve	UKR
7057	Krasnyi Lutš	UKR
7058	Stahanov	UKR
7059	Oleksandrija	UKR
7060	Konotop	UKR
7061	Kostjantynivka	UKR
7062	Berdytšiv	UKR
7063	Izmajil	UKR
7064	Šostka	UKR
7065	Uman	UKR
7066	Brovary	UKR
7067	Mukatševe	UKR
7068	Budapest	HUN
7069	Debrecen	HUN
7070	Miskolc	HUN
7071	Szeged	HUN
7072	Pécs	HUN
7073	Györ	HUN
7074	Nyiregyháza	HUN
7075	Kecskemét	HUN
7076	Székesfehérvár	HUN
7077	Montevideo	URY
7078	Nouméa	NCL
7079	Auckland	NZL
7080	Christchurch	NZL
7081	Manukau	NZL
7082	North Shore	NZL
7083	Waitakere	NZL
7084	Wellington	NZL
7085	Dunedin	NZL
7086	Hamilton	NZL
7087	Lower Hutt	NZL
7088	Toskent	UZB
7089	Namangan	UZB
7090	Samarkand	UZB
7091	Andijon	UZB
7092	Buhoro	UZB
7093	Karsi	UZB
7094	Nukus	UZB
7095	Kükon	UZB
7096	Fargona	UZB
7097	Circik	UZB
7098	Margilon	UZB
7099	Ürgenc	UZB
7100	Angren	UZB
7101	Cizah	UZB
7102	Navoi	UZB
7103	Olmalik	UZB
7104	Termiz	UZB
7105	Minsk	BLR
7106	Gomel	BLR
7107	Mogiljov	BLR
7108	Vitebsk	BLR
7109	Grodno	BLR
7110	Brest	BLR
7111	Bobruisk	BLR
7112	Baranovitši	BLR
7113	Borisov	BLR
7114	Pinsk	BLR
7115	Orša	BLR
7116	Mozyr	BLR
7117	Novopolotsk	BLR
7118	Lida	BLR
7119	Soligorsk	BLR
7120	Molodetšno	BLR
7121	Mata-Utu	WLF
7122	Port-Vila	VUT
7123	Città del Vaticano	VAT
7124	Caracas	VEN
7125	Maracaíbo	VEN
7126	Barquisimeto	VEN
7127	Valencia	VEN
7128	Ciudad Guayana	VEN
7129	Petare	VEN
7130	Maracay	VEN
7131	Barcelona	VEN
7132	Maturín	VEN
7133	San Cristóbal	VEN
7134	Ciudad Bolívar	VEN
7135	Cumaná	VEN
7136	Mérida	VEN
7137	Cabimas	VEN
7138	Barinas	VEN
7139	Turmero	VEN
7140	Baruta	VEN
7141	Puerto Cabello	VEN
7142	Santa Ana de Coro	VEN
7143	Los Teques	VEN
7144	Punto Fijo	VEN
7145	Guarenas	VEN
7146	Acarigua	VEN
7147	Puerto La Cruz	VEN
7148	Ciudad Losada	VEN
7149	Guacara	VEN
7150	Valera	VEN
7151	Guanare	VEN
7152	Carúpano	VEN
7153	Catia La Mar	VEN
7154	El Tigre	VEN
7155	Guatire	VEN
7156	Calabozo	VEN
7157	Pozuelos	VEN
7158	Ciudad Ojeda	VEN
7159	Ocumare del Tuy	VEN
7160	Valle de la Pascua	VEN
7161	Araure	VEN
7162	San Fernando de Apure	VEN
7163	San Felipe	VEN
7164	El Limón	VEN
7165	Moscow	RUS
7166	St Petersburg	RUS
7167	Novosibirsk	RUS
7168	Nizni Novgorod	RUS
7169	Jekaterinburg	RUS
7170	Samara	RUS
7171	Omsk	RUS
7172	Kazan	RUS
7173	Ufa	RUS
7174	Tšeljabinsk	RUS
7175	Rostov-na-Donu	RUS
7176	Perm	RUS
7177	Volgograd	RUS
7178	Voronez	RUS
7179	Krasnojarsk	RUS
7180	Saratov	RUS
7181	Toljatti	RUS
7182	Uljanovsk	RUS
7183	Izevsk	RUS
7184	Krasnodar	RUS
7185	Jaroslavl	RUS
7186	Habarovsk	RUS
7187	Vladivostok	RUS
7188	Irkutsk	RUS
7189	Barnaul	RUS
7190	Novokuznetsk	RUS
7191	Penza	RUS
7192	Rjazan	RUS
7193	Orenburg	RUS
7194	Lipetsk	RUS
7195	Nabereznyje Tšelny	RUS
7196	Tula	RUS
7197	Tjumen	RUS
7198	Kemerovo	RUS
7199	Astrahan	RUS
7200	Tomsk	RUS
7201	Kirov	RUS
7202	Ivanovo	RUS
7203	Tšeboksary	RUS
7204	Brjansk	RUS
7205	Tver	RUS
7206	Kursk	RUS
7207	Magnitogorsk	RUS
7208	Kaliningrad	RUS
7209	Nizni Tagil	RUS
7210	Murmansk	RUS
7211	Ulan-Ude	RUS
7212	Kurgan	RUS
7213	Arkangeli	RUS
7214	Sotši	RUS
7215	Smolensk	RUS
7216	Orjol	RUS
7217	Stavropol	RUS
7218	Belgorod	RUS
7219	Kaluga	RUS
7220	Vladimir	RUS
7221	Mahatškala	RUS
7222	Tšerepovets	RUS
7223	Saransk	RUS
7224	Tambov	RUS
7225	Vladikavkaz	RUS
7226	Tšita	RUS
7227	Vologda	RUS
7228	Veliki Novgorod	RUS
7229	Komsomolsk-na-Amure	RUS
7230	Kostroma	RUS
7231	Volzski	RUS
7232	Taganrog	RUS
7233	Petroskoi	RUS
7234	Bratsk	RUS
7235	Dzerzinsk	RUS
7236	Surgut	RUS
7237	Orsk	RUS
7238	Sterlitamak	RUS
7239	Angarsk	RUS
7240	Joškar-Ola	RUS
7241	Rybinsk	RUS
7242	Prokopjevsk	RUS
7243	Niznevartovsk	RUS
7244	Naltšik	RUS
7245	Syktyvkar	RUS
7246	Severodvinsk	RUS
7247	Bijsk	RUS
7248	Niznekamsk	RUS
7249	Blagoveštšensk	RUS
7250	Šahty	RUS
7251	Staryi Oskol	RUS
7252	Zelenograd	RUS
7253	Balakovo	RUS
7254	Novorossijsk	RUS
7255	Pihkova	RUS
7256	Zlatoust	RUS
7257	Jakutsk	RUS
7258	Podolsk	RUS
7259	Petropavlovsk-Kamtšatski	RUS
7260	Kamensk-Uralski	RUS
7261	Engels	RUS
7262	Syzran	RUS
7263	Grozny	RUS
7264	Novotšerkassk	RUS
7265	Berezniki	RUS
7266	Juzno-Sahalinsk	RUS
7267	Volgodonsk	RUS
7268	Abakan	RUS
7269	Maikop	RUS
7270	Miass	RUS
7271	Armavir	RUS
7272	Ljubertsy	RUS
7273	Rubtsovsk	RUS
7274	Kovrov	RUS
7275	Nahodka	RUS
7276	Ussurijsk	RUS
7277	Salavat	RUS
7278	Mytištši	RUS
7279	Kolomna	RUS
7280	Elektrostal	RUS
7281	Murom	RUS
7282	Kolpino	RUS
7283	Norilsk	RUS
7284	Almetjevsk	RUS
7285	Novomoskovsk	RUS
7286	Dimitrovgrad	RUS
7287	Pervouralsk	RUS
7288	Himki	RUS
7289	Balašiha	RUS
7290	Nevinnomyssk	RUS
7291	Pjatigorsk	RUS
7292	Korolev	RUS
7293	Serpuhov	RUS
7294	Odintsovo	RUS
7295	Orehovo-Zujevo	RUS
7296	Kamyšin	RUS
7297	Novotšeboksarsk	RUS
7298	Tšerkessk	RUS
7299	Atšinsk	RUS
7300	Magadan	RUS
7301	Mitšurinsk	RUS
7302	Kislovodsk	RUS
7303	Jelets	RUS
7304	Seversk	RUS
7305	Noginsk	RUS
7306	Velikije Luki	RUS
7307	Novokuibyševsk	RUS
7308	Neftekamsk	RUS
7309	Leninsk-Kuznetski	RUS
7310	Oktjabrski	RUS
7311	Sergijev Posad	RUS
7312	Arzamas	RUS
7313	Kiseljovsk	RUS
7314	Novotroitsk	RUS
7315	Obninsk	RUS
7316	Kansk	RUS
7317	Glazov	RUS
7318	Solikamsk	RUS
7319	Sarapul	RUS
7320	Ust-Ilimsk	RUS
7321	Štšolkovo	RUS
7322	Mezduretšensk	RUS
7323	Usolje-Sibirskoje	RUS
7324	Elista	RUS
7325	Novošahtinsk	RUS
7326	Votkinsk	RUS
7327	Kyzyl	RUS
7328	Serov	RUS
7329	Zelenodolsk	RUS
7330	Zeleznodoroznyi	RUS
7331	Kinešma	RUS
7332	Kuznetsk	RUS
7333	Uhta	RUS
7334	Jessentuki	RUS
7335	Tobolsk	RUS
7336	Neftejugansk	RUS
7337	Bataisk	RUS
7338	Nojabrsk	RUS
7339	Balašov	RUS
7340	Zeleznogorsk	RUS
7341	Zukovski	RUS
7342	Anzero-Sudzensk	RUS
7343	Bugulma	RUS
7344	Zeleznogorsk	RUS
7345	Novouralsk	RUS
7346	Puškin	RUS
7347	Vorkuta	RUS
7348	Derbent	RUS
7349	Kirovo-Tšepetsk	RUS
7350	Krasnogorsk	RUS
7351	Klin	RUS
7352	Tšaikovski	RUS
7353	Novyi Urengoi	RUS
7354	Ho Chi Minh City	VNM
7355	Hanoi	VNM
7356	Haiphong	VNM
7357	Da Nang	VNM
7358	Biên Hoa	VNM
7359	Nha Trang	VNM
7360	Hue	VNM
7361	Can Tho	VNM
7362	Cam Pha	VNM
7363	Nam Dinh	VNM
7364	Quy Nhon	VNM
7365	Vung Tau	VNM
7366	Rach Gia	VNM
7367	Long Xuyen	VNM
7368	Thai Nguyen	VNM
7369	Hong Gai	VNM
7370	Phan Thiêt	VNM
7371	Cam Ranh	VNM
7372	Vinh	VNM
7373	My Tho	VNM
7374	Da Lat	VNM
7375	Buon Ma Thuot	VNM
7376	Tallinn	EST
7377	Tartu	EST
7378	New York	USA
7379	Los Angeles	USA
7380	Chicago	USA
7381	Houston	USA
7382	Philadelphia	USA
7383	Phoenix	USA
7384	San Diego	USA
7385	Dallas	USA
7386	San Antonio	USA
7387	Detroit	USA
7388	San Jose	USA
7389	Indianapolis	USA
7390	San Francisco	USA
7391	Jacksonville	USA
7392	Columbus	USA
7393	Austin	USA
7394	Baltimore	USA
7395	Memphis	USA
7396	Milwaukee	USA
7397	Boston	USA
7398	Washington	USA
7399	Nashville-Davidson	USA
7400	El Paso	USA
7401	Seattle	USA
7402	Denver	USA
7403	Charlotte	USA
7404	Fort Worth	USA
7405	Portland	USA
7406	Oklahoma City	USA
7407	Tucson	USA
7408	New Orleans	USA
7409	Las Vegas	USA
7410	Cleveland	USA
7411	Long Beach	USA
7412	Albuquerque	USA
7413	Kansas City	USA
7414	Fresno	USA
7415	Virginia Beach	USA
7416	Atlanta	USA
7417	Sacramento	USA
7418	Oakland	USA
7419	Mesa	USA
7420	Tulsa	USA
7421	Omaha	USA
7422	Minneapolis	USA
7423	Honolulu	USA
7424	Miami	USA
7425	Colorado Springs	USA
7426	Saint Louis	USA
7427	Wichita	USA
7428	Santa Ana	USA
7429	Pittsburgh	USA
7430	Arlington	USA
7431	Cincinnati	USA
7432	Anaheim	USA
7433	Toledo	USA
7434	Tampa	USA
7435	Buffalo	USA
7436	Saint Paul	USA
7437	Corpus Christi	USA
7438	Aurora	USA
7439	Raleigh	USA
7440	Newark	USA
7441	Lexington-Fayette	USA
7442	Anchorage	USA
7443	Louisville	USA
7444	Riverside	USA
7445	Saint Petersburg	USA
7446	Bakersfield	USA
7447	Stockton	USA
7448	Birmingham	USA
7449	Jersey City	USA
7450	Norfolk	USA
7451	Baton Rouge	USA
7452	Hialeah	USA
7453	Lincoln	USA
7454	Greensboro	USA
7455	Plano	USA
7456	Rochester	USA
7457	Glendale	USA
7458	Akron	USA
7459	Garland	USA
7460	Madison	USA
7461	Fort Wayne	USA
7462	Fremont	USA
7463	Scottsdale	USA
7464	Montgomery	USA
7465	Shreveport	USA
7466	Augusta-Richmond County	USA
7467	Lubbock	USA
7468	Chesapeake	USA
7469	Mobile	USA
7470	Des Moines	USA
7471	Grand Rapids	USA
7472	Richmond	USA
7473	Yonkers	USA
7474	Spokane	USA
7475	Glendale	USA
7476	Tacoma	USA
7477	Irving	USA
7478	Huntington Beach	USA
7479	Modesto	USA
7480	Durham	USA
7481	Columbus	USA
7482	Orlando	USA
7483	Boise City	USA
7484	Winston-Salem	USA
7485	San Bernardino	USA
7486	Jackson	USA
7487	Little Rock	USA
7488	Salt Lake City	USA
7489	Reno	USA
7490	Newport News	USA
7491	Chandler	USA
7492	Laredo	USA
7493	Henderson	USA
7494	Arlington	USA
7495	Knoxville	USA
7496	Amarillo	USA
7497	Providence	USA
7498	Chula Vista	USA
7499	Worcester	USA
7500	Oxnard	USA
7501	Dayton	USA
7502	Garden Grove	USA
7503	Oceanside	USA
7504	Tempe	USA
7505	Huntsville	USA
7506	Ontario	USA
7507	Chattanooga	USA
7508	Fort Lauderdale	USA
7509	Springfield	USA
7510	Springfield	USA
7511	Santa Clarita	USA
7512	Salinas	USA
7513	Tallahassee	USA
7514	Rockford	USA
7515	Pomona	USA
7516	Metairie	USA
7517	Paterson	USA
7518	Overland Park	USA
7519	Santa Rosa	USA
7520	Syracuse	USA
7521	Kansas City	USA
7522	Hampton	USA
7523	Lakewood	USA
7524	Vancouver	USA
7525	Irvine	USA
7526	Aurora	USA
7527	Moreno Valley	USA
7528	Pasadena	USA
7529	Hayward	USA
7530	Brownsville	USA
7531	Bridgeport	USA
7532	Hollywood	USA
7533	Warren	USA
7534	Torrance	USA
7535	Eugene	USA
7536	Pembroke Pines	USA
7537	Salem	USA
7538	Pasadena	USA
7539	Escondido	USA
7540	Sunnyvale	USA
7541	Savannah	USA
7542	Fontana	USA
7543	Orange	USA
7544	Naperville	USA
7545	Alexandria	USA
7546	Rancho Cucamonga	USA
7547	Grand Prairie	USA
7548	East Los Angeles	USA
7549	Fullerton	USA
7550	Corona	USA
7551	Flint	USA
7552	Paradise	USA
7553	Mesquite	USA
7554	Sterling Heights	USA
7555	Sioux Falls	USA
7556	New Haven	USA
7557	Topeka	USA
7558	Concord	USA
7559	Evansville	USA
7560	Hartford	USA
7561	Fayetteville	USA
7562	Cedar Rapids	USA
7563	Elizabeth	USA
7564	Lansing	USA
7565	Lancaster	USA
7566	Fort Collins	USA
7567	Coral Springs	USA
7568	Stamford	USA
7569	Thousand Oaks	USA
7570	Vallejo	USA
7571	Palmdale	USA
7572	Columbia	USA
7573	El Monte	USA
7574	Abilene	USA
7575	North Las Vegas	USA
7576	Ann Arbor	USA
7577	Beaumont	USA
7578	Waco	USA
7579	Macon	USA
7580	Independence	USA
7581	Peoria	USA
7582	Inglewood	USA
7583	Springfield	USA
7584	Simi Valley	USA
7585	Lafayette	USA
7586	Gilbert	USA
7587	Carrollton	USA
7588	Bellevue	USA
7589	West Valley City	USA
7590	Clarksville	USA
7591	Costa Mesa	USA
7592	Peoria	USA
7593	South Bend	USA
7594	Downey	USA
7595	Waterbury	USA
7596	Manchester	USA
7597	Allentown	USA
7598	McAllen	USA
7599	Joliet	USA
7600	Lowell	USA
7601	Provo	USA
7602	West Covina	USA
7603	Wichita Falls	USA
7604	Erie	USA
7605	Daly City	USA
7606	Citrus Heights	USA
7607	Norwalk	USA
7608	Gary	USA
7609	Berkeley	USA
7610	Santa Clara	USA
7611	Green Bay	USA
7612	Cape Coral	USA
7613	Arvada	USA
7614	Pueblo	USA
7615	Sandy	USA
7616	Athens-Clarke County	USA
7617	Cambridge	USA
7618	Westminster	USA
7619	San Buenaventura	USA
7620	Portsmouth	USA
7621	Livonia	USA
7622	Burbank	USA
7623	Clearwater	USA
7624	Midland	USA
7625	Davenport	USA
7626	Mission Viejo	USA
7627	Miami Beach	USA
7628	Sunrise Manor	USA
7629	New Bedford	USA
7630	El Cajon	USA
7631	Norman	USA
7632	Richmond	USA
7633	Albany	USA
7634	Brockton	USA
7635	Roanoke	USA
7636	Billings	USA
7637	Compton	USA
7638	Gainesville	USA
7639	Fairfield	USA
7640	Arden-Arcade	USA
7641	San Mateo	USA
7642	Visalia	USA
7643	Boulder	USA
7644	Cary	USA
7645	Santa Monica	USA
7646	Fall River	USA
7647	Kenosha	USA
7648	Elgin	USA
7649	Odessa	USA
7650	Carson	USA
7651	Charleston	USA
7652	Charlotte Amalie	VIR
7653	Harare	ZWE
7654	Bulawayo	ZWE
7655	Chitungwiza	ZWE
7656	Mount Darwin	ZWE
7657	Mutare	ZWE
7658	Gweru	ZWE
7659	Gaza	PSE
7660	Khan Yunis	PSE
7661	Hebron	PSE
7662	Jabaliya	PSE
7663	Nablus	PSE
7664	Rafah	PSE
\.


--
-- Name: ta_city_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_city_id_seq', 7664, true);


--
-- Data for Name: ta_config_system; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_config_system (id, name, value) FROM stdin;
1	Constanta	0.80
\.


--
-- Data for Name: ta_country; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_country (code, name) FROM stdin;
ABW	Aruba
AFG	Afghanistan
AGO	Angola
AIA	Anguilla
ALB	Albania
AND	Andorra
ANT	Netherlands Antilles
ARE	United Arab Emirates
ARG	Argentina
ARM	Armenia
ASM	American Samoa
ATA	Antarctica
ATF	French Southern territories
ATG	Antigua and Barbuda
AUS	Australia
AUT	Austria
AZE	Azerbaijan
BDI	Burundi
BEL	Belgium
BEN	Benin
BFA	Burkina Faso
BGD	Bangladesh
BGR	Bulgaria
BHR	Bahrain
BHS	Bahamas
BIH	Bosnia and Herzegovina
BLR	Belarus
BLZ	Belize
BMU	Bermuda
BOL	Bolivia
BRA	Brazil
BRB	Barbados
BRN	Brunei
BTN	Bhutan
BVT	Bouvet Island
BWA	Botswana
CAF	Central African Republic
CAN	Canada
CCK	Cocos (Keeling) Islands
CHE	Switzerland
CHL	Chile
CHN	China
CIV	Côte d’Ivoire
CMR	Cameroon
COD	Congo,The Democratic Republic of the
COG	Congo
COK	Cook Islands
COL	Colombia
COM	Comoros
CPV	Cape Verde
CRI	Costa Rica
CUB	Cuba
CXR	Christmas Island
CYM	Cayman Islands
CYP	Cyprus
CZE	Czech Republic
DEU	Germany
DJI	Djibouti
DMA	Dominica
DNK	Denmark
DOM	Dominican Republic
DZA	Algeria
ECU	Ecuador
EGY	Egypt
ERI	Eritrea
ESH	Western Sahara
ESP	Spain
EST	Estonia
ETH	Ethiopia
FIN	Finland
FJI	Fiji Islands
FLK	Falkland Islands
FRA	France
FRO	Faroe Islands
FSM	Micronesia, Federated States of
GAB	Gabon
GBR	United Kingdom
GEO	Georgia
GHA	Ghana
GIB	Gibraltar
GIN	Guinea
GLP	Guadeloupe
GMB	Gambia
GNB	Guinea-Bissau
GNQ	Equatorial Guinea
GRC	Greece
GRD	Grenada
GRL	Greenland
GTM	Guatemala
GUF	French Guiana
GUM	Guam
GUY	Guyana
HKG	Hong Kong
HMD	Heard Island and McDonald Islands
HND	Honduras
HRV	Croatia
HTI	Haiti
HUN	Hungary
IDN	Indonesia
IND	India
IOT	British Indian Ocean Territory
IRL	Ireland
IRN	Iran
IRQ	Iraq
ISL	Iceland
ISR	Israel
ITA	Italy
JAM	Jamaica
JOR	Jordan
JPN	Japan
KAZ	Kazakstan
KEN	Kenya
KGZ	Kyrgyzstan
KHM	Cambodia
KIR	Kiribati
KNA	Saint Kitts and Nevis
KOR	South Korea
KWT	Kuwait
LAO	Laos
LBN	Lebanon
LBR	Liberia
LBY	Libyan Arab Jamahiriya
LCA	Saint Lucia
LIE	Liechtenstein
LKA	Sri Lanka
LSO	Lesotho
LTU	Lithuania
LUX	Luxembourg
LVA	Latvia
MAC	Macao
MAR	Morocco
MCO	Monaco
MDA	Moldova
MDG	Madagascar
MDV	Maldives
MEX	Mexico
MHL	Marshall Islands
MKD	Macedonia
MLI	Mali
MLT	Malta
MMR	Myanmar
MNG	Mongolia
MNP	Northern Mariana Islands
MOZ	Mozambique
MRT	Mauritania
MSR	Montserrat
MTQ	Martinique
MUS	Mauritius
MWI	Malawi
MYS	Malaysia
MYT	Mayotte
NAM	Namibia
NCL	New Caledonia
NER	Niger
NFK	Norfolk Island
NGA	Nigeria
NIC	Nicaragua
NIU	Niue
NLD	Netherlands
NOR	Norway
NPL	Nepal
NRU	Nauru
NZL	New Zealand
OMN	Oman
PAK	Pakistan
PAN	Panama
PCN	Pitcairn
PER	Peru
PHL	Philippines
PLW	Palau
PNG	Papua New Guinea
POL	Poland
PRI	Puerto Rico
PRK	North Korea
PRT	Portugal
PRY	Paraguay
PSE	Palestine
PYF	French Polynesia
QAT	Qatar
REU	Réunion
ROM	Romania
RUS	Russian Federation
RWA	Rwanda
SAU	Saudi Arabia
SDN	Sudan
SEN	Senegal
SGP	Singapore
SGS	South Georgia and the South Sandwich Islands
SHN	Saint Helena
SJM	Svalbard and Jan Mayen
SLB	Solomon Islands
SLE	Sierra Leone
SLV	El Salvador
SMR	San Marino
SOM	Somalia
SPM	Saint Pierre and Miquelon
STP	Sao Tome and Principe
SUR	Suriname
SVK	Slovakia
SVN	Slovenia
SWE	Sweden
SWZ	Swaziland
SYC	Seychelles
SYR	Syria
TCA	Turks and Caicos Islands
TCD	Chad
TGO	Togo
THA	Thailand
TJK	Tajikistan
TKL	Tokelau
TKM	Turkmenistan
TMP	East Timor
TON	Tonga
TTO	Trinidad and Tobago
TUN	Tunisia
TUR	Turkey
TUV	Tuvalu
TWN	Taiwan
TZA	Tanzania
UGA	Uganda
UKR	Ukraine
UMI	United States Minor Outlying Islands
URY	Uruguay
USA	United States
UZB	Uzbekistan
VAT	Holy See (Vatican City State)
VCT	Saint Vincent and the Grenadines
VEN	Venezuela
VGB	Virgin Islands, British
VIR	Virgin Islands, U.S.
VNM	Vietnam
VUT	Vanuatu
WLF	Wallis and Futuna
WSM	Samoa
YEM	Yemen
YUG	Yugoslavia
ZAF	South Africa
ZMB	Zambia
ZWE	Zimbabwe
\.


--
-- Data for Name: ta_department; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_department (deptid, deptname) FROM stdin;
DEPT441	CDEC
DEPT22	CTAR
DEPT213	EF
DEPT244	IT
DEPT65	HSE
DEPT976	FINANCE
DEPT617	QA
DEPT958	HT
DEPT519	JKT OFFICE
DEPT410	LAB
DEPT3511	SUPPLY CHAIN
DEPT812	HT
DEPT7513	PPC
DEPT6414	HSE
DEPT8115	GENERAL
DEPT9516	TECHNICAL
DEPT5717	ENERGY & ACC
DEPT2418	MTC
DEPT919	HR
\.


--
-- Data for Name: ta_destination; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_destination (code, name_destination, area_code, currency, constant) FROM stdin;
DC01	Batam	BR02	IDR	1.20
DC02	Jakarta	BR02	IDR	1.50
DC03	Capital City of Kepri 	BR02	IDR	1.00
DC04	Kepri 	BR02	IDR	1.30
DC05	Capital City of Java 	BR02	IDR	1.00
DC06	Java 	BR02	IDR	1.00
DC07	Capital City of Sumatera 	BR02	IDR	1.00
DC08	Sumatera	BR02	IDR	1.30
DC09	Capital City of Kalimantan 	BR02	IDR	1.30
DC010	Kalimantan	BR02	IDR	1.50
DC011	Capital City of Sulawesi 	BR02	IDR	1.30
DC012	Sulawesi	BR02	IDR	1.50
DC013	Capital City of Maluku 	BR02	IDR	1.50
DC014	Maluku	BR02	IDR	2.00
DC015	Capital City of Papua 	BR02	IDR	1.50
DC016	Papua	BR02	IDR	2.00
DC017	Capital City of Nusa Tenggara	BR02	IDR	1.30
DC018	Nusa Tenggara	BR02	IDR	1.50
DC019	Singapore	BR03	SGD	1.30
DC020	Japan	BR03	SGD	1.30
DC021	Korea	BR03	SGD	1.30
DC022	Asia	BR03	SGD	1.00
DC023	Saudi	BR03	SAR	1.00
DC024	Dubai	BR03	SAR	1.30
DC025	Kuwait	BR03	SAR	1.30
DC026	Middle East	BR03	SAR	1.00
DC027	London	BR03	EUR	1.30
DC028	Paris	BR03	EUR	1.30
DC029	Europe	BR03	EUR	1.00
DC030	Houston	BR03	USD	1.00
DC031	USA	BR03	USD	1.00
DC032	Australia	BR03	AUD	1.00
DC033	Africa	BR03	USD	1.00
\.


--
-- Data for Name: ta_employee; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_employee (nik, name, email, telegramid, deptid, postid, grade, token, joindate) FROM stdin;
032013010	Hieronimus Gavin Ardhi	gavin@citratubindo.co.id		DEPT244	POST751	12  	9rwb55ro  	2015-11-05
032013066	ALBERTO KAYASNIN	kaya.albert@citratubindo.co.id		DEPT244	POST751	10  	w3OOyZmf  	2013-09-05
032013045	AXEL MUHAMMAD FERGIE	axel@citratubindo.co.id		DEPT919	POST751	12  	1lHYlSvu  	2010-09-05
032013012	BAGAS PANJI RAHMADAN	bagas@citratubindo.co.id		DEPT919	POST751	12  	HGaDjubI  	2013-09-05
032013067	JANE MARSHA VICTORIA SEMBIRING	jane@citratubindo.co.id		DEPT6414	POST863	6   	WYXRZDd9  	2017-03-05
032013059	JAVA JENARO	java@citratubindo.co.id		DEPT6414	POST863	6   	UTzk4hSj  	2017-03-05
032013048	LYANA PUTERI BINTE AZLI	lyana@citratubindo.co.id		DEPT244	POST863	6   	m2lGn9uV  	2017-03-05
032013034	MANOAH ZOFAR YONATHAN S.	lyana@citratubindo.co.id		DEPT976	POST863	6   	iFSd25gJ  	2017-03-05
032013068	MISASUKA TALENTA SAMPATIENA GINTINGS	misasuka@citratubindo.co.id		DEPT919	POST574	13  	5VMikooK  	2009-10-15
032013056	MUHAMMAD HAIKAL ATAMIMI	haikal@citratubindo.co.id		DEPT6414	POST751	10  	ijUDW9EE  	2010-11-15
032013047	MUTIARA AZ- ZAHRA	mutiara@citratubindo.co.id		DEPT8115	POST574	14  	whQR1xXX  	2015-11-15
032013042	NAYLA REFAYONA SEMBIRING MILALA	nayla@citratubindo.co.id		DEPT976	POST282	14  	uA5r2WPu  	2015-11-15
032013069	PILIPE KENANTOFI SITORUS	pilipe@citratubindo.co.id		DEPT919	POST863	5   	zFs7sQUr  	2017-04-15
032013024	RAHEL SALOMITA R. SIAHAAN	rahel@citratubindo.co.id		DEPT6414	POST915	2   	5yRBhKVh  	2017-04-26
032013008	SITI AZZAHRA PUTRIANI	siti@citratubindo.co.id		DEPT8115	POST282	15  	NnsMSWAZ  	2012-04-26
032013110	SYARIFAH VICKA NAZYRA	syarifah@citratubindo.co.id		DEPT8115	POST282	15  	UXaieT8F  	2012-04-26
032013038	VARA SYAMALIE AFANDI	vara@citratubindo.co.id		DEPT8115	POST282	15  	MeA0d3oe  	2008-06-26
032013036	YATA WIRANANTA SJARIB	yata@citratubindo.co.id		DEPT244	POST282	15  	nd2ulc3c  	2008-06-26
032013005	MUHAMMAD GERAL SAPUTRA	geral.saputra@citratubindo.co.id		DEPT6414	POST751	12  	u5sGWH9g  	2012-10-15
032013055	SAMUEL SUNARING NUGROHO ADI	samuel@citratubindo.co.id	247653891	DEPT6414	POST574	2   	fJ2tsxgD  	2013-04-26
032013006	ADAM DIMAS MUSA	gavin@citratubindo.co.id	319248901	DEPT8115	POST282	15  	LAax38Pr  	2010-11-05
\.


--
-- Data for Name: ta_grade; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_grade (grade, flight, train, taxi, ferry, ship, rent) FROM stdin;
\.


--
-- Data for Name: ta_livingcost; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_livingcost (id, reqid, nikreq, niktraveler, basic_rate_bs_pa, pocket_allowance, basic_rate_bs, basic_rate, basic_rate_bs_ha, hotel_allowance, basic_rate_bs_as, basic_rate_as, basic_rate_bs_ha_as, hotel_allowance_as, total_at_cost_system, total_allowance_system, total_total_at_cost_system, total_total_allowance_system) FROM stdin;
1	REQ2017518837	032013055	{032013067}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,2}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{7,7,7,7,7,7}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,2}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{7,7,7,7,7}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,2}	{0}	{0}	3570	2380
2	REQ2017518527	032013055	{032013067}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,2}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{7,7,7,7,7,7}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,2}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{7,7,7,7,7}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,2}	{0}	{0}	3570	2380
3	REQ20175219912	032013055	{032013005}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{29,29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{0}	{0}	5278	3248
4	REQ20175211212	032013055	{032013005}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{29,29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{0}	{0}	5278	3248
5	REQ20175214012	032013055	{032013005}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{29,29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{0}	{0}	5278	3248
6	REQ20175213512	032013055	{032013005}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{29,29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{0}	{0}	5278	3248
7	REQ20175222612	032013006	{032013110}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{29,29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{780}	{780}	9867	7895
8	REQ20175225412	032013055	{032013056}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{29,29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{780}	{780}	9867	7895
9	REQ20175226912	032013006	{032013110}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{29,29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{0}	{0}	4060	3248
10	REQ20175266013	032013055	{032013059}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{29,29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{0}	{0}	5278	3248
11	REQ20175282513	032013055	{032013024}	{"PA DAY 1","PA DAY 2-5","PA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,LA,CA}	{29,29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{MA-Breakfast,MA-Lunch,MA-Dinner,TA-Taxi,CA}	{29,29,29,29,29}	{"HA DAY 1","HA DAY 2-5","HA DAY 6-All"}	{1,4,24}	{780}	{780}	9867	7895
\.


--
-- Name: ta_livingcost_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_livingcost_id_seq', 11, true);


--
-- Data for Name: ta_location; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_location (id, name) FROM stdin;
1	Pelabuhan Batam Center
2	Harbour Front
3	CDG Airport
\.


--
-- Name: ta_location_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_location_id_seq', 3, true);


--
-- Data for Name: ta_notification; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_notification (id, reqnik, reqid, "time", approval1, approval2, approval3, approval4, statusreq, notceknik, notcekapp) FROM stdin;
8	032013055	REQ20175282513	1496603656	032013008				Pending		
\.


--
-- Name: ta_notification_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_notification_id_seq', 8, true);


--
-- Data for Name: ta_position; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_position (postid, postname) FROM stdin;
POST751	GENERAL MANAGER
POST282	OFFICE DIRECTOR
POST863	MANAGER
POST915	OPERATOR
POST949	afgaf
POST9510	agafg
POST4911	qwert
POST706	apaa
POST574	ADMIN
POST67	csfdgf
POST688	fzbzbzf
POST1812	
\.


--
-- Data for Name: ta_realization; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_realization (id, reqid, reqnik, travelnik, loctdept, loctdeptfrom, loctdeptto, timedeptpertrip, costdept, currencydept, transportdept, datedept, loctarrive, loctarrivefrom, loctarriveto, timearrivepertrip, costarrive, currencyarrive, transportarrive, datearrive, transports, totaltransport, totaltime, totalday, othercost, trainingcost, reqtime, totalcost, totalcurrency, approvenik, timeapprove, caption, statusreq, rute, homebase, statuspocket, photodept, photoarrive, gps) FROM stdin;
15	REQ20175225412	032013055	{032013056}	{Papua,Houston}	{"Pelabuhan Batam Center"}	{"CDG Airport"}	{60}	{2000}	{AUD}	{Ship}	2017-06-01	{Houston,Papua}	{"CDG Airport"}	{"Harbour Front"}	{120}	{3000}	{SAR}	{Train}	2017-06-30	{Ship,Train}	Train:1  Ship:1	180	29	\N	\N	2017-05-22 03:41:48.572486+00	{2000,3000,9867}	{AUD,SAR,USD}	\N	\N	\N	Approv	\N	\N	\N	\N	\N	\N
\.


--
-- Name: ta_realization_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_realization_id_seq', 1, false);


--
-- Data for Name: ta_request; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_request (id, reqid, reqnik, travelnik, loctdept, loctdeptfrom, loctdeptto, timedeptpertrip, costdept, currencydept, transportdept, datedept, loctarrive, loctarrivefrom, loctarriveto, timearrivepertrip, costarrive, currencyarrive, transportarrive, datearrive, transports, totaltransport, totaltime, totalday, othercost, trainingcost, reqtime, totalcost, totalcurrency, approvenik, timeapprove, caption, statusreq, rute) FROM stdin;
8	REQ2017518837	032013055	{032013067}	{Batam,Batam}	{adf}	{adf}	{62}	{50}	{USD}	{Taxi}	2017-05-18	{Batam,Batam}	{asdf}	{adf}	{62}	{50}	{USD}	{Taxi}	2017-05-25	{Taxi,Taxi}	Taxi:2	124	7	\N	\N	2017-05-18 09:42:18.767475+00	{100,2380}	{USD,IDR}	\N	\N	\N	Pending	\N
9	REQ2017518527	032013055	{032013067}	{Batam,Batam}	{adf}	{adf}	{62}	{50}	{USD}	{Taxi}	2017-05-18	{Batam,Batam}	{adf}	{adf}	{62}	{50}	{USD}	{Taxi}	2017-05-25	{Taxi,Taxi}	Taxi:2	124	7	\N	\N	2017-05-18 09:45:30.870876+00	{100,3570}	{USD,IDR}	\N	\N	\N	Pending	\N
17	REQ20175266013	032013055	{032013059}	{Batam,Kuwait}	{"Pelabuhan Batam Center"}	{"Harbour Front"}	{60}	{10000000}	{IDR}	{Train}	2017-06-01	{Kuwait,Batam}	{"CDG Airport"}	{"Harbour Front"}	{60}	{2000}	{SGD}	{Taxi}	2017-06-30	{Train,Taxi}	Taxi:1  Train:1	120	29	\N	\N	2017-05-26 07:48:26.278806+00	{10000000,2000,3248}	{IDR,SGD,SAR}	\N	\N	\N	Approv	\N
18	REQ20175282513	032013055	{032013024}	{"Capital City of Java ",USA}	{"CDG Airport"}	{"Harbour Front"}	{60}	{10000000}	{IDR}	{Plane}	2017-06-01	{Houston,Sumatera}	{"Harbour Front"}	{"Pelabuhan Batam Center"}	{120}	{30000}	{USD}	{Ship}	2017-06-30	{Plane,Ship}	Plane:1  Ship:1	180	29	\N	\N	2017-05-28 05:22:08.368879+00	{39867,10000000}	{USD,IDR}	\N	\N	\N	Approv	\N
13	REQ20175213512	032013055	{032013005}	{Batam,Dubai}	{"Pelabuhan Batam Center","Harbour Front"}	{"Harbour Front","CDG Airport"}	{120,60}	{300000,1000}	{IDR,SGD}	{Ship}	2017-06-01	{Dubai,Batam}	{"CDG Airport","Harbour Front"}	{"Harbour Front","Pelabuhan Batam Center"}	{60,120}	{1000,300000}	{SGD,IDR}	{Taxi}	2017-06-30	{Ship,Taxi}	Taxi:1  Ship:1	360	29	\N	\N	2017-05-21 05:42:10.595568+00	{600000,2000,3248}	{IDR,SGD,SAR}	\N	\N	\N	Pending	\N
16	REQ20175226912	032013006	{032013110}	{Batam,Africa}	{"Pelabuhan Batam Center"}	{"Harbour Front"}	{60}	{300000}	{IDR}	{Taxi}	2017-06-01	{Africa,Batam}	{"CDG Airport"}	{"Harbour Front"}	{120}	{2000}	{AUD}	{Plane}	2017-06-30	{Taxi,Plane}	Plane:1  Taxi:1	180	29	\N	\N	2017-05-22 07:26:44.30146+00	{2000,300000,3248}	{AUD,IDR,USD}	\N	\N	\N	Approv	\N
15	REQ20175225412	032013055	{032013056}	{Papua,Houston}	{"Pelabuhan Batam Center"}	{"CDG Airport"}	{60}	{2000}	{AUD}	{Ship}	2017-06-01	{Houston,Papua}	{"CDG Airport"}	{"Harbour Front"}	{120}	{3000}	{SAR}	{Train}	2017-06-30	{Ship,Train}	Train:1  Ship:1	180	29	\N	\N	2017-05-22 03:41:48.572486+00	{2000,3000,9867}	{AUD,SAR,USD}	\N	\N	\N	Canceled	\N
\.


--
-- Name: ta_request_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_request_id_seq', 18, true);


--
-- Data for Name: ta_timecost_system; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_timecost_system (id, name, "time", value) FROM stdin;
1	12 Hours	12	110
\.


--
-- Name: ta_timecost_system_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_timecost_system_id_seq', 1, true);


--
-- Data for Name: ta_tipsandtrick; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_tipsandtrick (id, category, country, city, title, article) FROM stdin;
1	general	-	-	General Tips Part I	.....
2	general	-	-	General Tips Part II	.....
3	general	-	-	General Tips Part III	.....
4	general	-	-	General Tips Part IV	.....
5	general	-	-	General Tips Part V	.....
6	general	-	-	General Tips Part VI	.....
7	country	Malaysia	Johor	Tips Traveling di Malaysia	....
8	country	Singapore	Singapore	Tips Perjalaan di Singapore (Bagian II)	....
9	country	Singapore	Singapore	Tips Perjalaan di Singapore (Bagian III)	....
10	country	Singapore	Singapore	Tips Perjalaan di Singapore (Bagian IV)	....
11	country	Singapore	Singapore	Tips Lolos Imigrasi Singapore	....
12	country	Singapore	Singapore	Rekomendasi Tempat Wisata di Singapore	....
13	country	Thailand	Bangkok	Tips Traveling di Thailand	....
14	country	France	Paris	Tips Traveling di Paris	....
15	country	United Arab Emirates	Dubai	Tips Traveling di Dubai	....
16	country	United Arab Emirates	Abu Dhabi	Tips Traveling di Abu Dhabi	....
17	country	Thailand	Bangkok	Tips Traveling di Thailand (Bagian II)	....
18	country	Japan	Tokyo	Tips Traveling di Tokyo	....
19	country	Russia	Moskow	Tips Traveling di Moskow	....
20	country	United States	Beaumont	Tips Traveling di Beaumont	....
22	general			Tips Sesat	Apa aja...
21	general	-	-	Tips Hidup di Indonesia	Kerja, jaker, dan KERJA.
\.


--
-- Name: ta_tipsandtrick_id_seq; Type: SEQUENCE SET; Schema: program; Owner: postgres
--

SELECT pg_catalog.setval('ta_tipsandtrick_id_seq', 22, true);


--
-- Data for Name: ta_user; Type: TABLE DATA; Schema: program; Owner: postgres
--

COPY ta_user (nik, password, level, status) FROM stdin;
032013045	032013045	admin	active
032013036	032013036	odgm	special
032013038	032013038	odgm	block
032013055	032013055	operator	active
032013012	032013012	manajer	special
032013006	032013006	operator	special
032013010	032013010	manajer	active
032013008	032013008	admin	active
\.


SET search_path = public, pg_catalog;

--
-- Data for Name: a; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY a (id, aaa) FROM stdin;
\.


--
-- Name: a_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('a_id_seq', 1, false);


--
-- Data for Name: array_code; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY array_code ("array") FROM stdin;
{BR02}
{BR03}
\.


--
-- Data for Name: count_id; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY count_id (id) FROM stdin;
4
5
6
7
8
9
\.


--
-- Name: idkonfig; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('idkonfig', 1, false);


--
-- Name: latihan; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('latihan', 6, false);


--
-- Data for Name: my_table; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY my_table (id, val) FROM stdin;
3	row 3
1	row 1
2	row 2
4	row 4
5	row 5
\.


--
-- Data for Name: ta_departemen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_departemen (iddepartemen, namadepartemen) FROM stdin;
DEP2017320111  	CDEC
DEP2017320282  	IT
DEP2017320503  	LAB
DEP2017320774  	TECHNICAL
DEP2017320475  	JKT OFFICE
DEP2017320146  	CTAR
DEP2017320237  	EF
DEP2017320768  	ENERGY & ACC
DEP2017320349  	FINANCE
DEP20173208810 	GENERAL
DEP20173209311 	HR
DEP20173207512 	HSE
DEP20173204713 	HT
DEP20173203414 	HSE
DEP20173206915 	HT
DEP20173209116 	MTC
DEP20173207317 	PPC
DEP20173203918 	QA
DEP20173206019 	SUPPLY CHAIN
\.


--
-- Data for Name: ta_destination; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_destination (code, area, currency, constant) FROM stdin;
\.


--
-- Data for Name: ta_jabatan; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_jabatan (idjabatan, namajabatan) FROM stdin;
JBT2017320501  	OFFICE DIRECTOR
JBT2017320342  	GENERAL MANAGER
JBT2017320563  	MANAGER
JBT2017320854  	OPERATOR
JBT2017320585  	ADMIN
\.


--
-- Data for Name: ta_karyawan; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_karyawan (nik, nama, email, idtelegram, iddepartemen, idjabatan, token, tingkat) FROM stdin;
032013005	MUHAMMAD GERAL SAPUTRA	m.geralsaputra@gmail.com	               	DEP20173203918	JBT2017320563	APX4U9ub	10
032013078	ADAM DIMAS MUSA	musa.adam@gmail.com	               	DEP2017320282	JBT2017320342	h4On6Wux	8
032013110	SYARIFAH VICKA NAZYRA	vicka.sya@gmail.com	               	DEP2017320768	JBT2017320342	GFdtoA2L	7
032013068	MISASUKA TALENTA SAMPATIENA GINTINGS	talenta.sampatiena@gmail.com	               	DEP20173203918	JBT2017320501	YZWg6Mn2	9
032013008	SITI AZZAHRA PUTRIANI	azz.siti@gmail.com	               	DEP2017320349	JBT2017320854	LyxOudie	7
032013010	HIERONIMUS GAVIN ARDHIJAYA	hieronimus.gavin@gmail.com	               	DEP20173204713	JBT2017320501	04HQRGHE	8
032013012	BAGAS PANJI RAHMADAN	bagas.rahmadan@gmail.com	               	DEP20173204713	JBT2017320342	9RYYC9B1	14
032013020	ARYA SALIM	kaya.alberto@gmail.com	               	DEP2017320282	JBT2017320585	CLi9QDxX	12
032013038	VARA SYAMALIE AFANDI	vara.syamalie@gmail.com	               	DEP2017320768	JBT2017320501	UIvBNPXk	8
032013042	NAYLA REFAYONA SEMBIRING MILALA	nayla@gmail.com	               	DEP2017320349	JBT2017320342	lddTfBxK	8
032013034	MANOAH ZOFAR YONATHAN S.	manoah.zofar@gmail.com	               	DEP20173203918	JBT2017320342	Mm028VTs	10
032013024	RAHEL SALOMITA R. SIAHAAN	r.salomita@gmail.com	               	DEP2017320349	JBT2017320563	3qYIBTFo	11
032013036	YATA WIRANANTA SJARIB	yata.wirananta@gmail.com	               	DEP2017320768	JBT2017320585	MZb1O8S9	9
032013045	AXEL MUHAMMAD FERGIE	kaya.alberto@gmail.com	               	DEP2017320282	JBT2017320585	o6JY2lo3	12
032013055	SAMUEL SUNARING NUGROHO ADI	ss.nugroho@gmail.com	               	DEP2017320349	JBT2017320585	QNYoGjuY	12
032013048	LYANA PUTERI BINTE AZLI	lya.azli48@gmail.com	               	DEP20173204713	JBT2017320854	jUksyn3U	17
032013056	MUHAMMAD HAIKAL ATAMIMI	h.m.atamimi@gmail.com	               	DEP20173203918	JBT2017320585	07mFnlZU	15
032013225	Rezalendra	reza.rdlra@gmail.com	31307699       	DEP20173204713	JBT2017320585	iaa4h3Pr	10
032013069	PILIPE KENANTOFI SITORUS	pilipe.sitorus@gmail.com	               	DEP2017320349	JBT2017320501	QWDoZffq	9
032013067	JANE MARSHA VICTORIA SEMBIRING	victoria.marsha67@gmail.com	               	DEP20173204713	JBT2017320563	MTKFnSFm	8
032013059	JAVA JENARO	victoria.marsha67@gmail.com	               	DEP20173204713	JBT2017320585	TL3PcUMS	10
032013047	MUTIARA AZ- ZAHRA	m.az_zahra@gmail.com	               	DEP20173203918	JBT2017320854	 4CFYWHbO	15
032013066	Fernando Reza	fernandoreza18@gmail.com	               	DEP2017320282	JBT2017320563	RJruycKg	12
032013006	ALBERTO KAYASNIN	kaya.alberto@gmail.com	               	DEP2017320282	JBT2017320854	9IPuKGHX	9
032013347	Ferty Oke	ferty.oke@gmail.com	               	DEP20173204713	JBT2017320563	fES5KdxK	9
032013743	Reza D	reza@gmail.com	               	DEP2017320282	JBT2017320854	AkYawZxG	9
\.


--
-- Name: ta_karyawan_idkaryawan_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('ta_karyawan_idkaryawan_seq', 5, true);


--
-- Data for Name: ta_kodelokasi; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_kodelokasi (idlokasi, namalokasi, matauang) FROM stdin;
Loc201747362	OTHER	USD
Loc201747153	SG	SGD
Loc201747464	NONSG	EURO
Loc201747361	BATAM	RP
Loc2017410635	KARIMUN	RP
Loc2017410336	TANJUNG PINANG	RP
Loc2017410977	BINTAN	RP
Loc2017410458	LUAR KEPRI	RP
\.


--
-- Data for Name: ta_konfig; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_konfig (idkonfig, idlokasi, minimaltingkat, maksimaltingkat, hari, allowanceson, allowance, meal, transport, phone, laundry, airporttax, seaporttax, allowanceovernight) FROM stdin;
25	Loc201747361	1	9	1	250.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
26	Loc201747361	1	9	2	250.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
27	Loc201747361	1	9	3	250.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
28	Loc201747361	10	20	1	300.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
29	Loc201747361	10	20	2	300.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
30	Loc201747361	10	20	3	300.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
31	Loc2017410336	1	9	1	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
32	Loc2017410336	1	9	2	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
33	Loc2017410336	1	9	3	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
34	Loc2017410336	10	20	1	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
35	Loc2017410336	10	20	2	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
36	Loc2017410336	10	20	3	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
37	Loc2017410977	1	9	1	250.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
38	Loc2017410977	1	9	2	250.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
39	Loc2017410977	1	9	3	250.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
40	Loc2017410977	10	20	1	300.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
41	Loc2017410977	10	20	2	300.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
42	Loc2017410977	10	20	3	300.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
43	Loc2017410635	1	9	1	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
44	Loc2017410635	1	9	2	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
45	Loc2017410635	1	9	3	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
46	Loc2017410635	10	20	1	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
47	Loc2017410635	10	20	2	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
48	Loc2017410635	10	20	3	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
49	Loc2017410458	1	9	1	250.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
50	Loc2017410458	1	9	2	250.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
51	Loc2017410458	1	9	3	250.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
52	Loc2017410458	10	20	1	300.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
53	Loc2017410458	10	20	2	300.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
54	Loc2017410458	10	20	3	300.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
1	Loc201747153	1	7	1	20.00	0.00	25.00	25.00	0.00	0.00	6.00	65000.00	0.00
2	Loc201747153	1	7	2	20.00	0.00	25.00	25.00	0.00	0.00	6.00	65000.00	0.00
3	Loc201747153	1	7	3	20.00	0.00	25.00	25.00	0.00	0.00	6.00	65000.00	0.00
4	Loc201747153	8	9	1	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
5	Loc201747153	8	9	2	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
6	Loc201747153	8	9	3	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
7	Loc201747153	10	14	1	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
8	Loc201747153	10	14	2	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
9	Loc201747153	10	14	3	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
10	Loc201747153	15	50	1	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
11	Loc201747153	15	50	2	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
12	Loc201747153	15	50	3	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
13	Loc201747464	1	7	1	20.00	0.00	110.00	0.00	0.00	0.00	6.00	65000.00	70.00
14	Loc201747464	1	7	2	10.00	0.00	110.00	0.00	0.00	0.00	6.00	65000.00	70.00
15	Loc201747464	1	7	3	5.00	0.00	110.00	0.00	0.00	0.00	6.00	65000.00	70.00
16	Loc201747464	8	9	1	30.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
17	Loc201747464	8	9	2	15.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
18	Loc201747464	8	9	3	7.50	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
19	Loc201747464	10	14	1	35.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
20	Loc201747464	10	14	2	17.50	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
21	Loc201747464	10	14	3	8.75	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
22	Loc201747464	15	25	1	40.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
23	Loc201747464	15	25	2	20.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
24	Loc201747464	15	25	3	10.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
\.


--
-- Data for Name: ta_kota; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_kota (idkota, namakota, namanegara, kodelokasi) FROM stdin;
kota2017314101	Kuala Lumpur	Malaysia	Loc201747153
kota2017314583	Shah Alam	Malaysia	Loc201747153
kota2017314665	Ipoh	Malaysia	Loc201747153
kota2017314237	Alor Setor	Malaysia	Loc201747153
kota2017314272	Johor Bahru	Malaysia	Loc201747153
kota201731454	Kuching	Malaysia	Loc201747153
kota2017314226	Kinabalu	Malaysia	Loc201747153
kota2017314928	Kuala Trengganu	Malaysia	Loc201747153
kota2017314179	Putrajaya	Malaysia	Loc201747153
kota20173144210	Seremban	Malaysia	Loc201747153
kota20173145311	Kota Malaka	Malaysia	Loc201747153
kota20173149912	Segamat	Malaysia	Loc201747153
kota20173146113	Jurong East	Singapore	Loc201747153
kota2017314614	Changi Village	Singapore	Loc201747153
kota20173144315	Kampong Glam	Singapore	Loc201747153
kota2017314716	Bukit Batok	Singapore	Loc201747153
kota2017314617	Clementi	Singapore	Loc201747153
kota20173149318	Novena	Singapore	Loc201747153
kota20173143319	Woodlands	Singapore	Loc201747153
kota2017314720	Serangoon	Singapore	Loc201747153
kota20173142821	Ang Mo Kio	Singapore	Loc201747153
kota20173142022	Bandar Seri Begawan	Brunei Darussalam	Loc201747153
kota2017314823	Kuala Belait	Brunei Darussalam	Loc201747153
kota20173143724	Seria	Brunei Darussalam	Loc201747153
kota20173144825	Muara	Brunei Darussalam	Loc201747153
kota20173147626	Bangar	Brunei Darussalam	Loc201747153
kota2017314527	Jerudong	Brunei Darussalam	Loc201747153
kota20173146228	Kampong Ayer	Brunei Darussalam	Loc201747153
kota20173149729	Panaga	Brunei Darussalam	Loc201747153
kota20173141330	Pekan Tutong	Brunei Darussalam	Loc201747153
kota20173141431	Batam	Indonesia	Loc201747361
kota20173145732	Karimun	Indonesia	Loc2017410635
kota20173145434	Bintan	Indonesia	Loc2017410977
kota20173147035	Jakarta	Indonesia	Loc2017410458
kota20173144833	Tanjung Pinang	Indonesia	Loc2017410336
kota20173145936	Papua	Indonesia	Loc2017410458
kota20173145437	Bandung	Indonesia	Loc2017410458
kota20173147338	Surabaya	Indonesia	Loc2017410458
kota20173149539	Bali	Indonesia	Loc2017410458
kota20173141340	Paris	France	Loc201747464
kota20173148141	Marseille	France	Loc201747464
\.


--
-- Data for Name: ta_log_ta_departemen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_log_ta_departemen (log_id, log_time, log_action, iddepartemen, namadepartemen) FROM stdin;
\.


--
-- Name: ta_log_ta_departemen_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('ta_log_ta_departemen_log_id_seq', 1, false);


--
-- Data for Name: ta_log_ta_jabatan; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_log_ta_jabatan (log_id, log_time, log_action, idjabatan, namajabatan) FROM stdin;
\.


--
-- Name: ta_log_ta_jabatan_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('ta_log_ta_jabatan_log_id_seq', 1, false);


--
-- Data for Name: ta_log_ta_karyawan; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_log_ta_karyawan (log_id, log_time, log_action, nik, nama, email, idtelegram, iddepartemen, idjabatan, tingkat, token) FROM stdin;
1	2017-04-19 15:41:54.406351	INSERT	032013347	Ferty Oke	ferty.oke@gmail.com	                	DEP20173204713	JBT2017320563	9	fES5KdxK  
2	2017-04-21 14:56:48.183572	INSERT	032013743	Reza D	reza@gmail.com	                	DEP2017320282	JBT2017320854	9	AkYawZxG  
\.


--
-- Name: ta_log_ta_karyawan_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('ta_log_ta_karyawan_log_id_seq', 2, true);


--
-- Data for Name: ta_log_ta_konfig; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_log_ta_konfig (log_id, log_time, log_action, idkonfig, idlokasi, minimaltingkat, maksimaltingkat, hari, allowanceson, allowance, meal, transport, phone, laundry, airporttax, seaporttax, allowanceovernight) FROM stdin;
1	2017-04-10 14:04:44.110795	INSERT	16	Loc201747464	8	9	1	30.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
2	2017-04-10 14:04:44.110795	INSERT	17	Loc201747464	8	9	2	15.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
3	2017-04-10 14:04:44.110795	INSERT	18	Loc201747464	8	9	3	7.50	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
4	2017-04-10 14:13:54.989818	INSERT	19	Loc201747464	10	14	1	35.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
5	2017-04-10 14:13:54.989818	INSERT	20	Loc201747464	10	14	2	17.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
6	2017-04-10 14:13:54.989818	INSERT	21	Loc201747464	10	14	3	8.75	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
7	2017-04-10 14:14:55.286081	DELETE	19	Loc201747464	10	14	1	35.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
8	2017-04-10 14:15:01.036071	DELETE	20	Loc201747464	10	14	2	17.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
9	2017-04-10 14:15:06.468092	DELETE	21	Loc201747464	10	14	3	8.75	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
10	2017-04-10 14:15:35.831753	INSERT	19	Loc201747464	10	14	1	35.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
11	2017-04-10 14:15:35.831753	INSERT	20	Loc201747464	10	14	2	17.50	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
12	2017-04-10 14:15:35.831753	INSERT	21	Loc201747464	10	14	3	8.75	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
13	2017-04-10 14:15:52.748877	INSERT	22	Loc201747464	15	25	1	40.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
14	2017-04-10 14:15:52.748877	INSERT	23	Loc201747464	15	25	2	20.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
15	2017-04-10 14:15:52.748877	INSERT	24	Loc201747464	15	25	3	10.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	0.00
16	2017-04-12 20:01:32.414162	INSERT	25	Loc201747361	1	9	1	250.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
17	2017-04-12 20:01:32.414162	INSERT	26	Loc201747361	1	9	2	250.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
18	2017-04-12 20:01:32.414162	INSERT	27	Loc201747361	1	9	3	250.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
19	2017-04-12 20:03:08.135577	INSERT	28	Loc201747361	10	20	1	300.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
20	2017-04-12 20:03:08.135577	INSERT	29	Loc201747361	10	20	2	300.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
21	2017-04-12 20:03:08.135577	INSERT	30	Loc201747361	10	20	3	300.00	35.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
22	2017-04-12 20:04:21.404223	INSERT	31	Loc2017410336	1	9	1	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
23	2017-04-12 20:04:21.404223	INSERT	32	Loc2017410336	1	9	2	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
24	2017-04-12 20:04:21.404223	INSERT	33	Loc2017410336	1	9	3	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
25	2017-04-12 20:04:40.588567	INSERT	34	Loc2017410336	10	20	1	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
26	2017-04-12 20:04:40.588567	INSERT	35	Loc2017410336	10	20	2	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
27	2017-04-12 20:04:40.588567	INSERT	36	Loc2017410336	10	20	3	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
28	2017-04-12 20:05:52.309267	INSERT	37	Loc2017410977	1	9	1	250.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
29	2017-04-12 20:05:52.309267	INSERT	38	Loc2017410977	1	9	2	250.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
30	2017-04-12 20:05:52.309267	INSERT	39	Loc2017410977	1	9	3	250.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
31	2017-04-12 20:05:52.309267	INSERT	40	Loc2017410977	10	20	1	300.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
32	2017-04-12 20:05:52.309267	INSERT	41	Loc2017410977	10	20	2	300.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
33	2017-04-12 20:05:52.309267	INSERT	42	Loc2017410977	10	20	3	300.00	200.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
34	2017-04-12 20:06:42.584127	INSERT	43	Loc2017410635	1	9	1	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
35	2017-04-12 20:06:42.584127	INSERT	44	Loc2017410635	1	9	2	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
36	2017-04-12 20:06:42.584127	INSERT	45	Loc2017410635	1	9	3	250.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
37	2017-04-12 20:06:42.584127	INSERT	46	Loc2017410635	10	20	1	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
38	2017-04-12 20:06:42.584127	INSERT	47	Loc2017410635	10	20	2	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
39	2017-04-12 20:06:42.584127	INSERT	48	Loc2017410635	10	20	3	300.00	150.00	0.00	0.00	0.00	0.00	7.00	0.00	0.00
40	2017-04-12 20:07:14.644711	INSERT	49	Loc2017410458	1	9	1	250.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
41	2017-04-12 20:07:14.644711	INSERT	50	Loc2017410458	1	9	2	250.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
42	2017-04-12 20:07:14.644711	INSERT	51	Loc2017410458	1	9	3	250.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
43	2017-04-12 20:07:14.644711	INSERT	52	Loc2017410458	10	20	1	300.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
44	2017-04-12 20:07:14.644711	INSERT	53	Loc2017410458	10	20	2	300.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
45	2017-04-12 20:07:14.644711	INSERT	54	Loc2017410458	10	20	3	300.00	500.00	0.00	0.00	0.00	0.00	0.00	0.00	0.00
46	2017-04-20 15:15:29.613856	UPDATE	1	Loc201747153	1	7	1	20.00	0.00	25.00	25.00	0.00	0.00	6.00	65000.00	0.00
47	2017-04-20 15:15:35.999819	UPDATE	2	Loc201747153	1	7	2	20.00	0.00	25.00	25.00	0.00	0.00	6.00	65000.00	0.00
48	2017-04-20 15:15:39.486674	UPDATE	3	Loc201747153	1	7	3	20.00	0.00	25.00	25.00	0.00	0.00	6.00	65000.00	0.00
49	2017-04-20 15:15:52.436581	UPDATE	4	Loc201747153	8	9	1	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
50	2017-04-20 15:15:56.195383	UPDATE	5	Loc201747153	8	9	2	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
51	2017-04-20 15:16:00.917459	UPDATE	6	Loc201747153	8	9	3	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
52	2017-04-20 15:16:05.538536	UPDATE	7	Loc201747153	10	14	1	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
53	2017-04-20 15:16:09.813832	UPDATE	8	Loc201747153	10	14	2	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
54	2017-04-20 15:16:14.227743	UPDATE	9	Loc201747153	10	14	3	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
55	2017-04-20 15:16:18.825674	UPDATE	10	Loc201747153	15	50	1	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
56	2017-04-20 15:16:23.587757	UPDATE	11	Loc201747153	15	50	2	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
57	2017-04-20 15:16:27.158584	UPDATE	12	Loc201747153	15	50	3	20.00	0.00	25.00	25.00	50.00	50.00	6.00	65000.00	0.00
58	2017-04-20 15:16:37.618645	UPDATE	13	Loc201747464	1	7	1	20.00	0.00	110.00	0.00	0.00	0.00	6.00	65000.00	70.00
59	2017-04-20 15:16:41.111541	UPDATE	14	Loc201747464	1	7	2	10.00	0.00	110.00	0.00	0.00	0.00	6.00	65000.00	70.00
60	2017-04-20 15:16:44.955269	UPDATE	15	Loc201747464	1	7	3	5.00	0.00	110.00	0.00	0.00	0.00	6.00	65000.00	70.00
61	2017-04-20 15:16:48.490337	UPDATE	16	Loc201747464	8	9	1	30.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
62	2017-04-20 15:16:51.750492	UPDATE	17	Loc201747464	8	9	2	15.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
63	2017-04-20 15:16:55.325684	UPDATE	18	Loc201747464	8	9	3	7.50	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
64	2017-04-20 15:16:59.127826	UPDATE	19	Loc201747464	10	14	1	35.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
65	2017-04-20 15:17:03.927446	UPDATE	20	Loc201747464	10	14	2	17.50	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
66	2017-04-20 15:17:08.539683	UPDATE	21	Loc201747464	10	14	3	8.75	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
67	2017-04-20 15:17:12.152422	UPDATE	22	Loc201747464	15	25	1	40.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
68	2017-04-20 15:17:16.381813	UPDATE	23	Loc201747464	15	25	2	20.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
69	2017-04-20 15:17:20.41788	UPDATE	24	Loc201747464	15	25	3	10.00	0.00	110.00	0.00	50.00	50.00	6.00	65000.00	70.00
\.


--
-- Name: ta_log_ta_konfig_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('ta_log_ta_konfig_log_id_seq', 69, true);


--
-- Data for Name: ta_log_ta_pengguna; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_log_ta_pengguna (log_id, log_time, log_action, nik, katasandi, level, status) FROM stdin;
1	2017-04-05 11:35:27.985284	INSERT	032013012	032013012	admin	active
\.


--
-- Name: ta_log_ta_pengguna_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('ta_log_ta_pengguna_log_id_seq', 1, true);


--
-- Data for Name: ta_log_ta_permintaanpergipulang; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_log_ta_permintaanpergipulang (log_id, log_time, log_action, idpermintaan, nikpengaju, nikpejalan, lokasipergi, lokasipulang, waktupermintaan) FROM stdin;
1	2017-04-03 13:19:52.573958	INSERT	REQ20174352	4311301078	{4311,4312,4313}	{Batam,Paris}	{Paris,Batam}	2017-04-03
2	2017-04-03 13:57:52.161081	UPDATE	REQ20174352	4311301078	{4311,4312,4313}	{Batam,Paris}	{Paris,Batam}	2017-04-03
3	2017-04-03 14:30:07.697384	UPDATE	REQ20174352	4311301078	{4311,4312,4313}	{Batam,Paris}	{Paris,Batam}	2017-04-03
4	2017-04-10 14:25:45.061854	UPDATE	REQ2017316881	4311301046	{4311,4312,4313}	{Batam,Paris}	{Paris,Batam}	2017-03-16
5	2017-04-10 14:26:05.651359	UPDATE	REQ20174352	4311301078	{4311,4312,4313}	{Batam,Paris}	{Paris,Batam}	2017-04-03
7	2017-04-19 14:27:03.697439	INSERT	REQ2017419103	032013024	{032013024}	{Batam,Paris}	{Paris,Batam}	2017-04-19
8	2017-04-19 15:11:01.472875	UPDATE	REQ2017316881	4311301046	{4311,4312,4313}	{Batam,Paris}	{Paris,Batam}	2017-03-16
9	2017-04-19 15:11:13.881752	UPDATE	REQ2017419103	032013024	{032013024}	{Batam,Paris}	{Paris,Batam}	2017-04-19
10	2017-04-19 15:11:27.315847	UPDATE	REQ20174352	4311301078	{4311,4312,4313}	{Batam,Paris}	{Paris,Batam}	2017-04-03
\.


--
-- Name: ta_log_ta_permintaanpergipulang_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('ta_log_ta_permintaanpergipulang_log_id_seq', 10, true);


--
-- Data for Name: ta_lokasi; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_lokasi (idlokasi, namatempat) FROM stdin;
lok1	rumah
lok2	Pelabuhan Batam Center
lok201738403	bintan
lok201738887	
lok201738908	
lok201738879	
lok2017382910	
lok2017384611	
lok2017386810	
lok2017382911	
\.


--
-- Data for Name: ta_matauang; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_matauang (idmatauang, namamatauang, simbolmatauang) FROM stdin;
uang1	Rupiah          	IDR   
uang2	Singapore Dollar	SGD   
uang3	Euro            	EURO  
uang4	Amerika Dollar  	USD   
\.


--
-- Data for Name: ta_pengguna; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_pengguna (nik, katasandi, level, status) FROM stdin;
032013005	032013005	operator	active
032013008	032013008	manajer	special
032013012	032013012	admin	active
\.


--
-- Data for Name: ta_permintaan; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_permintaan (idpermintaan, allowanceson, allowance, meal, transport, phone, laundry, airporttax, seaporttax, othercost, trainingcost, totalidr, totalsgd, totalusd, totaleur, totalidrgrup, totalsgdgrup, totalusdgrup, totaleurgrup, nikpenerima, waktuditerima, keterangan, statuspermintaan) FROM stdin;
\.


--
-- Data for Name: ta_permintaanpergipulang; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_permintaanpergipulang (idpermintaan, nikpengaju, nikpejalan, lokasipergi, lokasipertrippergifrom, lokasipertrippergito, waktupertrippergi, biayapertrippergiidr, biayapertrippergisgd, biayapertrippergiusd, biayapertrippergieur, matauangpergi, kendaraanpertrippergi, tanggalpergi, lokasipulang, lokasipertrippulangfrom, lokasipertrippulangto, waktupertrippulang, biayapertrippulangidr, biayapertrippulangsgd, biayapertrippulangusd, biayapertrippulangeur, matauangpulang, kendaraanpertrippulang, tanggalpulang, kendaraanpertrippergipulang, jumlahkendaraanpertrippergipulang, totalwaktupergipulang, totalhari, waktupermintaan, namarute) FROM stdin;
REQ20174352	4311301078	{4311,4312,4313}	{Batam,Paris}	{home,"pelabuhan batam","changi airpot",dubai}	{pelabuhan,"pelabuhan singapore",dubai,paris}	{20,40,60,10}	{100000}	{20}	{40,30}	{0}	{idr,sgd,usd,usd}	{taxi,ship,airplane,airplane}	2012-01-01	{Paris,Batam}	{paris,dubai,"changi airpot","pelabuhan batam"}	{dubai,"changi airpot","pelabuhan batam",home}	{40,30,50,20}	{100000}	{20,30}	{50}	{0}	{idr,sgd,sgd,usd}	{airplane,airplane,ship,taxi}	2012-01-24	{taxi,ship,airplane,airplane,airplane,airplane,ship,taxi}	airplane:4  taxi:2  ship:2	270	23	2017-04-03 06:19:52.573958+00	rute3
REQ2017316881	4311301046	{4311,4312,4313}	{Batam,Paris}	{home,"pelabuhan batam","changi airpot",dubai}	{pelabuhan,"pelabuhan singapore",dubai,paris}	{20,40,60,10}	{100000}	{20}	{40,30}	{0}	{idr,sgd,usd,usd}	{taxi,ship,airplane,airplane}	2012-01-01	{Paris,Batam}	{paris,dubai,"changi airpot","pelabuhan batam"}	{dubai,"changi airpot","pelabuhan batam",home}	{40,30,50,20}	{100000}	{20,30}	{50}	{0}	{idr,sgd,sgd,usd}	{airplane,airplane,ship,taxi}	2012-01-20	{taxi,ship,airplane,airplane,airplane,airplane,ship,taxi}	airplane:4  taxi:2  ship:2	270	19	2017-03-16 07:05:20.251851+00	rute1
REQ2017419103	032013024	{032013024}	{Batam,Paris}	{home,"pelabuhan batam","changi airpot",dubai}	{pelabuhan,"pelabuhan singapore",dubai,paris}	{20,40,60,10}	{100000}	{20}	{40,30}	{0}	{idr,sgd,usd,usd}	{taxi,ship,airplane,airplane}	2012-01-01	{Paris,Batam}	{paris,dubai,"changi airpot","pelabuhan batam"}	{dubai,"changi airpot","pelabuhan batam",home}	{40,30,50,20}	{100000}	{20,30}	{50}	{0}	{idr,sgd,sgd,usd}	{airplane,airplane,ship,taxi}	2012-01-20	{taxi,ship,airplane,airplane,airplane,airplane,ship,taxi}	airplane:4  taxi:2  ship:2	270	19	2017-04-19 07:27:03.697439+00	rute2
\.


--
-- Data for Name: ta_persetujuan; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ta_persetujuan (nikpeminta, nikpenerima1, nikpenerima2, nikpenerima3, nikpenerima4, statuspersetujuan) FROM stdin;
032013056	032013047	032013005	032013034	032013068	tidak
\.


SET search_path = program, pg_catalog;

--
-- Name: ta_approval_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_approval
    ADD CONSTRAINT ta_approval_pkey PRIMARY KEY (reqnik);


--
-- Name: ta_area_code_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_area_code
    ADD CONSTRAINT ta_area_code_pkey PRIMARY KEY (area_code);


--
-- Name: ta_basic_rate_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_basic_rate
    ADD CONSTRAINT ta_basic_rate_pkey PRIMARY KEY (id);


--
-- Name: ta_city_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_city
    ADD CONSTRAINT ta_city_pkey PRIMARY KEY (id);


--
-- Name: ta_department_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_department
    ADD CONSTRAINT ta_department_pkey PRIMARY KEY (deptid);


--
-- Name: ta_destination_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_destination
    ADD CONSTRAINT ta_destination_pkey PRIMARY KEY (code);


--
-- Name: ta_employment_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_employee
    ADD CONSTRAINT ta_employment_pkey PRIMARY KEY (nik);


--
-- Name: ta_livingcost_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_livingcost
    ADD CONSTRAINT ta_livingcost_pkey PRIMARY KEY (id);


--
-- Name: ta_location_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_location
    ADD CONSTRAINT ta_location_pkey PRIMARY KEY (id);


--
-- Name: ta_notification_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_notification
    ADD CONSTRAINT ta_notification_pkey PRIMARY KEY (id);


--
-- Name: ta_position_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_position
    ADD CONSTRAINT ta_position_pkey PRIMARY KEY (postid);


--
-- Name: ta_realization_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_realization
    ADD CONSTRAINT ta_realization_pkey PRIMARY KEY (id);


--
-- Name: ta_request_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_request
    ADD CONSTRAINT ta_request_pkey PRIMARY KEY (id);


--
-- Name: ta_timecost_system_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_timecost_system
    ADD CONSTRAINT ta_timecost_system_pkey PRIMARY KEY (id);


--
-- Name: ta_tipsandtrick_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_tipsandtrick
    ADD CONSTRAINT ta_tipsandtrick_pkey PRIMARY KEY (id);


--
-- Name: ta_user_pkey; Type: CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_user
    ADD CONSTRAINT ta_user_pkey PRIMARY KEY (nik);


SET search_path = public, pg_catalog;

--
-- Name: my_table_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY my_table
    ADD CONSTRAINT my_table_pkey PRIMARY KEY (id);


--
-- Name: ta_departemen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_departemen
    ADD CONSTRAINT ta_departemen_pkey PRIMARY KEY (iddepartemen);


--
-- Name: ta_destination_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_destination
    ADD CONSTRAINT ta_destination_pkey PRIMARY KEY (code);


--
-- Name: ta_jabatan_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_jabatan
    ADD CONSTRAINT ta_jabatan_pkey PRIMARY KEY (idjabatan);


--
-- Name: ta_karyawan_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_karyawan
    ADD CONSTRAINT ta_karyawan_pkey PRIMARY KEY (nik);


--
-- Name: ta_kodelokasi_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_kodelokasi
    ADD CONSTRAINT ta_kodelokasi_pkey PRIMARY KEY (idlokasi);


--
-- Name: ta_kota_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_kota
    ADD CONSTRAINT ta_kota_pkey PRIMARY KEY (idkota);


--
-- Name: ta_lokasi_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_lokasi
    ADD CONSTRAINT ta_lokasi_pkey PRIMARY KEY (idlokasi);


--
-- Name: ta_matauang_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_matauang
    ADD CONSTRAINT ta_matauang_pkey PRIMARY KEY (idmatauang);


--
-- Name: ta_pengguna_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_pengguna
    ADD CONSTRAINT ta_pengguna_pkey PRIMARY KEY (nik);


--
-- Name: ta_permintaanpergipulang_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_permintaanpergipulang
    ADD CONSTRAINT ta_permintaanpergipulang_pkey PRIMARY KEY (idpermintaan);


--
-- Name: ta_persetujuan_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_persetujuan
    ADD CONSTRAINT ta_persetujuan_pkey PRIMARY KEY (nikpeminta);


--
-- Name: tr_fu_log_departemen; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tr_fu_log_departemen BEFORE INSERT OR DELETE OR UPDATE ON ta_departemen FOR EACH ROW EXECUTE PROCEDURE tr_fu_log_departemen();


--
-- Name: tr_fu_log_jabatan; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tr_fu_log_jabatan BEFORE INSERT OR DELETE OR UPDATE ON ta_jabatan FOR EACH ROW EXECUTE PROCEDURE tr_fu_log_jabatan();


--
-- Name: tr_fu_log_karyawan; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tr_fu_log_karyawan BEFORE INSERT OR DELETE OR UPDATE ON ta_karyawan FOR EACH ROW EXECUTE PROCEDURE tr_fu_log_karyawan();


--
-- Name: tr_fu_log_konfig; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tr_fu_log_konfig BEFORE INSERT OR DELETE OR UPDATE ON ta_konfig FOR EACH ROW EXECUTE PROCEDURE tr_fu_log_konfig();


--
-- Name: tr_fu_log_pengguna; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tr_fu_log_pengguna BEFORE INSERT OR DELETE OR UPDATE ON ta_pengguna FOR EACH ROW EXECUTE PROCEDURE tr_fu_log_pengguna();


--
-- Name: tr_fu_log_permintaanpergipulang; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tr_fu_log_permintaanpergipulang BEFORE INSERT OR DELETE OR UPDATE ON ta_permintaanpergipulang FOR EACH ROW EXECUTE PROCEDURE tr_fu_log_permintaanpergipulang();


SET search_path = program, pg_catalog;

--
-- Name: reqnik; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_notification
    ADD CONSTRAINT reqnik FOREIGN KEY (reqnik) REFERENCES ta_employee(nik);


--
-- Name: ta_basic_rate_hotel_id_area_code_fkey; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_basic_rate_hotel
    ADD CONSTRAINT ta_basic_rate_hotel_id_area_code_fkey FOREIGN KEY (id_area_code) REFERENCES ta_area_code(area_code);


--
-- Name: ta_basic_rate_id_area_code_fkey; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_basic_rate
    ADD CONSTRAINT ta_basic_rate_id_area_code_fkey FOREIGN KEY (id_area_code) REFERENCES ta_area_code(area_code);


--
-- Name: ta_basic_rate_pocket_allowance_id_area_code_fkey; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_basic_rate_pocket_allowance
    ADD CONSTRAINT ta_basic_rate_pocket_allowance_id_area_code_fkey FOREIGN KEY (id_area_code) REFERENCES ta_area_code(area_code);


--
-- Name: ta_employment_deptid_fkey; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_employee
    ADD CONSTRAINT ta_employment_deptid_fkey FOREIGN KEY (deptid) REFERENCES ta_department(deptid) ON DELETE CASCADE;


--
-- Name: ta_employment_postid_fkey; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_employee
    ADD CONSTRAINT ta_employment_postid_fkey FOREIGN KEY (postid) REFERENCES ta_position(postid) ON DELETE CASCADE;


--
-- Name: ta_realization_approvenik_fkey; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_realization
    ADD CONSTRAINT ta_realization_approvenik_fkey FOREIGN KEY (approvenik) REFERENCES ta_employee(nik);


--
-- Name: ta_realization_reqnik_fkey; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_realization
    ADD CONSTRAINT ta_realization_reqnik_fkey FOREIGN KEY (reqnik) REFERENCES ta_employee(nik);


--
-- Name: ta_request_approvenik_fkey; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_request
    ADD CONSTRAINT ta_request_approvenik_fkey FOREIGN KEY (approvenik) REFERENCES ta_employee(nik);


--
-- Name: ta_request_reqnik_fkey; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_request
    ADD CONSTRAINT ta_request_reqnik_fkey FOREIGN KEY (reqnik) REFERENCES ta_employee(nik);


--
-- Name: ta_user_nik_fkey; Type: FK CONSTRAINT; Schema: program; Owner: postgres
--

ALTER TABLE ONLY ta_user
    ADD CONSTRAINT ta_user_nik_fkey FOREIGN KEY (nik) REFERENCES ta_employee(nik);


SET search_path = public, pg_catalog;

--
-- Name: kodelokasi; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_kota
    ADD CONSTRAINT kodelokasi FOREIGN KEY (kodelokasi) REFERENCES ta_kodelokasi(idlokasi);


--
-- Name: ta_karyawan_iddepartemen_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_karyawan
    ADD CONSTRAINT ta_karyawan_iddepartemen_fkey FOREIGN KEY (iddepartemen) REFERENCES ta_departemen(iddepartemen) ON UPDATE CASCADE;


--
-- Name: ta_karyawan_idjabatan_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_karyawan
    ADD CONSTRAINT ta_karyawan_idjabatan_fkey FOREIGN KEY (idjabatan) REFERENCES ta_jabatan(idjabatan) ON UPDATE CASCADE;


--
-- Name: ta_konfig_idlokasi_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_konfig
    ADD CONSTRAINT ta_konfig_idlokasi_fkey FOREIGN KEY (idlokasi) REFERENCES ta_kodelokasi(idlokasi) ON UPDATE CASCADE;


--
-- Name: ta_pengguna; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ta_pengguna
    ADD CONSTRAINT ta_pengguna FOREIGN KEY (nik) REFERENCES ta_karyawan(nik);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

